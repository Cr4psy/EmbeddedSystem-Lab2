
DIP204_EXAMPLE3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fa0  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000794  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009994  80009994  00009d94  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000510  00000008  80009998  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000160  00000518  00000518  00000000  2**2
                  ALLOC
  9 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000db8  00000000  00000000  0000a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001925  00000000  00000000  0000b300  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00020a1a  00000000  00000000  0000cc25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005504  00000000  00000000  0002d63f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e709  00000000  00000000  00032b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000204c  00000000  00000000  0004124c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004286  00000000  00000000  00043298  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a116  00000000  00000000  0004751e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00a2491e  00000000  00000000  00051634  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000f80  00000000  00000000  00a75f58  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c9 70 	sub	pc,pc,-13968

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e9 74 	sub	pc,pc,-5772

Disassembly of section .text:

80002008 <adc_configure>:
80002008:	78 18       	ld.w	r8,r12[0x4]
8000200a:	ea 18 0f 00 	orh	r8,0xf00
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
8000200e:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002010:	78 18       	ld.w	r8,r12[0x4]
80002012:	ea 18 00 1f 	orh	r8,0x1f
80002016:	99 18       	st.w	r12[0x4],r8
}
80002018:	5e fc       	retal	r12

8000201a <adc_start>:
void adc_start(volatile avr32_adc_t *adc)
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
8000201a:	30 28       	mov	r8,2
8000201c:	99 08       	st.w	r12[0x0],r8
}
8000201e:	5e fc       	retal	r12

80002020 <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002020:	30 18       	mov	r8,1
80002022:	f0 0b 09 48 	lsl	r8,r8,r11
80002026:	99 48       	st.w	r12[0x10],r8
}
80002028:	5e fc       	retal	r12

8000202a <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
8000202a:	78 78       	ld.w	r8,r12[0x1c]
8000202c:	30 19       	mov	r9,1
8000202e:	f2 0b 09 49 	lsl	r9,r9,r11
80002032:	f3 e8 00 08 	and	r8,r9,r8
}
80002036:	5f 1c       	srne	r12
80002038:	5e fc       	retal	r12
8000203a:	d7 03       	nop

8000203c <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
8000203c:	eb cd 40 e0 	pushm	r5-r7,lr
80002040:	18 97       	mov	r7,r12
80002042:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002044:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002048:	0c 9b       	mov	r11,r6
8000204a:	0e 9c       	mov	r12,r7
8000204c:	f0 1f 00 05 	mcall	80002060 <adc_get_value+0x24>
80002050:	cf c0       	breq	80002048 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80002052:	2d 07       	sub	r7,-48
80002054:	5c 75       	castu.h	r5
}
80002056:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
8000205a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000205e:	00 00       	add	r0,r0
80002060:	80 00       	ld.sh	r0,r0[0x0]
80002062:	20 2a       	sub	r10,2

80002064 <displaySensors>:
	return 0;

}


void displaySensors(int nbID, int temperature, int avgTemp,int light,int avgLight){
80002064:	eb cd 40 f8 	pushm	r3-r7,lr
80002068:	18 96       	mov	r6,r12
8000206a:	16 97       	mov	r7,r11
8000206c:	14 95       	mov	r5,r10
8000206e:	12 94       	mov	r4,r9
80002070:	10 93       	mov	r3,r8
		
		
			/*Print on the display*/
			dip204_clear_display();//Clear all
80002072:	f0 1f 00 18 	mcall	800020d0 <displaySensors+0x6c>
			
			//ID
			dip204_set_cursor_position(1,1);
80002076:	30 1b       	mov	r11,1
80002078:	16 9c       	mov	r12,r11
8000207a:	f0 1f 00 17 	mcall	800020d4 <displaySensors+0x70>
			dip204_printf_string("#Node:%d",nbID);
8000207e:	1a d6       	st.w	--sp,r6
80002080:	49 6c       	lddpc	r12,800020d8 <displaySensors+0x74>
80002082:	f0 1f 00 17 	mcall	800020dc <displaySensors+0x78>
			
			//temperature
			dip204_set_cursor_position(1,2);
80002086:	30 2b       	mov	r11,2
80002088:	30 1c       	mov	r12,1
8000208a:	f0 1f 00 13 	mcall	800020d4 <displaySensors+0x70>
			dip204_printf_string("Temp: %d",temperature);
8000208e:	1a d7       	st.w	--sp,r7
80002090:	49 4c       	lddpc	r12,800020e0 <displaySensors+0x7c>
80002092:	f0 1f 00 13 	mcall	800020dc <displaySensors+0x78>
			dip204_set_cursor_position(12,2);
80002096:	30 2b       	mov	r11,2
80002098:	30 cc       	mov	r12,12
8000209a:	f0 1f 00 0f 	mcall	800020d4 <displaySensors+0x70>
			dip204_printf_string("%d", avgTemp);
8000209e:	49 27       	lddpc	r7,800020e4 <displaySensors+0x80>
800020a0:	1a d5       	st.w	--sp,r5
800020a2:	0e 9c       	mov	r12,r7
800020a4:	f0 1f 00 0e 	mcall	800020dc <displaySensors+0x78>
			
			//Light
			dip204_set_cursor_position(1,3);
800020a8:	30 3b       	mov	r11,3
800020aa:	30 1c       	mov	r12,1
800020ac:	f0 1f 00 0a 	mcall	800020d4 <displaySensors+0x70>
			dip204_printf_string("Light: %d",light);
800020b0:	1a d4       	st.w	--sp,r4
800020b2:	48 ec       	lddpc	r12,800020e8 <displaySensors+0x84>
800020b4:	f0 1f 00 0a 	mcall	800020dc <displaySensors+0x78>
			dip204_set_cursor_position(12,3);
800020b8:	30 3b       	mov	r11,3
800020ba:	30 cc       	mov	r12,12
800020bc:	f0 1f 00 06 	mcall	800020d4 <displaySensors+0x70>
			dip204_printf_string("%d", avgLight);
800020c0:	1a d3       	st.w	--sp,r3
800020c2:	0e 9c       	mov	r12,r7
800020c4:	f0 1f 00 06 	mcall	800020dc <displaySensors+0x78>
800020c8:	2f bd       	sub	sp,-20
			
			return;
			
}
800020ca:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800020ce:	00 00       	add	r0,r0
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	2f 80       	sub	r0,-8
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	2e f4       	sub	r4,-17
800020d8:	80 00       	ld.sh	r0,r0[0x0]
800020da:	92 44       	ld.sh	r4,r9[0x8]
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	2e 5c       	sub	r12,-27
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	92 50       	ld.sh	r0,r9[0xa]
800020e4:	80 00       	ld.sh	r0,r0[0x0]
800020e6:	92 20       	ld.sh	r0,r9[0x4]
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	92 5c       	ld.sh	r12,r9[0xa]

800020ec <main>:
UINT32 ourID = 0x01205;

void displaySensors(int, int, int,int,int);
void displayReceiveMsg();

int main(void) {
800020ec:	d4 31       	pushm	r0-r7,lr
800020ee:	fa cd 01 b8 	sub	sp,sp,440


	
	UINT32 Mask = 0xff00;
	UINT32 flt = 0x1200;
	UINT32 Flt[] = {flt,flt,flt,flt,flt,flt};
800020f2:	e0 68 12 00 	mov	r8,4608
800020f6:	56 88       	stdsp	sp[0x1a0],r8
800020f8:	56 98       	stdsp	sp[0x1a4],r8
800020fa:	56 a8       	stdsp	sp[0x1a8],r8
800020fc:	56 b8       	stdsp	sp[0x1ac],r8
800020fe:	56 c8       	stdsp	sp[0x1b0],r8
80002100:	56 d8       	stdsp	sp[0x1b4],r8
	signed short adc_value_temp  = -1;
	signed short adc_value_light = -1;
	signed short adc_value_pot   = -1;
	
	/* Init system clocks */
	sysclk_init();
80002102:	f0 1f 00 aa 	mcall	800023a8 <main+0x2bc>
	
	/* Assign and enable GPIO pins to the ADC function. */
	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) /
80002106:	30 3b       	mov	r11,3
80002108:	fe fc 02 a4 	ld.w	r12,pc[676]
8000210c:	f0 1f 00 a9 	mcall	800023b0 <main+0x2c4>
	
		/* Configure the ADC peripheral module.
	 * Lower the ADC clock to match the ADC characteristics (because we
	 * configured the CPU clock to 12MHz, and the ADC clock characteristics are
	 *  usually lower; cf. the ADC Characteristic section in the datasheet). */
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
80002110:	fe 77 3c 00 	mov	r7,-50176
80002114:	6e 18       	ld.w	r8,r7[0x4]
80002116:	a9 a8       	sbr	r8,0x8
80002118:	8f 18       	st.w	r7[0x4],r8
	//Set the resolution to 10bits, 0-->10, 1-->8
	AVR32_ADC.mr |= 0x0 << AVR32_ADC_MR_LOWRES_OFFSET;
8000211a:	6e 18       	ld.w	r8,r7[0x4]
8000211c:	8f 18       	st.w	r7[0x4],r8
	adc_configure(&AVR32_ADC);
8000211e:	0e 9c       	mov	r12,r7
80002120:	f0 1f 00 a5 	mcall	800023b4 <main+0x2c8>
	
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_TEMPERATURE_CHANNEL);
80002124:	30 0b       	mov	r11,0
80002126:	0e 9c       	mov	r12,r7
80002128:	f0 1f 00 a4 	mcall	800023b8 <main+0x2cc>
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_LIGHT_CHANNEL);
8000212c:	30 2b       	mov	r11,2
8000212e:	0e 9c       	mov	r12,r7
80002130:	f0 1f 00 a2 	mcall	800023b8 <main+0x2cc>
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
80002134:	30 1b       	mov	r11,1
80002136:	0e 9c       	mov	r12,r7
80002138:	f0 1f 00 a0 	mcall	800023b8 <main+0x2cc>
	
	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
8000213c:	30 3a       	mov	r10,3
8000213e:	e0 6b 1b 00 	mov	r11,6912
80002142:	ea 1b 00 b7 	orh	r11,0xb7
80002146:	fe 7c 0c 00 	mov	r12,-62464
8000214a:	f0 1f 00 9d 	mcall	800023bc <main+0x2d0>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
8000214e:	f0 1f 00 9d 	mcall	800023c0 <main+0x2d4>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002152:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002154:	f0 1f 00 9c 	mcall	800023c4 <main+0x2d8>
	Enable_global_interrupt();
80002158:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
8000215a:	f0 1f 00 9c 	mcall	800023c8 <main+0x2dc>
	dip204_init(100,1);
8000215e:	30 1b       	mov	r11,1
80002160:	36 4c       	mov	r12,100
80002162:	f0 1f 00 9b 	mcall	800023cc <main+0x2e0>
	dip204_clear_display();
80002166:	f0 1f 00 9b 	mcall	800023d0 <main+0x2e4>
	
	/*Initializes communication can*/
	InitializeCANExtended(Channel, CAN_250kbps, Mask, Flt);
8000216a:	fa c9 fe 60 	sub	r9,sp,-416
8000216e:	e0 6a ff 00 	mov	r10,65280
80002172:	30 7b       	mov	r11,7
80002174:	30 0c       	mov	r12,0
80002176:	f0 1f 00 98 	mcall	800023d4 <main+0x2e8>
	
	
	/*First message*/
	dip204_set_cursor_position(1,1);
8000217a:	30 1b       	mov	r11,1
8000217c:	16 9c       	mov	r12,r11
8000217e:	f0 1f 00 97 	mcall	800023d8 <main+0x2ec>
	dip204_printf_string("Heja");
80002182:	fe fc 02 5a 	ld.w	r12,pc[602]
80002186:	f0 1f 00 97 	mcall	800023e0 <main+0x2f4>
	dip204_hide_cursor();
8000218a:	f0 1f 00 97 	mcall	800023e4 <main+0x2f8>
	

	while(1){

		//Clear memory contents
		ClearMessages(msg);
8000218e:	fe f5 02 5a 	ld.w	r5,pc[602]
		int pot_avg = 0;
		int i = 0;
		int timeCounter=0;
		bool flag = FALSE;
		//Read any message available
		if(CANRxReady(0)){
80002192:	30 04       	mov	r4,0
			while(timeCounter < 120)
			{
				if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002194:	fe f1 02 58 	ld.w	r1,pc[600]
					}
				}
				
			
			// Send messages if possible (every 500ms)
			if(CANTxReady(0) && timeCounter>50 && timeCounter<60)
80002198:	30 00       	mov	r0,0
		bool flag = FALSE;
		//Read any message available
		if(CANRxReady(0)){
			while(timeCounter < 120)
			{
				if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
8000219a:	fe f3 02 56 	ld.w	r3,pc[598]
8000219e:	02 92       	mov	r2,r1
	

	while(1){

		//Clear memory contents
		ClearMessages(msg);
800021a0:	0a 9c       	mov	r12,r5
800021a2:	f0 1f 00 95 	mcall	800023f4 <main+0x308>
		
		/*Read sensors values*/
		adc_start(&AVR32_ADC);
800021a6:	fe 7c 3c 00 	mov	r12,-50176
800021aa:	f0 1f 00 94 	mcall	800023f8 <main+0x30c>
		adc_value_temp = adc_get_value(&AVR32_ADC,EXAMPLE_ADC_TEMPERATURE_CHANNEL);
800021ae:	30 0b       	mov	r11,0
800021b0:	fe 7c 3c 00 	mov	r12,-50176
800021b4:	f0 1f 00 92 	mcall	800023fc <main+0x310>
800021b8:	5c 8c       	casts.h	r12
800021ba:	50 1c       	stdsp	sp[0x4],r12
		adc_value_light = adc_get_value(&AVR32_ADC,EXAMPLE_ADC_LIGHT_CHANNEL);
800021bc:	30 2b       	mov	r11,2
800021be:	fe 7c 3c 00 	mov	r12,-50176
800021c2:	f0 1f 00 8f 	mcall	800023fc <main+0x310>
800021c6:	5c 8c       	casts.h	r12
800021c8:	50 0c       	stdsp	sp[0x0],r12
		adc_value_pot = adc_get_value(&AVR32_ADC,EXAMPLE_ADC_POTENTIOMETER_CHANNEL);	
800021ca:	30 1b       	mov	r11,1
800021cc:	fe 7c 3c 00 	mov	r12,-50176
800021d0:	f0 1f 00 8b 	mcall	800023fc <main+0x310>

		
		int ValueSummer[20][4] = {0};
800021d4:	e0 6a 01 40 	mov	r10,320
800021d8:	30 0b       	mov	r11,0
800021da:	fa cc ff f0 	sub	r12,sp,-16
800021de:	f0 1f 00 89 	mcall	80002400 <main+0x314>
		UINT32 IDSummer[20] = {0};
800021e2:	30 08       	mov	r8,0
800021e4:	30 09       	mov	r9,0
800021e6:	fa e9 01 50 	st.d	sp[336],r8
800021ea:	fa e9 01 58 	st.d	sp[344],r8
800021ee:	fa e9 01 60 	st.d	sp[352],r8
800021f2:	fa e9 01 68 	st.d	sp[360],r8
800021f6:	fa e9 01 70 	st.d	sp[368],r8
800021fa:	fa e9 01 78 	st.d	sp[376],r8
800021fe:	fa e9 01 80 	st.d	sp[384],r8
80002202:	fa e9 01 88 	st.d	sp[392],r8
80002206:	fa e9 01 90 	st.d	sp[400],r8
8000220a:	fa e9 01 98 	st.d	sp[408],r8
		int pot_avg = 0;
		int i = 0;
		int timeCounter=0;
		bool flag = FALSE;
		//Read any message available
		if(CANRxReady(0)){
8000220e:	30 0c       	mov	r12,0
80002210:	f0 1f 00 7d 	mcall	80002404 <main+0x318>
80002214:	cc 60       	breq	800021a0 <main+0xb4>
80002216:	30 07       	mov	r7,0
80002218:	08 96       	mov	r6,r4
			while(timeCounter < 120)
			{
				if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
8000221a:	06 99       	mov	r9,r3
8000221c:	0a 9a       	mov	r10,r5
8000221e:	04 9b       	mov	r11,r2
80002220:	08 9c       	mov	r12,r4
80002222:	f0 1f 00 7a 	mcall	80002408 <main+0x31c>
80002226:	c2 40       	breq	8000226e <main+0x182>
				{			
				
					if (counter==0){
80002228:	58 06       	cp.w	r6,0
8000222a:	c0 b0       	breq	80002240 <main+0x154>
						ValueSummer[counter][3] = msg[4];
						counter++;	
					}
					else{
						flag=FALSE;
						for (i=0; i<counter; i++){
8000222c:	e0 8a 00 8e 	brle	80002348 <main+0x25c>
							if (IDSummer[i] == Ident){
80002230:	62 0b       	ld.w	r11,r1[0x0]
80002232:	45 48       	lddsp	r8,sp[0x150]
80002234:	16 38       	cp.w	r8,r11
80002236:	c1 c0       	breq	8000226e <main+0x182>
80002238:	fa c9 fe ac 	sub	r9,sp,-340
8000223c:	08 98       	mov	r8,r4
8000223e:	c1 48       	rjmp	80002266 <main+0x17a>
			{
				if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
				{			
				
					if (counter==0){
						IDSummer[counter] = Ident; //Identity
80002240:	62 08       	ld.w	r8,r1[0x0]
80002242:	55 48       	stdsp	sp[0x150],r8
						ValueSummer[counter][1] = (msg[0] << 8) | msg[1]; //Temperature
80002244:	0b 89       	ld.ub	r9,r5[0x0]
80002246:	0b 98       	ld.ub	r8,r5[0x1]
80002248:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000224c:	50 58       	stdsp	sp[0x14],r8
						ValueSummer[counter][2] = (msg[2] << 8) | msg[3]; //Light
8000224e:	0b a9       	ld.ub	r9,r5[0x2]
80002250:	0b b8       	ld.ub	r8,r5[0x3]
80002252:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002256:	50 68       	stdsp	sp[0x18],r8
						ValueSummer[counter][3] = msg[4];
80002258:	0b c8       	ld.ub	r8,r5[0x4]
8000225a:	50 78       	stdsp	sp[0x1c],r8
8000225c:	30 16       	mov	r6,1
8000225e:	c0 88       	rjmp	8000226e <main+0x182>
						counter++;	
					}
					else{
						flag=FALSE;
						for (i=0; i<counter; i++){
							if (IDSummer[i] == Ident){
80002260:	13 0a       	ld.w	r10,r9++
80002262:	16 3a       	cp.w	r10,r11
80002264:	c0 50       	breq	8000226e <main+0x182>
						ValueSummer[counter][3] = msg[4];
						counter++;	
					}
					else{
						flag=FALSE;
						for (i=0; i<counter; i++){
80002266:	2f f8       	sub	r8,-1
80002268:	0c 38       	cp.w	r8,r6
8000226a:	cf b5       	brlt	80002260 <main+0x174>
8000226c:	c6 e8       	rjmp	80002348 <main+0x25c>
					}
				}
				
			
			// Send messages if possible (every 500ms)
			if(CANTxReady(0) && timeCounter>50 && timeCounter<60)
8000226e:	08 9c       	mov	r12,r4
80002270:	f0 1f 00 67 	mcall	8000240c <main+0x320>
80002274:	c2 a0       	breq	800022c8 <main+0x1dc>
80002276:	e0 47 00 32 	cp.w	r7,50
8000227a:	5f 99       	srgt	r9
8000227c:	e0 47 00 3b 	cp.w	r7,59
80002280:	5f a8       	srle	r8
80002282:	f3 e8 00 08 	and	r8,r9,r8
80002286:	e0 08 18 00 	cp.b	r8,r0
8000228a:	c1 f0       	breq	800022c8 <main+0x1dc>
			{
				// Channel, Identifier (max 0x1fffffff (29 bits)), Message, Number of bytes, R //or 0 (Remote frame or no remote frame).
				CANSendMsg( 0, ourID, msg, 5, 0 );
8000228c:	08 98       	mov	r8,r4
8000228e:	30 59       	mov	r9,5
80002290:	0a 9a       	mov	r10,r5
80002292:	4e 0c       	lddpc	r12,80002410 <main+0x324>
80002294:	78 0b       	ld.w	r11,r12[0x0]
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 5f 	mcall	80002414 <main+0x328>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000229c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022a0:	e0 7b d4 c0 	mov	r11,120000
800022a4:	f0 0b 00 0a 	add	r10,r8,r11
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022a8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022ac:	14 38       	cp.w	r8,r10
800022ae:	e0 88 00 08 	brls	800022be <main+0x1d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022b2:	12 38       	cp.w	r8,r9
800022b4:	fe 98 ff fa 	brls	800022a8 <main+0x1bc>
800022b8:	12 3a       	cp.w	r10,r9
800022ba:	c0 73       	brcs	800022c8 <main+0x1dc>
800022bc:	cf 6b       	rjmp	800022a8 <main+0x1bc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022be:	12 38       	cp.w	r8,r9
800022c0:	e0 8b 00 04 	brhi	800022c8 <main+0x1dc>
800022c4:	12 3a       	cp.w	r10,r9
800022c6:	cf 12       	brcc	800022a8 <main+0x1bc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022c8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022cc:	e0 79 d4 c0 	mov	r9,120000
800022d0:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022d4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022d8:	14 38       	cp.w	r8,r10
800022da:	e0 88 00 08 	brls	800022ea <main+0x1fe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022de:	12 38       	cp.w	r8,r9
800022e0:	fe 98 ff fa 	brls	800022d4 <main+0x1e8>
800022e4:	12 3a       	cp.w	r10,r9
800022e6:	c5 a3       	brcs	8000239a <main+0x2ae>
800022e8:	cf 6b       	rjmp	800022d4 <main+0x1e8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022ea:	12 38       	cp.w	r8,r9
800022ec:	e0 8b 00 57 	brhi	8000239a <main+0x2ae>
800022f0:	12 3a       	cp.w	r10,r9
800022f2:	c5 43       	brcs	8000239a <main+0x2ae>
800022f4:	cf 0b       	rjmp	800022d4 <main+0x1e8>
			delay_ms(10);
			timeCounter++;
			}
			
			//Compute the mean of the temp and light (include our own value)
			for (i=0; i<counter; i++){
800022f6:	58 06       	cp.w	r6,0
800022f8:	e0 89 00 05 	brgt	80002302 <main+0x216>
800022fc:	30 09       	mov	r9,0
800022fe:	08 9a       	mov	r10,r4
80002300:	c1 08       	rjmp	80002320 <main+0x234>
80002302:	fa c8 ff ec 	sub	r8,sp,-20
UINT32 ourID = 0x01205;

void displaySensors(int, int, int,int,int);
void displayReceiveMsg();

int main(void) {
80002306:	ec 0c 15 04 	lsl	r12,r6,0x4
8000230a:	f0 0c 00 0c 	add	r12,r8,r12
8000230e:	30 09       	mov	r9,0
80002310:	08 9a       	mov	r10,r4
			timeCounter++;
			}
			
			//Compute the mean of the temp and light (include our own value)
			for (i=0; i<counter; i++){
				temp_avg = temp_avg + ValueSummer[i][1]; 
80002312:	70 0b       	ld.w	r11,r8[0x0]
80002314:	16 0a       	add	r10,r11
				light_avg = light_avg + ValueSummer[i][2]; 
80002316:	70 1b       	ld.w	r11,r8[0x4]
80002318:	16 09       	add	r9,r11
8000231a:	2f 08       	sub	r8,-16
			delay_ms(10);
			timeCounter++;
			}
			
			//Compute the mean of the temp and light (include our own value)
			for (i=0; i<counter; i++){
8000231c:	18 38       	cp.w	r8,r12
8000231e:	cf a1       	brne	80002312 <main+0x226>
				temp_avg = temp_avg + ValueSummer[i][1]; 
				light_avg = light_avg + ValueSummer[i][2]; 
				pot_avg = pot_avg + ValueSummer[i][3]; 
			}
			temp_avg=(temp_avg+adc_value_temp)/(counter+1);
80002320:	40 18       	lddsp	r8,sp[0x4]
80002322:	f4 08 00 0c 	add	r12,r10,r8
80002326:	ec c8 ff ff 	sub	r8,r6,-1
			light_avg=(light_avg+adc_value_light)/(counter+1);
8000232a:	40 0b       	lddsp	r11,sp[0x0]
8000232c:	16 09       	add	r9,r11
			pot_avg=(pot_avg+adc_value_pot)/(counter+1);
			
			//Print everything	
			displaySensors(counter,adc_value_temp, temp_avg,adc_value_light,light_avg);//Display and convert the sensors values
8000232e:	f2 08 0c 0a 	divs	r10,r9,r8
80002332:	fa eb 00 08 	st.d	sp[8],r10
80002336:	f8 08 0c 0a 	divs	r10,r12,r8
8000233a:	40 38       	lddsp	r8,sp[0xc]
8000233c:	40 09       	lddsp	r9,sp[0x0]
8000233e:	40 1b       	lddsp	r11,sp[0x4]
80002340:	0c 9c       	mov	r12,r6
80002342:	f0 1f 00 36 	mcall	80002418 <main+0x32c>
80002346:	c2 db       	rjmp	800021a0 <main+0xb4>
							}
						}
						
						if (flag==FALSE)
						{
								IDSummer[counter] = Ident; //Identity
80002348:	ec 08 15 02 	lsl	r8,r6,0x2
8000234c:	fa c9 fe 48 	sub	r9,sp,-440
80002350:	10 09       	add	r9,r8
80002352:	62 0a       	ld.w	r10,r1[0x0]
80002354:	f3 4a ff 98 	st.w	r9[-104],r10
								ValueSummer[counter][1] = (msg[0] << 8) | msg[1]; //Temperature
80002358:	fa ca fe 48 	sub	r10,sp,-440
8000235c:	f4 08 00 28 	add	r8,r10,r8<<0x2
80002360:	0b 8a       	ld.ub	r10,r5[0x0]
80002362:	0b 99       	ld.ub	r9,r5[0x1]
80002364:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002368:	f1 49 fe 5c 	st.w	r8[-420],r9
								ValueSummer[counter][2] = (msg[2] << 8) | msg[3]; //Light
8000236c:	ec 08 15 04 	lsl	r8,r6,0x4
80002370:	fa c9 fe 48 	sub	r9,sp,-440
80002374:	f2 08 00 08 	add	r8,r9,r8
80002378:	0b aa       	ld.ub	r10,r5[0x2]
8000237a:	0b b9       	ld.ub	r9,r5[0x3]
8000237c:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002380:	f1 49 fe 60 	st.w	r8[-416],r9
								ValueSummer[counter][3] = msg[4];
80002384:	ec 08 15 04 	lsl	r8,r6,0x4
80002388:	fa cc fe 48 	sub	r12,sp,-440
8000238c:	f8 08 00 08 	add	r8,r12,r8
80002390:	0b c9       	ld.ub	r9,r5[0x4]
80002392:	f1 49 fe 64 	st.w	r8[-412],r9
								counter++;	
80002396:	2f f6       	sub	r6,-1
80002398:	c6 bb       	rjmp	8000226e <main+0x182>
				CANSendMsg( 0, ourID, msg, 5, 0 );
				delay_ms(10);
			}	
				
			delay_ms(10);
			timeCounter++;
8000239a:	2f f7       	sub	r7,-1
		int i = 0;
		int timeCounter=0;
		bool flag = FALSE;
		//Read any message available
		if(CANRxReady(0)){
			while(timeCounter < 120)
8000239c:	e0 47 00 78 	cp.w	r7,120
800023a0:	fe 91 ff 3d 	brne	8000221a <main+0x12e>
800023a4:	ca 9b       	rjmp	800022f6 <main+0x20a>
800023a6:	00 00       	add	r0,r0
800023a8:	80 00       	ld.sh	r0,r0[0x0]
800023aa:	36 d0       	mov	r0,109
800023ac:	80 00       	ld.sh	r0,r0[0x0]
800023ae:	92 00       	ld.sh	r0,r9[0x0]
800023b0:	80 00       	ld.sh	r0,r0[0x0]
800023b2:	32 58       	mov	r8,37
800023b4:	80 00       	ld.sh	r0,r0[0x0]
800023b6:	20 08       	sub	r8,0
800023b8:	80 00       	ld.sh	r0,r0[0x0]
800023ba:	20 20       	sub	r0,2
800023bc:	80 00       	ld.sh	r0,r0[0x0]
800023be:	33 dc       	mov	r12,61
800023c0:	80 00       	ld.sh	r0,r0[0x0]
800023c2:	24 bc       	sub	r12,75
800023c4:	80 00       	ld.sh	r0,r0[0x0]
800023c6:	32 c4       	mov	r4,44
800023c8:	80 00       	ld.sh	r0,r0[0x0]
800023ca:	24 30       	sub	r0,67
800023cc:	80 00       	ld.sh	r0,r0[0x0]
800023ce:	2f dc       	sub	r12,-3
800023d0:	80 00       	ld.sh	r0,r0[0x0]
800023d2:	2f 80       	sub	r0,-8
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	29 b8       	sub	r8,-101
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	2e f4       	sub	r4,-17
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	92 68       	ld.sh	r8,r9[0xc]
800023e0:	80 00       	ld.sh	r0,r0[0x0]
800023e2:	2e 5c       	sub	r12,-27
800023e4:	80 00       	ld.sh	r0,r0[0x0]
800023e6:	2f 50       	sub	r0,-11
800023e8:	00 00       	add	r0,r0
800023ea:	06 60       	and	r0,r3
800023ec:	00 00       	add	r0,r0
800023ee:	06 6c       	and	r12,r3
800023f0:	00 00       	add	r0,r0
800023f2:	06 68       	and	r8,r3
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	24 1c       	sub	r12,65
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	20 1a       	sub	r10,1
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	20 3c       	sub	r12,3
80002400:	80 00       	ld.sh	r0,r0[0x0]
80002402:	38 1a       	mov	r10,-127
80002404:	80 00       	ld.sh	r0,r0[0x0]
80002406:	25 a0       	sub	r0,90
80002408:	80 00       	ld.sh	r0,r0[0x0]
8000240a:	2b 48       	sub	r8,-76
8000240c:	80 00       	ld.sh	r0,r0[0x0]
8000240e:	25 b4       	sub	r4,91
80002410:	00 00       	add	r0,r0
80002412:	00 08       	add	r8,r0
80002414:	80 00       	ld.sh	r0,r0[0x0]
80002416:	2a 10       	sub	r0,-95
80002418:	80 00       	ld.sh	r0,r0[0x0]
8000241a:	20 64       	sub	r4,6

8000241c <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
8000241c:	30 08       	mov	r8,0
8000241e:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002420:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
80002422:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002424:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002426:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002428:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
8000242a:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
8000242c:	b8 f8       	st.b	r12[0x7],r8
}
8000242e:	5e fc       	retal	r12

80002430 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002430:	eb cd 40 80 	pushm	r7,lr
80002434:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002436:	49 68       	lddpc	r8,8000248c <config_dpi204+0x5c>
80002438:	1a 97       	mov	r7,sp
8000243a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000243e:	fa eb 00 00 	st.d	sp[0],r10
80002442:	f0 e8 00 08 	ld.d	r8,r8[8]
80002446:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000244a:	30 4b       	mov	r11,4
8000244c:	49 1c       	lddpc	r12,80002490 <config_dpi204+0x60>
8000244e:	f0 1f 00 12 	mcall	80002494 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
80002452:	1a 9b       	mov	r11,sp
80002454:	fe 7c 28 00 	mov	r12,-55296
80002458:	f0 1f 00 10 	mcall	80002498 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
8000245c:	30 09       	mov	r9,0
8000245e:	12 9a       	mov	r10,r9
80002460:	12 9b       	mov	r11,r9
80002462:	fe 7c 28 00 	mov	r12,-55296
80002466:	f0 1f 00 0e 	mcall	8000249c <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
8000246a:	fe 7c 28 00 	mov	r12,-55296
8000246e:	f0 1f 00 0d 	mcall	800024a0 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
80002472:	e0 6a 1b 00 	mov	r10,6912
80002476:	ea 1a 00 b7 	orh	r10,0xb7
8000247a:	1a 9b       	mov	r11,sp
8000247c:	fe 7c 28 00 	mov	r12,-55296
80002480:	f0 1f 00 09 	mcall	800024a4 <config_dpi204+0x74>
}
80002484:	2f cd       	sub	sp,-16
80002486:	e3 cd 80 80 	ldm	sp++,r7,pc
8000248a:	00 00       	add	r0,r0
8000248c:	80 00       	ld.sh	r0,r0[0x0]
8000248e:	92 a0       	ld.uh	r0,r9[0x4]
80002490:	80 00       	ld.sh	r0,r0[0x0]
80002492:	92 b0       	ld.uh	r0,r9[0x6]
80002494:	80 00       	ld.sh	r0,r0[0x0]
80002496:	32 58       	mov	r8,37
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	34 b6       	mov	r6,75
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	34 ee       	mov	lr,78
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	36 44       	mov	r4,100
800024a4:	80 00       	ld.sh	r0,r0[0x0]
800024a6:	35 8c       	mov	r12,88

800024a8 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
800024a8:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
800024aa:	18 9b       	mov	r11,r12
800024ac:	fe 7c 24 00 	mov	r12,-56320
800024b0:	f0 1f 00 02 	mcall	800024b8 <mASSERT_CS+0x10>
}
800024b4:	d8 02       	popm	pc
800024b6:	00 00       	add	r0,r0
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	35 1a       	mov	r10,81

800024bc <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
800024bc:	eb cd 40 80 	pushm	r7,lr
800024c0:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
800024c2:	49 88       	lddpc	r8,80002520 <config_SPI_SPARE+0x64>
800024c4:	1a 97       	mov	r7,sp
800024c6:	f0 ea 00 00 	ld.d	r10,r8[0]
800024ca:	fa eb 00 00 	st.d	sp[0],r10
800024ce:	f0 e8 00 08 	ld.d	r8,r8[8]
800024d2:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
800024d6:	30 4b       	mov	r11,4
800024d8:	49 3c       	lddpc	r12,80002524 <config_SPI_SPARE+0x68>
800024da:	f0 1f 00 14 	mcall	80002528 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
800024de:	1a 9b       	mov	r11,sp
800024e0:	fe 7c 24 00 	mov	r12,-56320
800024e4:	f0 1f 00 12 	mcall	8000252c <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
800024e8:	30 09       	mov	r9,0
800024ea:	12 9a       	mov	r10,r9
800024ec:	12 9b       	mov	r11,r9
800024ee:	fe 7c 24 00 	mov	r12,-56320
800024f2:	f0 1f 00 10 	mcall	80002530 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
800024f6:	30 0b       	mov	r11,0
800024f8:	fe 7c 24 00 	mov	r12,-56320
800024fc:	f0 1f 00 0e 	mcall	80002534 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002500:	e0 6a 1b 00 	mov	r10,6912
80002504:	ea 1a 00 b7 	orh	r10,0xb7
80002508:	1a 9b       	mov	r11,sp
8000250a:	fe 7c 24 00 	mov	r12,-56320
8000250e:	f0 1f 00 0b 	mcall	80002538 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
80002512:	fe 7c 24 00 	mov	r12,-56320
80002516:	f0 1f 00 0a 	mcall	8000253c <config_SPI_SPARE+0x80>
}
8000251a:	2f cd       	sub	sp,-16
8000251c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002520:	80 00       	ld.sh	r0,r0[0x0]
80002522:	92 90       	ld.uh	r0,r9[0x2]
80002524:	80 00       	ld.sh	r0,r0[0x0]
80002526:	92 70       	ld.sh	r0,r9[0xe]
80002528:	80 00       	ld.sh	r0,r0[0x0]
8000252a:	32 58       	mov	r8,37
8000252c:	80 00       	ld.sh	r0,r0[0x0]
8000252e:	34 b6       	mov	r6,75
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	34 ee       	mov	lr,78
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	35 1a       	mov	r10,81
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	35 8c       	mov	r12,88
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	36 44       	mov	r4,100

80002540 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002540:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
80002542:	fe 7c 24 00 	mov	r12,-56320
80002546:	f0 1f 00 02 	mcall	8000254c <XferSPI_send+0xc>
	return 0;
}
8000254a:	d8 0a       	popm	pc,r12=0
8000254c:	80 00       	ld.sh	r0,r0[0x0]
8000254e:	36 4a       	mov	r10,100

80002550 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
80002550:	d4 01       	pushm	lr
80002552:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
80002554:	30 0b       	mov	r11,0
80002556:	fe 7c 24 00 	mov	r12,-56320
8000255a:	f0 1f 00 0e 	mcall	80002590 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
8000255e:	e0 6b 00 a0 	mov	r11,160
80002562:	fe 7c 24 00 	mov	r12,-56320
80002566:	f0 1f 00 0c 	mcall	80002594 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
8000256a:	30 0b       	mov	r11,0
8000256c:	fe 7c 24 00 	mov	r12,-56320
80002570:	f0 1f 00 09 	mcall	80002594 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
80002574:	fa cb ff fe 	sub	r11,sp,-2
80002578:	fe 7c 24 00 	mov	r12,-56320
8000257c:	f0 1f 00 07 	mcall	80002598 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
80002580:	30 0b       	mov	r11,0
80002582:	fe 7c 24 00 	mov	r12,-56320
80002586:	f0 1f 00 06 	mcall	8000259c <ReadStatus2515+0x4c>

	return spidataread_temp;
}
8000258a:	1b bc       	ld.ub	r12,sp[0x3]
8000258c:	2f fd       	sub	sp,-4
8000258e:	d8 02       	popm	pc
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	35 1a       	mov	r10,81
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	36 4a       	mov	r10,100
80002598:	80 00       	ld.sh	r0,r0[0x0]
8000259a:	36 6e       	mov	lr,102
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	35 66       	mov	r6,86

800025a0 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
800025a0:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
800025a2:	f0 1f 00 04 	mcall	800025b0 <CANRxReady+0x10>
800025a6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
800025aa:	5f 1c       	srne	r12
800025ac:	d8 02       	popm	pc
800025ae:	00 00       	add	r0,r0
800025b0:	80 00       	ld.sh	r0,r0[0x0]
800025b2:	25 50       	sub	r0,85

800025b4 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
800025b4:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
800025b6:	f0 1f 00 04 	mcall	800025c4 <CANTxReady+0x10>
800025ba:	ec 1c 00 04 	eorl	r12,0x4
}
800025be:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
800025c2:	d8 02       	popm	pc
800025c4:	80 00       	ld.sh	r0,r0[0x0]
800025c6:	25 50       	sub	r0,85

800025c8 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
800025c8:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
800025ca:	18 9b       	mov	r11,r12
800025cc:	fe 7c 24 00 	mov	r12,-56320
800025d0:	f0 1f 00 02 	mcall	800025d8 <mDEASSERT_CS+0x10>
}
800025d4:	d8 02       	popm	pc
800025d6:	00 00       	add	r0,r0
800025d8:	80 00       	ld.sh	r0,r0[0x0]
800025da:	35 66       	mov	r6,86

800025dc <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
800025dc:	d4 21       	pushm	r4-r7,lr
800025de:	18 97       	mov	r7,r12
800025e0:	16 95       	mov	r5,r11
800025e2:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
800025e4:	18 96       	mov	r6,r12
800025e6:	5c 56       	castu.b	r6
800025e8:	0c 9c       	mov	r12,r6
800025ea:	f0 1f 00 0a 	mcall	80002610 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
800025ee:	30 2b       	mov	r11,2
800025f0:	0e 9c       	mov	r12,r7
800025f2:	f0 1f 00 09 	mcall	80002614 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
800025f6:	0a 9b       	mov	r11,r5
800025f8:	0e 9c       	mov	r12,r7
800025fa:	f0 1f 00 07 	mcall	80002614 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
800025fe:	08 9b       	mov	r11,r4
80002600:	0e 9c       	mov	r12,r7
80002602:	f0 1f 00 05 	mcall	80002614 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
80002606:	0c 9c       	mov	r12,r6
80002608:	f0 1f 00 04 	mcall	80002618 <CAN2515ByteWrite+0x3c>
}
8000260c:	d8 22       	popm	r4-r7,pc
8000260e:	00 00       	add	r0,r0
80002610:	80 00       	ld.sh	r0,r0[0x0]
80002612:	24 a8       	sub	r8,74
80002614:	80 00       	ld.sh	r0,r0[0x0]
80002616:	25 40       	sub	r0,84
80002618:	80 00       	ld.sh	r0,r0[0x0]
8000261a:	25 c8       	sub	r8,92

8000261c <CAN2515SetRXB1FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB1FiltersEx(int Channel, UINT32 Mask1, UINT32* pFlt2_5)
{ 
8000261c:	eb cd 40 e0 	pushm	r5-r7,lr
80002620:	18 97       	mov	r7,r12
80002622:	16 96       	mov	r6,r11
80002624:	14 95       	mov	r5,r10
	    //Set the mask associated with RXB1
	    CAN2515ByteWrite(Channel, RXM1EID0, Mask1);
80002626:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
8000262a:	32 7b       	mov	r11,39
8000262c:	f0 1f 00 50 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1EID8, Mask1 >> 8);
80002630:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002634:	32 6b       	mov	r11,38
80002636:	0e 9c       	mov	r12,r7
80002638:	f0 1f 00 4d 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDL, ((Mask1 >> 13) & 0b11100000) | ((Mask1 >> 16) & 0b00000011));
8000263c:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
80002640:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002644:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002648:	10 4a       	or	r10,r8
8000264a:	32 5b       	mov	r11,37
8000264c:	0e 9c       	mov	r12,r7
8000264e:	f0 1f 00 48 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 21);
80002652:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
80002656:	32 4b       	mov	r11,36
80002658:	0e 9c       	mov	r12,r7
8000265a:	f0 1f 00 45 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    
	    //Set the 4 filters associated with RXB1
	    CAN2515ByteWrite(Channel, RXF2EID0, *pFlt2_5);
8000265e:	0b ba       	ld.ub	r10,r5[0x3]
80002660:	30 bb       	mov	r11,11
80002662:	0e 9c       	mov	r12,r7
80002664:	f0 1f 00 42 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2EID8, *pFlt2_5 >> 8);
80002668:	0b aa       	ld.ub	r10,r5[0x2]
8000266a:	30 ab       	mov	r11,10
8000266c:	0e 9c       	mov	r12,r7
8000266e:	f0 1f 00 40 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002672:	6a 08       	ld.w	r8,r5[0x0]
80002674:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002678:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000267c:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002680:	f1 ea 10 0a 	or	r10,r8,r10
80002684:	a3 ba       	sbr	r10,0x3
80002686:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000268a:	30 9b       	mov	r11,9
8000268c:	0e 9c       	mov	r12,r7
8000268e:	f0 1f 00 38 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 21);
80002692:	0b 0a       	ld.w	r10,r5++
80002694:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
80002698:	30 8b       	mov	r11,8
8000269a:	0e 9c       	mov	r12,r7
8000269c:	f0 1f 00 34 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF3EID0, *pFlt2_5);
800026a0:	0b ba       	ld.ub	r10,r5[0x3]
800026a2:	31 3b       	mov	r11,19
800026a4:	0e 9c       	mov	r12,r7
800026a6:	f0 1f 00 32 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3EID8, *pFlt2_5 >> 8);
800026aa:	0b aa       	ld.ub	r10,r5[0x2]
800026ac:	31 2b       	mov	r11,18
800026ae:	0e 9c       	mov	r12,r7
800026b0:	f0 1f 00 2f 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800026b4:	6a 08       	ld.w	r8,r5[0x0]
800026b6:	f0 0a 16 0d 	lsr	r10,r8,0xd
800026ba:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800026be:	e2 1a 00 e0 	andl	r10,0xe0,COH
800026c2:	f1 ea 10 0a 	or	r10,r8,r10
800026c6:	a3 ba       	sbr	r10,0x3
800026c8:	e2 1a 00 eb 	andl	r10,0xeb,COH
800026cc:	31 1b       	mov	r11,17
800026ce:	0e 9c       	mov	r12,r7
800026d0:	f0 1f 00 27 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 21);
800026d4:	0b 0a       	ld.w	r10,r5++
800026d6:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800026da:	31 0b       	mov	r11,16
800026dc:	0e 9c       	mov	r12,r7
800026de:	f0 1f 00 24 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF4EID0, *pFlt2_5);
800026e2:	0b ba       	ld.ub	r10,r5[0x3]
800026e4:	31 7b       	mov	r11,23
800026e6:	0e 9c       	mov	r12,r7
800026e8:	f0 1f 00 21 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4EID8, *pFlt2_5 >> 8);
800026ec:	0b aa       	ld.ub	r10,r5[0x2]
800026ee:	31 6b       	mov	r11,22
800026f0:	0e 9c       	mov	r12,r7
800026f2:	f0 1f 00 1f 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800026f6:	6a 08       	ld.w	r8,r5[0x0]
800026f8:	f0 0a 16 0d 	lsr	r10,r8,0xd
800026fc:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002700:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002704:	f1 ea 10 0a 	or	r10,r8,r10
80002708:	a3 ba       	sbr	r10,0x3
8000270a:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000270e:	31 5b       	mov	r11,21
80002710:	0e 9c       	mov	r12,r7
80002712:	f0 1f 00 17 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 21);
80002716:	0b 0a       	ld.w	r10,r5++
80002718:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000271c:	31 4b       	mov	r11,20
8000271e:	0e 9c       	mov	r12,r7
80002720:	f0 1f 00 13 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF5EID0, *pFlt2_5);
80002724:	0b ba       	ld.ub	r10,r5[0x3]
80002726:	31 bb       	mov	r11,27
80002728:	0e 9c       	mov	r12,r7
8000272a:	f0 1f 00 11 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5EID8, *pFlt2_5 >> 8);
8000272e:	0b aa       	ld.ub	r10,r5[0x2]
80002730:	31 ab       	mov	r11,26
80002732:	0e 9c       	mov	r12,r7
80002734:	f0 1f 00 0e 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002738:	6a 08       	ld.w	r8,r5[0x0]
8000273a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000273e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002742:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002746:	f1 ea 10 0a 	or	r10,r8,r10
8000274a:	a3 ba       	sbr	r10,0x3
8000274c:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002750:	31 9b       	mov	r11,25
80002752:	0e 9c       	mov	r12,r7
80002754:	f0 1f 00 06 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 21);
80002758:	6a 0a       	ld.w	r10,r5[0x0]
8000275a:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000275e:	31 8b       	mov	r11,24
80002760:	0e 9c       	mov	r12,r7
80002762:	f0 1f 00 03 	mcall	8000276c <CAN2515SetRXB1FiltersEx+0x150>
}
80002766:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000276a:	00 00       	add	r0,r0
8000276c:	80 00       	ld.sh	r0,r0[0x0]
8000276e:	25 dc       	sub	r12,93

80002770 <CAN2515SetRXB0FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0FiltersEx(int Channel, UINT32 Mask0, UINT32* pFlt0_1)
{	
80002770:	eb cd 40 e0 	pushm	r5-r7,lr
80002774:	18 97       	mov	r7,r12
80002776:	16 96       	mov	r6,r11
80002778:	14 95       	mov	r5,r10
	//Set the mask associated with RXB0
	CAN2515ByteWrite(Channel, RXM0EID0, Mask0);
8000277a:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
8000277e:	32 3b       	mov	r11,35
80002780:	f0 1f 00 2f 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0EID8, Mask0 >> 8);
80002784:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002788:	32 2b       	mov	r11,34
8000278a:	0e 9c       	mov	r12,r7
8000278c:	f0 1f 00 2c 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDL, ((Mask0 >> 13) & 0b11100000) | ((Mask0 >> 16) & 0b00000011));
80002790:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
80002794:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002798:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000279c:	10 4a       	or	r10,r8
8000279e:	32 1b       	mov	r11,33
800027a0:	0e 9c       	mov	r12,r7
800027a2:	f0 1f 00 27 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 21);
800027a6:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800027aa:	32 0b       	mov	r11,32
800027ac:	0e 9c       	mov	r12,r7
800027ae:	f0 1f 00 24 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	//Set the two filters associated with RXB0
	CAN2515ByteWrite(Channel, RXF0EID0, *pFlt0_1);
800027b2:	0b ba       	ld.ub	r10,r5[0x3]
800027b4:	30 3b       	mov	r11,3
800027b6:	0e 9c       	mov	r12,r7
800027b8:	f0 1f 00 21 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0EID8, *pFlt0_1 >> 8);
800027bc:	0b aa       	ld.ub	r10,r5[0x2]
800027be:	30 2b       	mov	r11,2
800027c0:	0e 9c       	mov	r12,r7
800027c2:	f0 1f 00 1f 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
800027c6:	6a 08       	ld.w	r8,r5[0x0]
800027c8:	f0 0a 16 0d 	lsr	r10,r8,0xd
800027cc:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800027d0:	e2 1a 00 e0 	andl	r10,0xe0,COH
800027d4:	f1 ea 10 0a 	or	r10,r8,r10
800027d8:	a3 ba       	sbr	r10,0x3
800027da:	e2 1a 00 eb 	andl	r10,0xeb,COH
800027de:	30 1b       	mov	r11,1
800027e0:	0e 9c       	mov	r12,r7
800027e2:	f0 1f 00 17 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 21);
800027e6:	0b 0a       	ld.w	r10,r5++
800027e8:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800027ec:	30 0b       	mov	r11,0
800027ee:	0e 9c       	mov	r12,r7
800027f0:	f0 1f 00 13 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1EID0, *pFlt0_1);
800027f4:	0b ba       	ld.ub	r10,r5[0x3]
800027f6:	30 7b       	mov	r11,7
800027f8:	0e 9c       	mov	r12,r7
800027fa:	f0 1f 00 11 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1EID8, *pFlt0_1 >> 8);
800027fe:	0b aa       	ld.ub	r10,r5[0x2]
80002800:	30 6b       	mov	r11,6
80002802:	0e 9c       	mov	r12,r7
80002804:	f0 1f 00 0e 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
80002808:	6a 08       	ld.w	r8,r5[0x0]
8000280a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000280e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002812:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002816:	f1 ea 10 0a 	or	r10,r8,r10
8000281a:	a3 ba       	sbr	r10,0x3
8000281c:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002820:	30 5b       	mov	r11,5
80002822:	0e 9c       	mov	r12,r7
80002824:	f0 1f 00 06 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 21);
80002828:	6a 0a       	ld.w	r10,r5[0x0]
8000282a:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000282e:	30 4b       	mov	r11,4
80002830:	0e 9c       	mov	r12,r7
80002832:	f0 1f 00 03 	mcall	8000283c <CAN2515SetRXB0FiltersEx+0xcc>
}
80002836:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000283a:	00 00       	add	r0,r0
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	25 dc       	sub	r12,93

80002840 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002840:	eb cd 40 c0 	pushm	r6-r7,lr
80002844:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
80002846:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
8000284a:	0e 9c       	mov	r12,r7
8000284c:	f0 1f 00 06 	mcall	80002864 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
80002850:	e0 6b 00 c0 	mov	r11,192
80002854:	0c 9c       	mov	r12,r6
80002856:	f0 1f 00 05 	mcall	80002868 <CANReset+0x28>
	mDEASSERT_CS(Channel);
8000285a:	0e 9c       	mov	r12,r7
8000285c:	f0 1f 00 04 	mcall	8000286c <CANReset+0x2c>
}
80002860:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	24 a8       	sub	r8,74
80002868:	80 00       	ld.sh	r0,r0[0x0]
8000286a:	25 40       	sub	r0,84
8000286c:	80 00       	ld.sh	r0,r0[0x0]
8000286e:	25 c8       	sub	r8,92

80002870 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
80002870:	eb cd 40 e0 	pushm	r5-r7,lr
80002874:	20 1d       	sub	sp,4
80002876:	18 97       	mov	r7,r12
80002878:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
8000287a:	18 96       	mov	r6,r12
8000287c:	5c 56       	castu.b	r6
8000287e:	0c 9c       	mov	r12,r6
80002880:	f0 1f 00 13 	mcall	800028cc <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
80002884:	30 3b       	mov	r11,3
80002886:	0e 9c       	mov	r12,r7
80002888:	f0 1f 00 12 	mcall	800028d0 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
8000288c:	0a 9b       	mov	r11,r5
8000288e:	0e 9c       	mov	r12,r7
80002890:	f0 1f 00 10 	mcall	800028d0 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
80002894:	30 0b       	mov	r11,0
80002896:	fe 7c 24 00 	mov	r12,-56320
8000289a:	f0 1f 00 0f 	mcall	800028d4 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
8000289e:	fe 77 24 00 	mov	r7,-56320
800028a2:	c0 28       	rjmp	800028a6 <CAN2515ByteRead+0x36>
		asm("NOP;");
800028a4:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800028a6:	0e 9c       	mov	r12,r7
800028a8:	f0 1f 00 0c 	mcall	800028d8 <CAN2515ByteRead+0x68>
800028ac:	cf c0       	breq	800028a4 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800028ae:	fa cb ff fe 	sub	r11,sp,-2
800028b2:	fe 7c 24 00 	mov	r12,-56320
800028b6:	f0 1f 00 0a 	mcall	800028dc <CAN2515ByteRead+0x6c>
	return spidataread_temp;
800028ba:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
800028bc:	0c 9c       	mov	r12,r6
800028be:	f0 1f 00 09 	mcall	800028e0 <CAN2515ByteRead+0x70>

	return tempdata;
}
800028c2:	0e 9c       	mov	r12,r7
800028c4:	2f fd       	sub	sp,-4
800028c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800028ca:	00 00       	add	r0,r0
800028cc:	80 00       	ld.sh	r0,r0[0x0]
800028ce:	24 a8       	sub	r8,74
800028d0:	80 00       	ld.sh	r0,r0[0x0]
800028d2:	25 40       	sub	r0,84
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	36 4a       	mov	r10,100
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	36 66       	mov	r6,102
800028dc:	80 00       	ld.sh	r0,r0[0x0]
800028de:	36 6e       	mov	lr,102
800028e0:	80 00       	ld.sh	r0,r0[0x0]
800028e2:	25 c8       	sub	r8,92

800028e4 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
800028e4:	eb cd 40 80 	pushm	r7,lr
800028e8:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
800028ea:	58 ab       	cp.w	r11,10
800028ec:	c1 11       	brne	8000290e <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
800028ee:	30 3a       	mov	r10,3
800028f0:	32 ab       	mov	r11,42
800028f2:	f0 1f 00 30 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
800028f6:	e0 6a 00 ac 	mov	r10,172
800028fa:	32 9b       	mov	r11,41
800028fc:	0e 9c       	mov	r12,r7
800028fe:	f0 1f 00 2d 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002902:	30 7a       	mov	r10,7
80002904:	32 8b       	mov	r11,40
80002906:	0e 9c       	mov	r12,r7
80002908:	f0 1f 00 2a 	mcall	800029b0 <CANEnable+0xcc>
8000290c:	c3 68       	rjmp	80002978 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
8000290e:	58 7b       	cp.w	r11,7
80002910:	c1 11       	brne	80002932 <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
80002912:	30 1a       	mov	r10,1
80002914:	32 ab       	mov	r11,42
80002916:	f0 1f 00 27 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000291a:	e0 6a 00 ac 	mov	r10,172
8000291e:	32 9b       	mov	r11,41
80002920:	0e 9c       	mov	r12,r7
80002922:	f0 1f 00 24 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002926:	30 7a       	mov	r10,7
80002928:	32 8b       	mov	r11,40
8000292a:	0e 9c       	mov	r12,r7
8000292c:	f0 1f 00 21 	mcall	800029b0 <CANEnable+0xcc>
80002930:	c2 48       	rjmp	80002978 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
80002932:	58 5b       	cp.w	r11,5
80002934:	c1 11       	brne	80002956 <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002936:	30 0a       	mov	r10,0
80002938:	32 ab       	mov	r11,42
8000293a:	f0 1f 00 1e 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000293e:	e0 6a 00 ac 	mov	r10,172
80002942:	32 9b       	mov	r11,41
80002944:	0e 9c       	mov	r12,r7
80002946:	f0 1f 00 1b 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000294a:	30 7a       	mov	r10,7
8000294c:	32 8b       	mov	r11,40
8000294e:	0e 9c       	mov	r12,r7
80002950:	f0 1f 00 18 	mcall	800029b0 <CANEnable+0xcc>
80002954:	c1 28       	rjmp	80002978 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
80002956:	58 1b       	cp.w	r11,1
80002958:	c1 01       	brne	80002978 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
8000295a:	30 0a       	mov	r10,0
8000295c:	32 ab       	mov	r11,42
8000295e:	f0 1f 00 15 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
80002962:	e0 6a 00 91 	mov	r10,145
80002966:	32 9b       	mov	r11,41
80002968:	0e 9c       	mov	r12,r7
8000296a:	f0 1f 00 12 	mcall	800029b0 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
8000296e:	30 3a       	mov	r10,3
80002970:	32 8b       	mov	r11,40
80002972:	0e 9c       	mov	r12,r7
80002974:	f0 1f 00 0f 	mcall	800029b0 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
80002978:	30 3a       	mov	r10,3
8000297a:	32 bb       	mov	r11,43
8000297c:	0e 9c       	mov	r12,r7
8000297e:	f0 1f 00 0d 	mcall	800029b0 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
80002982:	30 4a       	mov	r10,4
80002984:	30 fb       	mov	r11,15
80002986:	0e 9c       	mov	r12,r7
80002988:	f0 1f 00 0a 	mcall	800029b0 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
8000298c:	30 eb       	mov	r11,14
8000298e:	0e 9c       	mov	r12,r7
80002990:	f0 1f 00 09 	mcall	800029b4 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
80002994:	30 eb       	mov	r11,14
80002996:	0e 9c       	mov	r12,r7
80002998:	f0 1f 00 07 	mcall	800029b4 <CANEnable+0xd0>
8000299c:	e2 1c 00 e0 	andl	r12,0xe0,COH
800029a0:	c0 60       	breq	800029ac <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
800029a2:	30 4a       	mov	r10,4
800029a4:	30 fb       	mov	r11,15
800029a6:	0e 9c       	mov	r12,r7
800029a8:	f0 1f 00 02 	mcall	800029b0 <CANEnable+0xcc>
800029ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	25 dc       	sub	r12,93
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	28 70       	sub	r0,-121

800029b8 <InitializeCANExtended>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps, 0, 0) (no filter)
 ********************************************************************/
void InitializeCANExtended( int Channel , int BusSpeed, UINT32 Mask, UINT32 Flt[6])
{
800029b8:	d4 21       	pushm	r4-r7,lr
800029ba:	18 97       	mov	r7,r12
800029bc:	16 94       	mov	r4,r11
800029be:	14 95       	mov	r5,r10
800029c0:	12 96       	mov	r6,r9
	CANReset(Channel);
800029c2:	f0 1f 00 0f 	mcall	800029fc <InitializeCANExtended+0x44>
	CAN2515ByteWrite(Channel, RXB0CTRL, 0x02<<5); //Receive only extended id messages to buffer 0
800029c6:	34 0a       	mov	r10,64
800029c8:	36 0b       	mov	r11,96
800029ca:	0e 9c       	mov	r12,r7
800029cc:	f0 1f 00 0d 	mcall	80002a00 <InitializeCANExtended+0x48>
	CAN2515ByteWrite(Channel, RXB1CTRL, 0x02<<5); //Receive only extended id messages to buffer 1
800029d0:	34 0a       	mov	r10,64
800029d2:	37 0b       	mov	r11,112
800029d4:	0e 9c       	mov	r12,r7
800029d6:	f0 1f 00 0b 	mcall	80002a00 <InitializeCANExtended+0x48>
	CAN2515SetRXB0FiltersEx(Channel, Mask, Flt);
800029da:	0c 9a       	mov	r10,r6
800029dc:	0a 9b       	mov	r11,r5
800029de:	0e 9c       	mov	r12,r7
800029e0:	f0 1f 00 09 	mcall	80002a04 <InitializeCANExtended+0x4c>
	CAN2515SetRXB1FiltersEx(Channel, Mask, &Flt[2]);
800029e4:	ec ca ff f8 	sub	r10,r6,-8
800029e8:	0a 9b       	mov	r11,r5
800029ea:	0e 9c       	mov	r12,r7
800029ec:	f0 1f 00 07 	mcall	80002a08 <InitializeCANExtended+0x50>
	CANEnable(Channel, BusSpeed);
800029f0:	08 9b       	mov	r11,r4
800029f2:	0e 9c       	mov	r12,r7
800029f4:	f0 1f 00 06 	mcall	80002a0c <InitializeCANExtended+0x54>
}
800029f8:	d8 22       	popm	r4-r7,pc
800029fa:	00 00       	add	r0,r0
800029fc:	80 00       	ld.sh	r0,r0[0x0]
800029fe:	28 40       	sub	r0,-124
80002a00:	80 00       	ld.sh	r0,r0[0x0]
80002a02:	25 dc       	sub	r12,93
80002a04:	80 00       	ld.sh	r0,r0[0x0]
80002a06:	27 70       	sub	r0,119
80002a08:	80 00       	ld.sh	r0,r0[0x0]
80002a0a:	26 1c       	sub	r12,97
80002a0c:	80 00       	ld.sh	r0,r0[0x0]
80002a0e:	28 e4       	sub	r4,-114

80002a10 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80002a10:	eb cd 40 fe 	pushm	r1-r7,lr
80002a14:	18 96       	mov	r6,r12
80002a16:	16 93       	mov	r3,r11
80002a18:	14 94       	mov	r4,r10
80002a1a:	12 92       	mov	r2,r9
80002a1c:	10 91       	mov	r1,r8
80002a1e:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002a20:	33 05       	mov	r5,48
80002a22:	c1 78       	rjmp	80002a50 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a24:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a28:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a2c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a30:	14 38       	cp.w	r8,r10
80002a32:	e0 88 00 08 	brls	80002a42 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a36:	12 38       	cp.w	r8,r9
80002a38:	fe 98 ff fa 	brls	80002a2c <CANSendMsg+0x1c>
80002a3c:	12 3a       	cp.w	r10,r9
80002a3e:	c7 63       	brcs	80002b2a <CANSendMsg+0x11a>
80002a40:	cf 6b       	rjmp	80002a2c <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a42:	12 38       	cp.w	r8,r9
80002a44:	e0 8b 00 73 	brhi	80002b2a <CANSendMsg+0x11a>
80002a48:	12 3a       	cp.w	r10,r9
80002a4a:	c7 03       	brcs	80002b2a <CANSendMsg+0x11a>
80002a4c:	cf 0b       	rjmp	80002a2c <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
80002a4e:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002a50:	0a 9b       	mov	r11,r5
80002a52:	0c 9c       	mov	r12,r6
80002a54:	f0 1f 00 38 	mcall	80002b34 <CANSendMsg+0x124>
80002a58:	e2 1c 00 08 	andl	r12,0x8,COH
80002a5c:	ce 41       	brne	80002a24 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
80002a5e:	e6 08 16 0b 	lsr	r8,r3,0xb
80002a62:	c1 01       	brne	80002a82 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
80002a64:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
80002a68:	33 1b       	mov	r11,49
80002a6a:	0c 9c       	mov	r12,r6
80002a6c:	f0 1f 00 33 	mcall	80002b38 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
80002a70:	e6 0a 15 05 	lsl	r10,r3,0x5
80002a74:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002a78:	33 2b       	mov	r11,50
80002a7a:	0c 9c       	mov	r12,r6
80002a7c:	f0 1f 00 2f 	mcall	80002b38 <CANSendMsg+0x128>
80002a80:	c2 18       	rjmp	80002ac2 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
80002a82:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
80002a86:	33 1b       	mov	r11,49
80002a88:	0c 9c       	mov	r12,r6
80002a8a:	f0 1f 00 2c 	mcall	80002b38 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
80002a8e:	e6 08 16 0d 	lsr	r8,r3,0xd
80002a92:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
80002a96:	e2 18 00 e0 	andl	r8,0xe0,COH
80002a9a:	10 4a       	or	r10,r8
80002a9c:	a3 ba       	sbr	r10,0x3
80002a9e:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002aa2:	33 2b       	mov	r11,50
80002aa4:	0c 9c       	mov	r12,r6
80002aa6:	f0 1f 00 25 	mcall	80002b38 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
80002aaa:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
80002aae:	33 3b       	mov	r11,51
80002ab0:	0c 9c       	mov	r12,r6
80002ab2:	f0 1f 00 22 	mcall	80002b38 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
80002ab6:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
80002aba:	33 4b       	mov	r11,52
80002abc:	0c 9c       	mov	r12,r6
80002abe:	f0 1f 00 1f 	mcall	80002b38 <CANSendMsg+0x128>
80002ac2:	30 85       	mov	r5,8
80002ac4:	ea 02 18 00 	cp.b	r2,r5
80002ac8:	e4 05 17 80 	movls	r5,r2
80002acc:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80002ad0:	e0 41 00 52 	cp.w	r1,82
80002ad4:	c1 01       	brne	80002af4 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
80002ad6:	a7 a5       	sbr	r5,0x6
80002ad8:	5c 55       	castu.b	r5
80002ada:	0a 9a       	mov	r10,r5
80002adc:	33 5b       	mov	r11,53
80002ade:	0c 9c       	mov	r12,r6
80002ae0:	f0 1f 00 16 	mcall	80002b38 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80002ae4:	30 4b       	mov	r11,4
80002ae6:	31 1c       	mov	r12,17
80002ae8:	f0 1f 00 15 	mcall	80002b3c <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
80002aec:	49 5c       	lddpc	r12,80002b40 <CANSendMsg+0x130>
80002aee:	f0 1f 00 16 	mcall	80002b44 <CANSendMsg+0x134>
80002af2:	c0 68       	rjmp	80002afe <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
80002af4:	0a 9a       	mov	r10,r5
80002af6:	33 5b       	mov	r11,53
80002af8:	0c 9c       	mov	r12,r6
80002afa:	f0 1f 00 10 	mcall	80002b38 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002afe:	58 05       	cp.w	r5,0
80002b00:	e0 8a 00 0e 	brle	80002b1c <CANSendMsg+0x10c>
80002b04:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
80002b06:	0e 9b       	mov	r11,r7
80002b08:	2c ab       	sub	r11,-54
80002b0a:	e8 07 07 0a 	ld.ub	r10,r4[r7]
80002b0e:	5c 5b       	castu.b	r11
80002b10:	0c 9c       	mov	r12,r6
80002b12:	f0 1f 00 0a 	mcall	80002b38 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002b16:	2f f7       	sub	r7,-1
80002b18:	0a 37       	cp.w	r7,r5
80002b1a:	cf 65       	brlt	80002b06 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
80002b1c:	30 8a       	mov	r10,8
80002b1e:	33 0b       	mov	r11,48
80002b20:	0c 9c       	mov	r12,r6
80002b22:	f0 1f 00 06 	mcall	80002b38 <CANSendMsg+0x128>
80002b26:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
80002b2a:	e0 47 00 64 	cp.w	r7,100
80002b2e:	c9 01       	brne	80002a4e <CANSendMsg+0x3e>
80002b30:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	28 70       	sub	r0,-121
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	25 dc       	sub	r12,93
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	2e f4       	sub	r4,-17
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	92 e4       	ld.uh	r4,r9[0xc]
80002b44:	80 00       	ld.sh	r0,r0[0x0]
80002b46:	2e 5c       	sub	r12,-27

80002b48 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002b48:	d4 31       	pushm	r0-r7,lr
80002b4a:	18 95       	mov	r5,r12
80002b4c:	16 92       	mov	r2,r11
80002b4e:	14 93       	mov	r3,r10
80002b50:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
80002b52:	f0 1f 00 55 	mcall	80002ca4 <CANGetMsg+0x15c>

        if( (temp & 3) == 0 )
80002b56:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80002b5a:	e0 80 00 a3 	breq	80002ca0 <CANGetMsg+0x158>
            return FALSE;
        temp&=0x03;
        if(temp==1){
80002b5e:	58 1c       	cp.w	r12,1
80002b60:	c0 31       	brne	80002b66 <CANGetMsg+0x1e>
80002b62:	36 16       	mov	r6,97
80002b64:	c0 58       	rjmp	80002b6e <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
80002b66:	58 2c       	cp.w	r12,2
80002b68:	e0 81 00 9c 	brne	80002ca0 <CANGetMsg+0x158>
80002b6c:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
80002b6e:	0c 9b       	mov	r11,r6
80002b70:	0a 9c       	mov	r12,r5
80002b72:	f0 1f 00 4e 	mcall	80002ca8 <CANGetMsg+0x160>
80002b76:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
80002b78:	ec cb ff ff 	sub	r11,r6,-1
80002b7c:	5c 5b       	castu.b	r11
80002b7e:	0a 9c       	mov	r12,r5
80002b80:	f0 1f 00 4a 	mcall	80002ca8 <CANGetMsg+0x160>
80002b84:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
80002b86:	ec cb ff fe 	sub	r11,r6,-2
80002b8a:	5c 5b       	castu.b	r11
80002b8c:	0a 9c       	mov	r12,r5
80002b8e:	f0 1f 00 47 	mcall	80002ca8 <CANGetMsg+0x160>
80002b92:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
80002b94:	ec cb ff fd 	sub	r11,r6,-3
80002b98:	5c 5b       	castu.b	r11
80002b9a:	0a 9c       	mov	r12,r5
80002b9c:	f0 1f 00 43 	mcall	80002ca8 <CANGetMsg+0x160>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
80002ba0:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
80002ba4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80002ba8:	c0 d1       	brne	80002bc2 <CANGetMsg+0x7a>
        {
            *pIdentifier = S1<<3 | S2>>5;
80002baa:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
80002bae:	ef e1 10 31 	or	r1,r7,r1<<0x3
80002bb2:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
80002bb4:	30 1c       	mov	r12,1
80002bb6:	f0 1f 00 3e 	mcall	80002cac <CANGetMsg+0x164>
            LED_Off(LED1);
80002bba:	30 2c       	mov	r12,2
80002bbc:	f0 1f 00 3d 	mcall	80002cb0 <CANGetMsg+0x168>
80002bc0:	c1 48       	rjmp	80002be8 <CANGetMsg+0xa0>
             //dip204_set_cursor_position(1,4);
             //dip204_printf_string("St Id");
        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
80002bc2:	a9 60       	lsl	r0,0x8
80002bc4:	e1 e1 11 51 	or	r1,r0,r1<<0x15
80002bc8:	e3 ec 10 0c 	or	r12,r1,r12
80002bcc:	e2 18 00 1c 	andl	r8,0x1c,COH
80002bd0:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80002bd4:	0e 48       	or	r8,r7
80002bd6:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
80002bda:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
80002bdc:	30 2c       	mov	r12,2
80002bde:	f0 1f 00 34 	mcall	80002cac <CANGetMsg+0x164>
            LED_Off(LED0);
80002be2:	30 1c       	mov	r12,1
80002be4:	f0 1f 00 33 	mcall	80002cb0 <CANGetMsg+0x168>

            //dip204_set_cursor_position(1,4);
            //dip204_printf_string("Ex Id");
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80002be8:	ec cb ff fc 	sub	r11,r6,-4
80002bec:	5c 5b       	castu.b	r11
80002bee:	0a 9c       	mov	r12,r5
80002bf0:	f0 1f 00 2e 	mcall	80002ca8 <CANGetMsg+0x160>
80002bf4:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002bf8:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
80002bfa:	30 88       	mov	r8,8
80002bfc:	f0 0c 18 00 	cp.b	r12,r8
80002c00:	e0 88 00 07 	brls	80002c0e <CANGetMsg+0xc6>
            *pMsgSize = 8;
80002c04:	a8 88       	st.b	r4[0x0],r8
80002c06:	2f b6       	sub	r6,-5
80002c08:	5c 56       	castu.b	r6
80002c0a:	30 07       	mov	r7,0
80002c0c:	c0 58       	rjmp	80002c16 <CANGetMsg+0xce>

        for( temp = 0; temp < *pMsgSize; temp++ ){
80002c0e:	58 0c       	cp.w	r12,0
80002c10:	fe 99 ff fb 	brgt	80002c06 <CANGetMsg+0xbe>
80002c14:	c0 e8       	rjmp	80002c30 <CANGetMsg+0xe8>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
80002c16:	0c 9b       	mov	r11,r6
80002c18:	0a 9c       	mov	r12,r5
80002c1a:	f0 1f 00 24 	mcall	80002ca8 <CANGetMsg+0x160>
80002c1e:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
80002c22:	2f f7       	sub	r7,-1
80002c24:	2f f6       	sub	r6,-1
80002c26:	5c 56       	castu.b	r6
80002c28:	09 88       	ld.ub	r8,r4[0x0]
80002c2a:	0e 38       	cp.w	r8,r7
80002c2c:	fe 99 ff f5 	brgt	80002c16 <CANGetMsg+0xce>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
80002c30:	30 4c       	mov	r12,4
80002c32:	f0 1f 00 20 	mcall	80002cb0 <CANGetMsg+0x168>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80002c36:	36 0b       	mov	r11,96
80002c38:	0a 9c       	mov	r12,r5
80002c3a:	f0 1f 00 1c 	mcall	80002ca8 <CANGetMsg+0x160>
80002c3e:	e2 1c 00 08 	andl	r12,0x8,COH
80002c42:	c0 81       	brne	80002c52 <CANGetMsg+0x10a>
80002c44:	37 0b       	mov	r11,112
80002c46:	0a 9c       	mov	r12,r5
80002c48:	f0 1f 00 18 	mcall	80002ca8 <CANGetMsg+0x160>
80002c4c:	e2 1c 00 08 	andl	r12,0x8,COH
80002c50:	c1 d0       	breq	80002c8a <CANGetMsg+0x142>
80002c52:	64 08       	ld.w	r8,r2[0x0]
80002c54:	58 18       	cp.w	r8,1
80002c56:	c1 a1       	brne	80002c8a <CANGetMsg+0x142>
                    {
                    Msg[0] = 0;
80002c58:	30 08       	mov	r8,0
80002c5a:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
80002c5c:	30 18       	mov	r8,1
80002c5e:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
80002c60:	30 28       	mov	r8,2
80002c62:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002c64:	30 38       	mov	r8,3
80002c66:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
80002c68:	30 08       	mov	r8,0
80002c6a:	30 49       	mov	r9,4
80002c6c:	06 9a       	mov	r10,r3
80002c6e:	64 0b       	ld.w	r11,r2[0x0]
80002c70:	0a 9c       	mov	r12,r5
80002c72:	f0 1f 00 11 	mcall	80002cb4 <CANGetMsg+0x16c>
                    dip204_set_cursor_position(17,4);
80002c76:	30 4b       	mov	r11,4
80002c78:	31 1c       	mov	r12,17
80002c7a:	f0 1f 00 10 	mcall	80002cb8 <CANGetMsg+0x170>
                    dip204_printf_string("Re F");
80002c7e:	49 0c       	lddpc	r12,80002cbc <CANGetMsg+0x174>
80002c80:	f0 1f 00 10 	mcall	80002cc0 <CANGetMsg+0x178>
                    LED_On(LED2);
80002c84:	30 4c       	mov	r12,4
80002c86:	f0 1f 00 0a 	mcall	80002cac <CANGetMsg+0x164>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
80002c8a:	30 0a       	mov	r10,0
80002c8c:	32 cb       	mov	r11,44
80002c8e:	14 9c       	mov	r12,r10
80002c90:	f0 1f 00 0d 	mcall	80002cc4 <CANGetMsg+0x17c>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
80002c94:	30 0a       	mov	r10,0
80002c96:	32 cb       	mov	r11,44
80002c98:	14 9c       	mov	r12,r10
80002c9a:	f0 1f 00 0b 	mcall	80002cc4 <CANGetMsg+0x17c>
80002c9e:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
80002ca0:	d8 3a       	popm	r0-r7,pc,r12=0
80002ca2:	00 00       	add	r0,r0
80002ca4:	80 00       	ld.sh	r0,r0[0x0]
80002ca6:	25 50       	sub	r0,85
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	28 70       	sub	r0,-121
80002cac:	80 00       	ld.sh	r0,r0[0x0]
80002cae:	2c c8       	sub	r8,-52
80002cb0:	80 00       	ld.sh	r0,r0[0x0]
80002cb2:	2d 18       	sub	r8,-47
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2a 10       	sub	r0,-95
80002cb8:	80 00       	ld.sh	r0,r0[0x0]
80002cba:	2e f4       	sub	r4,-17
80002cbc:	80 00       	ld.sh	r0,r0[0x0]
80002cbe:	92 e4       	ld.uh	r4,r9[0xc]
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	2e 5c       	sub	r12,-27
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	25 dc       	sub	r12,93

80002cc8 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002cc8:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002ccc:	49 18       	lddpc	r8,80002d10 <LED_On+0x48>
80002cce:	70 09       	ld.w	r9,r8[0x0]
80002cd0:	f9 e9 10 09 	or	r9,r12,r9
80002cd4:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002cd6:	58 0c       	cp.w	r12,0
80002cd8:	5e 0c       	reteq	r12
80002cda:	48 f8       	lddpc	r8,80002d14 <LED_On+0x4c>
80002cdc:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002cde:	18 9a       	mov	r10,r12
80002ce0:	5c 9a       	brev	r10
80002ce2:	f4 0a 12 00 	clz	r10,r10
80002ce6:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002ce8:	f4 09 15 04 	lsl	r9,r10,0x4
80002cec:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002cee:	70 09       	ld.w	r9,r8[0x0]
80002cf0:	a9 69       	lsl	r9,0x8
80002cf2:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002cf6:	70 1b       	ld.w	r11,r8[0x4]
80002cf8:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002cfc:	70 1b       	ld.w	r11,r8[0x4]
80002cfe:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002d02:	70 1b       	ld.w	r11,r8[0x4]
80002d04:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002d06:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002d0a:	ce a1       	brne	80002cde <LED_On+0x16>
80002d0c:	5e fc       	retal	r12
80002d0e:	00 00       	add	r0,r0
80002d10:	00 00       	add	r0,r0
80002d12:	00 0c       	add	r12,r0
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	92 ec       	ld.uh	r12,r9[0xc]

80002d18 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002d18:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002d1c:	49 28       	lddpc	r8,80002d64 <LED_Off+0x4c>
80002d1e:	70 09       	ld.w	r9,r8[0x0]
80002d20:	f8 0a 11 ff 	rsub	r10,r12,-1
80002d24:	f5 e9 00 09 	and	r9,r10,r9
80002d28:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002d2a:	58 0c       	cp.w	r12,0
80002d2c:	5e 0c       	reteq	r12
80002d2e:	48 f8       	lddpc	r8,80002d68 <LED_Off+0x50>
80002d30:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002d32:	18 9a       	mov	r10,r12
80002d34:	5c 9a       	brev	r10
80002d36:	f4 0a 12 00 	clz	r10,r10
80002d3a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002d3c:	f4 09 15 04 	lsl	r9,r10,0x4
80002d40:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002d42:	70 09       	ld.w	r9,r8[0x0]
80002d44:	a9 69       	lsl	r9,0x8
80002d46:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002d4a:	70 1b       	ld.w	r11,r8[0x4]
80002d4c:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002d50:	70 1b       	ld.w	r11,r8[0x4]
80002d52:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002d56:	70 1b       	ld.w	r11,r8[0x4]
80002d58:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002d5a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002d5e:	ce a1       	brne	80002d32 <LED_Off+0x1a>
80002d60:	5e fc       	retal	r12
80002d62:	00 00       	add	r0,r0
80002d64:	00 00       	add	r0,r0
80002d66:	00 0c       	add	r12,r0
80002d68:	80 00       	ld.sh	r0,r0[0x0]
80002d6a:	92 ec       	ld.uh	r12,r9[0xc]

80002d6c <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002d6c:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002d6e:	30 2b       	mov	r11,2
80002d70:	fe 7c 28 00 	mov	r12,-55296
80002d74:	f0 1f 00 02 	mcall	80002d7c <dip204_select+0x10>
}
80002d78:	d8 02       	popm	pc
80002d7a:	00 00       	add	r0,r0
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	35 1a       	mov	r10,81

80002d80 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002d80:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002d84:	f8 c8 ff f8 	sub	r8,r12,-8
80002d88:	30 69       	mov	r9,6
80002d8a:	f2 08 18 00 	cp.b	r8,r9
80002d8e:	e0 8b 00 0f 	brhi	80002dac <dip204_write_byte+0x2c>
80002d92:	30 19       	mov	r9,1
80002d94:	f2 08 09 48 	lsl	r8,r9,r8
80002d98:	e2 18 00 55 	andl	r8,0x55,COH
80002d9c:	c0 80       	breq	80002dac <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002d9e:	18 9b       	mov	r11,r12
80002da0:	fe 7c 28 00 	mov	r12,-55296
80002da4:	f0 1f 00 0c 	mcall	80002dd4 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002da8:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002dac:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002dae:	f8 07 16 18 	lsr	r7,r12,0x18
80002db2:	0e 9b       	mov	r11,r7
80002db4:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002db8:	fe 7c 28 00 	mov	r12,-55296
80002dbc:	f0 1f 00 06 	mcall	80002dd4 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002dc0:	ee 0b 15 04 	lsl	r11,r7,0x4
80002dc4:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002dc8:	fe 7c 28 00 	mov	r12,-55296
80002dcc:	f0 1f 00 02 	mcall	80002dd4 <dip204_write_byte+0x54>
80002dd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	36 4a       	mov	r10,100

80002dd8 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002dd8:	eb cd 40 c0 	pushm	r6-r7,lr
80002ddc:	20 1d       	sub	sp,4
80002dde:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002de0:	fa c7 ff fc 	sub	r7,sp,-4
80002de4:	30 08       	mov	r8,0
80002de6:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002de8:	30 0b       	mov	r11,0
80002dea:	fe 7c 28 00 	mov	r12,-55296
80002dee:	f0 1f 00 08 	mcall	80002e0c <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002df2:	0e 9b       	mov	r11,r7
80002df4:	fe 7c 28 00 	mov	r12,-55296
80002df8:	f0 1f 00 06 	mcall	80002e10 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002dfc:	1b b8       	ld.ub	r8,sp[0x3]
80002dfe:	5c 98       	brev	r8
80002e00:	b9 88       	lsr	r8,0x18
80002e02:	ac 88       	st.b	r6[0x0],r8
}
80002e04:	2f fd       	sub	sp,-4
80002e06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e0a:	00 00       	add	r0,r0
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	36 4a       	mov	r10,100
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	36 6e       	mov	lr,102

80002e14 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002e14:	eb cd 40 c0 	pushm	r6-r7,lr
80002e18:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002e1a:	fa c7 ff fc 	sub	r7,sp,-4
80002e1e:	30 08       	mov	r8,0
80002e20:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002e22:	e0 6c 00 fc 	mov	r12,252
80002e26:	f0 1f 00 07 	mcall	80002e40 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002e2a:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002e2c:	0e 9c       	mov	r12,r7
80002e2e:	f0 1f 00 06 	mcall	80002e44 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002e32:	1b b8       	ld.ub	r8,sp[0x3]
80002e34:	ec 08 18 00 	cp.b	r8,r6
80002e38:	cf a5       	brlt	80002e2c <dip204_wait_busy+0x18>
}
80002e3a:	2f fd       	sub	sp,-4
80002e3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	2d 80       	sub	r0,-40
80002e44:	80 00       	ld.sh	r0,r0[0x0]
80002e46:	2d d8       	sub	r8,-35

80002e48 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002e48:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e4a:	30 2b       	mov	r11,2
80002e4c:	fe 7c 28 00 	mov	r12,-55296
80002e50:	f0 1f 00 02 	mcall	80002e58 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002e54:	d8 02       	popm	pc
80002e56:	00 00       	add	r0,r0
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	35 66       	mov	r6,86

80002e5c <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002e5c:	d4 21       	pushm	r4-r7,lr
80002e5e:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002e60:	fa ca ff d4 	sub	r10,sp,-44
80002e64:	18 9b       	mov	r11,r12
80002e66:	1a 9c       	mov	r12,sp
80002e68:	f0 1f 00 1e 	mcall	80002ee0 <dip204_printf_string+0x84>
80002e6c:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002e6e:	31 38       	mov	r8,19
80002e70:	f0 0c 18 00 	cp.b	r12,r8
80002e74:	e0 8b 00 0e 	brhi	80002e90 <dip204_printf_string+0x34>
80002e78:	30 0a       	mov	r10,0
80002e7a:	31 49       	mov	r9,20
80002e7c:	fa c8 ff e8 	sub	r8,sp,-24
80002e80:	18 08       	add	r8,r12
80002e82:	f1 6a ff e8 	st.b	r8[-24],r10
80002e86:	2f fc       	sub	r12,-1
80002e88:	5c 5c       	castu.b	r12
80002e8a:	f2 0c 18 00 	cp.b	r12,r9
80002e8e:	cf 71       	brne	80002e7c <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002e90:	f0 1f 00 15 	mcall	80002ee4 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002e94:	30 08       	mov	r8,0
80002e96:	1b 89       	ld.ub	r9,sp[0x0]
80002e98:	f0 09 18 00 	cp.b	r9,r8
80002e9c:	c1 e0       	breq	80002ed8 <dip204_printf_string+0x7c>
80002e9e:	30 06       	mov	r6,0
80002ea0:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ea2:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002ea6:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ea8:	08 9c       	mov	r12,r4
80002eaa:	f0 1f 00 10 	mcall	80002ee8 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002eae:	fa c8 ff e8 	sub	r8,sp,-24
80002eb2:	f0 06 00 06 	add	r6,r8,r6
80002eb6:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002eba:	f0 1f 00 0c 	mcall	80002ee8 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002ebe:	2f f7       	sub	r7,-1
80002ec0:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002ec2:	f0 1f 00 0b 	mcall	80002eec <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002ec6:	0e 96       	mov	r6,r7
80002ec8:	fa c8 ff e8 	sub	r8,sp,-24
80002ecc:	0e 08       	add	r8,r7
80002ece:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002ed2:	ea 08 18 00 	cp.b	r8,r5
80002ed6:	ce 91       	brne	80002ea8 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002ed8:	f0 1f 00 06 	mcall	80002ef0 <dip204_printf_string+0x94>
}
80002edc:	2f ad       	sub	sp,-24
80002ede:	d8 22       	popm	r4-r7,pc
80002ee0:	80 00       	ld.sh	r0,r0[0x0]
80002ee2:	38 54       	mov	r4,-123
80002ee4:	80 00       	ld.sh	r0,r0[0x0]
80002ee6:	2d 6c       	sub	r12,-42
80002ee8:	80 00       	ld.sh	r0,r0[0x0]
80002eea:	2d 80       	sub	r0,-40
80002eec:	80 00       	ld.sh	r0,r0[0x0]
80002eee:	2e 14       	sub	r4,-31
80002ef0:	80 00       	ld.sh	r0,r0[0x0]
80002ef2:	2e 48       	sub	r8,-28

80002ef4 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002ef4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ef8:	18 96       	mov	r6,r12
80002efa:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002efc:	f0 1f 00 11 	mcall	80002f40 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002f00:	31 48       	mov	r8,20
80002f02:	f0 06 18 00 	cp.b	r6,r8
80002f06:	5f 89       	srls	r9
80002f08:	30 48       	mov	r8,4
80002f0a:	f0 07 18 00 	cp.b	r7,r8
80002f0e:	5f 88       	srls	r8
80002f10:	f3 e8 00 08 	and	r8,r9,r8
80002f14:	c0 31       	brne	80002f1a <dip204_set_cursor_position+0x26>
80002f16:	30 06       	mov	r6,0
80002f18:	c0 68       	rjmp	80002f24 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002f1a:	28 16       	sub	r6,-127
80002f1c:	20 17       	sub	r7,1
80002f1e:	a5 77       	lsl	r7,0x5
80002f20:	0e 06       	add	r6,r7
80002f22:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002f24:	e0 6c 00 f8 	mov	r12,248
80002f28:	f0 1f 00 07 	mcall	80002f44 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002f2c:	0c 9c       	mov	r12,r6
80002f2e:	f0 1f 00 06 	mcall	80002f44 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002f32:	f0 1f 00 06 	mcall	80002f48 <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002f36:	f0 1f 00 06 	mcall	80002f4c <dip204_set_cursor_position+0x58>
}
80002f3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f3e:	00 00       	add	r0,r0
80002f40:	80 00       	ld.sh	r0,r0[0x0]
80002f42:	2d 6c       	sub	r12,-42
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	2d 80       	sub	r0,-40
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	2e 14       	sub	r4,-31
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2e 48       	sub	r8,-28

80002f50 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002f50:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002f52:	f0 1f 00 08 	mcall	80002f70 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002f56:	e0 6c 00 f8 	mov	r12,248
80002f5a:	f0 1f 00 07 	mcall	80002f74 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002f5e:	30 cc       	mov	r12,12
80002f60:	f0 1f 00 05 	mcall	80002f74 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002f64:	f0 1f 00 05 	mcall	80002f78 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002f68:	f0 1f 00 05 	mcall	80002f7c <dip204_hide_cursor+0x2c>
}
80002f6c:	d8 02       	popm	pc
80002f6e:	00 00       	add	r0,r0
80002f70:	80 00       	ld.sh	r0,r0[0x0]
80002f72:	2d 6c       	sub	r12,-42
80002f74:	80 00       	ld.sh	r0,r0[0x0]
80002f76:	2d 80       	sub	r0,-40
80002f78:	80 00       	ld.sh	r0,r0[0x0]
80002f7a:	2e 14       	sub	r4,-31
80002f7c:	80 00       	ld.sh	r0,r0[0x0]
80002f7e:	2e 48       	sub	r8,-28

80002f80 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002f80:	d4 01       	pushm	lr
  dip204_select();
80002f82:	f0 1f 00 13 	mcall	80002fcc <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002f86:	e0 6c 00 f8 	mov	r12,248
80002f8a:	f0 1f 00 12 	mcall	80002fd0 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002f8e:	30 1c       	mov	r12,1
80002f90:	f0 1f 00 10 	mcall	80002fd0 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f94:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f98:	e0 69 bb 80 	mov	r9,48000
80002f9c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002fa0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002fa4:	14 38       	cp.w	r8,r10
80002fa6:	e0 88 00 08 	brls	80002fb6 <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002faa:	12 38       	cp.w	r8,r9
80002fac:	fe 98 ff fa 	brls	80002fa0 <dip204_clear_display+0x20>
80002fb0:	12 3a       	cp.w	r10,r9
80002fb2:	c0 73       	brcs	80002fc0 <dip204_clear_display+0x40>
80002fb4:	cf 6b       	rjmp	80002fa0 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002fb6:	12 38       	cp.w	r8,r9
80002fb8:	e0 8b 00 04 	brhi	80002fc0 <dip204_clear_display+0x40>
80002fbc:	12 3a       	cp.w	r10,r9
80002fbe:	cf 12       	brcc	80002fa0 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002fc0:	f0 1f 00 05 	mcall	80002fd4 <dip204_clear_display+0x54>
  dip204_unselect();
80002fc4:	f0 1f 00 05 	mcall	80002fd8 <dip204_clear_display+0x58>
}
80002fc8:	d8 02       	popm	pc
80002fca:	00 00       	add	r0,r0
80002fcc:	80 00       	ld.sh	r0,r0[0x0]
80002fce:	2d 6c       	sub	r12,-42
80002fd0:	80 00       	ld.sh	r0,r0[0x0]
80002fd2:	2d 80       	sub	r0,-40
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	2e 14       	sub	r4,-31
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	2e 48       	sub	r8,-28

80002fdc <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002fdc:	eb cd 40 80 	pushm	r7,lr
80002fe0:	20 4d       	sub	sp,16
80002fe2:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002fe4:	58 1c       	cp.w	r12,1
80002fe6:	c3 01       	brne	80003046 <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002fe8:	30 69       	mov	r9,6
80002fea:	4f a8       	lddpc	r8,800031d0 <dip204_init+0x1f4>
80002fec:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002fee:	30 2b       	mov	r11,2
80002ff0:	33 2c       	mov	r12,50
80002ff2:	f0 1f 00 79 	mcall	800031d4 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80002ff6:	30 08       	mov	r8,0
80002ff8:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002ffa:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002ffc:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002ffe:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80003000:	1a 9c       	mov	r12,sp
80003002:	f0 1f 00 76 	mcall	800031d8 <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80003006:	58 07       	cp.w	r7,0
80003008:	f9 b7 01 31 	movne	r7,49
8000300c:	f9 b7 00 01 	moveq	r7,1
80003010:	4f 38       	lddpc	r8,800031dc <dip204_init+0x200>
80003012:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80003014:	4f 3b       	lddpc	r11,800031e0 <dip204_init+0x204>
80003016:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80003018:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
8000301c:	ab a8       	sbr	r8,0xa
8000301e:	30 89       	mov	r9,8
80003020:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80003024:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80003026:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80003028:	33 28       	mov	r8,50
8000302a:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
8000302c:	30 08       	mov	r8,0
8000302e:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80003030:	4e 87       	lddpc	r7,800031d0 <dip204_init+0x1f4>
80003032:	6e 0c       	ld.w	r12,r7[0x0]
80003034:	f0 1f 00 6c 	mcall	800031e4 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
80003038:	6e 08       	ld.w	r8,r7[0x0]
8000303a:	30 1c       	mov	r12,1
8000303c:	f8 08 09 4c 	lsl	r12,r12,r8
80003040:	f0 1f 00 6a 	mcall	800031e8 <dip204_init+0x20c>
80003044:	c0 a8       	rjmp	80003058 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
80003046:	58 0b       	cp.w	r11,0
80003048:	c0 50       	breq	80003052 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000304a:	33 2c       	mov	r12,50
8000304c:	f0 1f 00 68 	mcall	800031ec <dip204_init+0x210>
80003050:	c0 48       	rjmp	80003058 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80003052:	33 2c       	mov	r12,50
80003054:	f0 1f 00 67 	mcall	800031f0 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003058:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000305c:	e2 79 a9 80 	mov	r9,240000
80003060:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003064:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003068:	14 38       	cp.w	r8,r10
8000306a:	e0 88 00 08 	brls	8000307a <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000306e:	12 38       	cp.w	r8,r9
80003070:	fe 98 ff fa 	brls	80003064 <dip204_init+0x88>
80003074:	12 3a       	cp.w	r10,r9
80003076:	c6 e3       	brcs	80003152 <dip204_init+0x176>
80003078:	cf 6b       	rjmp	80003064 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000307a:	12 38       	cp.w	r8,r9
8000307c:	e0 8b 00 6b 	brhi	80003152 <dip204_init+0x176>
80003080:	12 3a       	cp.w	r10,r9
80003082:	c6 83       	brcs	80003152 <dip204_init+0x176>
80003084:	cf 0b       	rjmp	80003064 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003086:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000308a:	14 38       	cp.w	r8,r10
8000308c:	e0 88 00 08 	brls	8000309c <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003090:	12 38       	cp.w	r8,r9
80003092:	fe 98 ff fa 	brls	80003086 <dip204_init+0xaa>
80003096:	12 3a       	cp.w	r10,r9
80003098:	c6 b3       	brcs	8000316e <dip204_init+0x192>
8000309a:	cf 6b       	rjmp	80003086 <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000309c:	12 38       	cp.w	r8,r9
8000309e:	e0 8b 00 68 	brhi	8000316e <dip204_init+0x192>
800030a2:	12 3a       	cp.w	r10,r9
800030a4:	c6 53       	brcs	8000316e <dip204_init+0x192>
800030a6:	cf 0b       	rjmp	80003086 <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030a8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030ac:	14 38       	cp.w	r8,r10
800030ae:	e0 88 00 08 	brls	800030be <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030b2:	12 38       	cp.w	r8,r9
800030b4:	fe 98 ff fa 	brls	800030a8 <dip204_init+0xcc>
800030b8:	12 3a       	cp.w	r10,r9
800030ba:	c6 23       	brcs	8000317e <dip204_init+0x1a2>
800030bc:	cf 6b       	rjmp	800030a8 <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030be:	12 38       	cp.w	r8,r9
800030c0:	e0 8b 00 5f 	brhi	8000317e <dip204_init+0x1a2>
800030c4:	12 3a       	cp.w	r10,r9
800030c6:	c5 c3       	brcs	8000317e <dip204_init+0x1a2>
800030c8:	cf 0b       	rjmp	800030a8 <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030ca:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030ce:	14 38       	cp.w	r8,r10
800030d0:	e0 88 00 08 	brls	800030e0 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030d4:	12 38       	cp.w	r8,r9
800030d6:	fe 98 ff fa 	brls	800030ca <dip204_init+0xee>
800030da:	12 3a       	cp.w	r10,r9
800030dc:	c5 93       	brcs	8000318e <dip204_init+0x1b2>
800030de:	cf 6b       	rjmp	800030ca <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030e0:	12 38       	cp.w	r8,r9
800030e2:	e0 8b 00 56 	brhi	8000318e <dip204_init+0x1b2>
800030e6:	12 3a       	cp.w	r10,r9
800030e8:	c5 33       	brcs	8000318e <dip204_init+0x1b2>
800030ea:	cf 0b       	rjmp	800030ca <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030ec:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030f0:	14 38       	cp.w	r8,r10
800030f2:	e0 88 00 08 	brls	80003102 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030f6:	12 38       	cp.w	r8,r9
800030f8:	fe 98 ff fa 	brls	800030ec <dip204_init+0x110>
800030fc:	12 3a       	cp.w	r10,r9
800030fe:	c5 03       	brcs	8000319e <dip204_init+0x1c2>
80003100:	cf 6b       	rjmp	800030ec <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003102:	12 38       	cp.w	r8,r9
80003104:	e0 8b 00 4d 	brhi	8000319e <dip204_init+0x1c2>
80003108:	12 3a       	cp.w	r10,r9
8000310a:	c4 a3       	brcs	8000319e <dip204_init+0x1c2>
8000310c:	cf 0b       	rjmp	800030ec <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000310e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003112:	14 38       	cp.w	r8,r10
80003114:	e0 88 00 08 	brls	80003124 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003118:	12 38       	cp.w	r8,r9
8000311a:	fe 98 ff fa 	brls	8000310e <dip204_init+0x132>
8000311e:	12 3a       	cp.w	r10,r9
80003120:	c4 93       	brcs	800031b2 <dip204_init+0x1d6>
80003122:	cf 6b       	rjmp	8000310e <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003124:	12 38       	cp.w	r8,r9
80003126:	e0 8b 00 46 	brhi	800031b2 <dip204_init+0x1d6>
8000312a:	12 3a       	cp.w	r10,r9
8000312c:	c4 33       	brcs	800031b2 <dip204_init+0x1d6>
8000312e:	cf 0b       	rjmp	8000310e <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003130:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003134:	14 38       	cp.w	r8,r10
80003136:	e0 88 00 08 	brls	80003146 <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000313a:	12 38       	cp.w	r8,r9
8000313c:	fe 98 ff fa 	brls	80003130 <dip204_init+0x154>
80003140:	12 3a       	cp.w	r10,r9
80003142:	c4 03       	brcs	800031c2 <dip204_init+0x1e6>
80003144:	cf 6b       	rjmp	80003130 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003146:	12 38       	cp.w	r8,r9
80003148:	e0 8b 00 3d 	brhi	800031c2 <dip204_init+0x1e6>
8000314c:	12 3a       	cp.w	r10,r9
8000314e:	c3 a3       	brcs	800031c2 <dip204_init+0x1e6>
80003150:	cf 0b       	rjmp	80003130 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80003152:	f0 1f 00 29 	mcall	800031f4 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003156:	e0 6c 00 f8 	mov	r12,248
8000315a:	f0 1f 00 28 	mcall	800031f8 <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
8000315e:	33 4c       	mov	r12,52
80003160:	f0 1f 00 26 	mcall	800031f8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003164:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003168:	f0 ca d1 20 	sub	r10,r8,-12000
8000316c:	c8 db       	rjmp	80003086 <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
8000316e:	30 9c       	mov	r12,9
80003170:	f0 1f 00 22 	mcall	800031f8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003174:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003178:	f0 ca d1 20 	sub	r10,r8,-12000
8000317c:	c9 6b       	rjmp	800030a8 <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
8000317e:	33 0c       	mov	r12,48
80003180:	f0 1f 00 1e 	mcall	800031f8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003184:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003188:	f0 ca d1 20 	sub	r10,r8,-12000
8000318c:	c9 fb       	rjmp	800030ca <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
8000318e:	30 fc       	mov	r12,15
80003190:	f0 1f 00 1a 	mcall	800031f8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003194:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003198:	f0 ca d1 20 	sub	r10,r8,-12000
8000319c:	ca 8b       	rjmp	800030ec <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
8000319e:	30 1c       	mov	r12,1
800031a0:	f0 1f 00 16 	mcall	800031f8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031a4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031a8:	e0 69 ea 60 	mov	r9,60000
800031ac:	f0 09 00 0a 	add	r10,r8,r9
800031b0:	ca fb       	rjmp	8000310e <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800031b2:	30 6c       	mov	r12,6
800031b4:	f0 1f 00 11 	mcall	800031f8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031b8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031bc:	f0 ca d1 20 	sub	r10,r8,-12000
800031c0:	cb 8b       	rjmp	80003130 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
800031c2:	f0 1f 00 0f 	mcall	800031fc <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
800031c6:	f0 1f 00 0f 	mcall	80003200 <dip204_init+0x224>
}
800031ca:	2f cd       	sub	sp,-16
800031cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800031d0:	00 00       	add	r0,r0
800031d2:	00 10       	sub	r0,r0
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	32 04       	mov	r4,32
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	34 50       	mov	r0,69
800031dc:	00 00       	add	r0,r0
800031de:	05 38       	ld.ub	r8,r2++
800031e0:	00 00       	add	r0,r0
800031e2:	05 18       	ld.sh	r8,r2++
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	34 08       	mov	r8,64
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	34 3e       	mov	lr,67
800031ec:	80 00       	ld.sh	r0,r0[0x0]
800031ee:	32 a4       	mov	r4,42
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	32 88       	mov	r8,40
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	2d 6c       	sub	r12,-42
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	2d 80       	sub	r0,-40
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	2e 14       	sub	r4,-31
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	2e 48       	sub	r8,-28

80003204 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003204:	f8 08 16 05 	lsr	r8,r12,0x5
80003208:	a9 68       	lsl	r8,0x8
8000320a:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000320e:	58 1b       	cp.w	r11,1
80003210:	c0 d0       	breq	8000322a <gpio_enable_module_pin+0x26>
80003212:	c0 63       	brcs	8000321e <gpio_enable_module_pin+0x1a>
80003214:	58 2b       	cp.w	r11,2
80003216:	c1 00       	breq	80003236 <gpio_enable_module_pin+0x32>
80003218:	58 3b       	cp.w	r11,3
8000321a:	c1 40       	breq	80003242 <gpio_enable_module_pin+0x3e>
8000321c:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000321e:	30 19       	mov	r9,1
80003220:	f2 0c 09 49 	lsl	r9,r9,r12
80003224:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003226:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003228:	c1 28       	rjmp	8000324c <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000322a:	30 19       	mov	r9,1
8000322c:	f2 0c 09 49 	lsl	r9,r9,r12
80003230:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003232:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003234:	c0 c8       	rjmp	8000324c <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003236:	30 19       	mov	r9,1
80003238:	f2 0c 09 49 	lsl	r9,r9,r12
8000323c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000323e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003240:	c0 68       	rjmp	8000324c <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003242:	30 19       	mov	r9,1
80003244:	f2 0c 09 49 	lsl	r9,r9,r12
80003248:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000324a:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000324c:	30 19       	mov	r9,1
8000324e:	f2 0c 09 4c 	lsl	r12,r9,r12
80003252:	91 2c       	st.w	r8[0x8],r12
80003254:	5e fd       	retal	0
80003256:	d7 03       	nop

80003258 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003258:	d4 21       	pushm	r4-r7,lr
8000325a:	18 97       	mov	r7,r12
8000325c:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000325e:	58 0b       	cp.w	r11,0
80003260:	c0 31       	brne	80003266 <gpio_enable_module+0xe>
80003262:	30 05       	mov	r5,0
80003264:	c0 d8       	rjmp	8000327e <gpio_enable_module+0x26>
80003266:	30 06       	mov	r6,0
80003268:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000326a:	6e 1b       	ld.w	r11,r7[0x4]
8000326c:	6e 0c       	ld.w	r12,r7[0x0]
8000326e:	f0 1f 00 06 	mcall	80003284 <gpio_enable_module+0x2c>
80003272:	18 45       	or	r5,r12
		gpiomap++;
80003274:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003276:	2f f6       	sub	r6,-1
80003278:	0c 34       	cp.w	r4,r6
8000327a:	fe 9b ff f8 	brhi	8000326a <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000327e:	0a 9c       	mov	r12,r5
80003280:	d8 22       	popm	r4-r7,pc
80003282:	00 00       	add	r0,r0
80003284:	80 00       	ld.sh	r0,r0[0x0]
80003286:	32 04       	mov	r4,32

80003288 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003288:	f8 08 16 05 	lsr	r8,r12,0x5
8000328c:	a9 68       	lsl	r8,0x8
8000328e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003292:	30 19       	mov	r9,1
80003294:	f2 0c 09 4c 	lsl	r12,r9,r12
80003298:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000329c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800032a0:	91 1c       	st.w	r8[0x4],r12
}
800032a2:	5e fc       	retal	r12

800032a4 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800032a4:	f8 08 16 05 	lsr	r8,r12,0x5
800032a8:	a9 68       	lsl	r8,0x8
800032aa:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800032ae:	30 19       	mov	r9,1
800032b0:	f2 0c 09 4c 	lsl	r12,r9,r12
800032b4:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800032b8:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800032bc:	91 1c       	st.w	r8[0x4],r12
}
800032be:	5e fc       	retal	r12

800032c0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800032c0:	c0 08       	rjmp	800032c0 <_unhandled_interrupt>
800032c2:	d7 03       	nop

800032c4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800032c4:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032c6:	49 18       	lddpc	r8,80003308 <INTC_init_interrupts+0x44>
800032c8:	e3 b8 00 01 	mtsr	0x4,r8
800032cc:	49 0e       	lddpc	lr,8000330c <INTC_init_interrupts+0x48>
800032ce:	30 07       	mov	r7,0
800032d0:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032d2:	49 0c       	lddpc	r12,80003310 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032d4:	49 05       	lddpc	r5,80003314 <INTC_init_interrupts+0x50>
800032d6:	10 15       	sub	r5,r8
800032d8:	fe 76 08 00 	mov	r6,-63488
800032dc:	c1 08       	rjmp	800032fc <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032de:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800032e0:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032e2:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032e4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800032e8:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032ea:	10 3a       	cp.w	r10,r8
800032ec:	fe 9b ff fc 	brhi	800032e4 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032f0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800032f4:	2f f7       	sub	r7,-1
800032f6:	2f 8e       	sub	lr,-8
800032f8:	59 47       	cp.w	r7,20
800032fa:	c0 50       	breq	80003304 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032fc:	7c 08       	ld.w	r8,lr[0x0]
800032fe:	58 08       	cp.w	r8,0
80003300:	ce f1       	brne	800032de <INTC_init_interrupts+0x1a>
80003302:	cf 7b       	rjmp	800032f0 <INTC_init_interrupts+0x2c>
80003304:	d8 22       	popm	r4-r7,pc
80003306:	00 00       	add	r0,r0
80003308:	80 00       	ld.sh	r0,r0[0x0]
8000330a:	90 00       	ld.sh	r0,r8[0x0]
8000330c:	80 00       	ld.sh	r0,r0[0x0]
8000330e:	93 6c       	st.w	r9[0x18],r12
80003310:	80 00       	ld.sh	r0,r0[0x0]
80003312:	32 c0       	mov	r0,44
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	91 04       	st.w	r8[0x0],r4

80003318 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003318:	fe 78 08 00 	mov	r8,-63488
8000331c:	e0 69 00 83 	mov	r9,131
80003320:	f2 0c 01 0c 	sub	r12,r9,r12
80003324:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003328:	f2 ca ff c0 	sub	r10,r9,-64
8000332c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003330:	58 08       	cp.w	r8,0
80003332:	c0 21       	brne	80003336 <_get_interrupt_handler+0x1e>
80003334:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003336:	f0 08 12 00 	clz	r8,r8
8000333a:	48 5a       	lddpc	r10,8000334c <_get_interrupt_handler+0x34>
8000333c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003340:	f0 08 11 1f 	rsub	r8,r8,31
80003344:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003346:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000334a:	5e fc       	retal	r12
8000334c:	80 00       	ld.sh	r0,r0[0x0]
8000334e:	93 6c       	st.w	r9[0x18],r12

80003350 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003350:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80003352:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003356:	99 a8       	st.w	r12[0x28],r8
}
80003358:	5e fc       	retal	r12
8000335a:	d7 03       	nop

8000335c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000335c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000335e:	ec 5b bb 9f 	cp.w	r11,899999
80003362:	e0 8b 00 04 	brhi	8000336a <pm_enable_osc0_crystal+0xe>
80003366:	30 4b       	mov	r11,4
80003368:	c1 38       	rjmp	8000338e <pm_enable_osc0_crystal+0x32>
8000336a:	e0 68 c6 bf 	mov	r8,50879
8000336e:	ea 18 00 2d 	orh	r8,0x2d
80003372:	10 3b       	cp.w	r11,r8
80003374:	e0 8b 00 04 	brhi	8000337c <pm_enable_osc0_crystal+0x20>
80003378:	30 5b       	mov	r11,5
8000337a:	c0 a8       	rjmp	8000338e <pm_enable_osc0_crystal+0x32>
8000337c:	e0 68 12 00 	mov	r8,4608
80003380:	ea 18 00 7a 	orh	r8,0x7a
80003384:	10 3b       	cp.w	r11,r8
80003386:	f9 bb 03 06 	movlo	r11,6
8000338a:	f9 bb 02 07 	movhs	r11,7
8000338e:	f0 1f 00 02 	mcall	80003394 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80003392:	d8 02       	popm	pc
80003394:	80 00       	ld.sh	r0,r0[0x0]
80003396:	33 50       	mov	r0,53

80003398 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003398:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000339a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000339e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800033a0:	78 08       	ld.w	r8,r12[0x0]
800033a2:	a3 a8       	sbr	r8,0x2
800033a4:	99 08       	st.w	r12[0x0],r8
}
800033a6:	5e fc       	retal	r12

800033a8 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800033a8:	79 58       	ld.w	r8,r12[0x54]
800033aa:	e2 18 00 80 	andl	r8,0x80,COH
800033ae:	cf d0       	breq	800033a8 <pm_wait_for_clk0_ready>
}
800033b0:	5e fc       	retal	r12
800033b2:	d7 03       	nop

800033b4 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800033b4:	eb cd 40 80 	pushm	r7,lr
800033b8:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800033ba:	f0 1f 00 04 	mcall	800033c8 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800033be:	0e 9c       	mov	r12,r7
800033c0:	f0 1f 00 03 	mcall	800033cc <pm_enable_clk0+0x18>
}
800033c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	33 98       	mov	r8,57
800033cc:	80 00       	ld.sh	r0,r0[0x0]
800033ce:	33 a8       	mov	r8,58

800033d0 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800033d0:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800033d2:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800033d6:	99 08       	st.w	r12[0x0],r8
}
800033d8:	5e fc       	retal	r12
800033da:	d7 03       	nop

800033dc <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800033dc:	eb cd 40 c0 	pushm	r6-r7,lr
800033e0:	18 97       	mov	r7,r12
800033e2:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800033e4:	f0 1f 00 06 	mcall	800033fc <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800033e8:	0c 9b       	mov	r11,r6
800033ea:	0e 9c       	mov	r12,r7
800033ec:	f0 1f 00 05 	mcall	80003400 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800033f0:	30 1b       	mov	r11,1
800033f2:	0e 9c       	mov	r12,r7
800033f4:	f0 1f 00 04 	mcall	80003404 <pm_switch_to_osc0+0x28>
}
800033f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800033fc:	80 00       	ld.sh	r0,r0[0x0]
800033fe:	33 5c       	mov	r12,53
80003400:	80 00       	ld.sh	r0,r0[0x0]
80003402:	33 b4       	mov	r4,59
80003404:	80 00       	ld.sh	r0,r0[0x0]
80003406:	33 d0       	mov	r0,61

80003408 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003408:	58 0b       	cp.w	r11,0
8000340a:	c1 90       	breq	8000343c <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
8000340c:	58 6c       	cp.w	r12,6
8000340e:	e0 8b 00 17 	brhi	8000343c <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003412:	76 0a       	ld.w	r10,r11[0x0]
80003414:	fe 78 30 00 	mov	r8,-53248
80003418:	f8 c9 ff f0 	sub	r9,r12,-16
8000341c:	a5 79       	lsl	r9,0x5
8000341e:	f0 09 00 09 	add	r9,r8,r9
80003422:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003424:	76 19       	ld.w	r9,r11[0x4]
80003426:	a5 7c       	lsl	r12,0x5
80003428:	f0 0c 00 0c 	add	r12,r8,r12
8000342c:	f8 c8 fd fc 	sub	r8,r12,-516
80003430:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003432:	76 28       	ld.w	r8,r11[0x8]
80003434:	f8 cc fd f8 	sub	r12,r12,-520
80003438:	99 08       	st.w	r12[0x0],r8
8000343a:	5e fd       	retal	0

  return PWM_SUCCESS;
8000343c:	5e ff       	retal	1

8000343e <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000343e:	18 98       	mov	r8,r12
80003440:	e0 18 ff 80 	andl	r8,0xff80
80003444:	c0 20       	breq	80003448 <pwm_start_channels+0xa>
80003446:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80003448:	fe 78 30 00 	mov	r8,-53248
8000344c:	91 1c       	st.w	r8[0x4],r12
8000344e:	5e fd       	retal	0

80003450 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003450:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80003454:	58 0c       	cp.w	r12,0
80003456:	c0 21       	brne	8000345a <pwm_init+0xa>
80003458:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000345a:	e6 18 00 01 	andh	r8,0x1,COH
8000345e:	c0 91       	brne	80003470 <pwm_init+0x20>
80003460:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003462:	fe 78 30 00 	mov	r8,-53248
80003466:	37 f9       	mov	r9,127
80003468:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000346a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000346c:	d5 03       	csrf	0x10
8000346e:	c0 68       	rjmp	8000347a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003470:	fe 78 30 00 	mov	r8,-53248
80003474:	37 f9       	mov	r9,127
80003476:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003478:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000347a:	78 08       	ld.w	r8,r12[0x0]
8000347c:	78 39       	ld.w	r9,r12[0xc]
8000347e:	a9 69       	lsl	r9,0x8
80003480:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003484:	78 18       	ld.w	r8,r12[0x4]
80003486:	10 49       	or	r9,r8
80003488:	78 28       	ld.w	r8,r12[0x8]
8000348a:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000348e:	fe 78 30 00 	mov	r8,-53248
80003492:	91 09       	st.w	r8[0x0],r9
80003494:	5e fd       	retal	0

80003496 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003496:	f8 c8 00 01 	sub	r8,r12,1
8000349a:	f0 0b 00 0b 	add	r11,r8,r11
8000349e:	f6 0c 0d 0a 	divu	r10,r11,r12
800034a2:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800034a4:	f4 c8 00 01 	sub	r8,r10,1
800034a8:	e0 48 00 fe 	cp.w	r8,254
800034ac:	e0 88 00 03 	brls	800034b2 <getBaudDiv+0x1c>
800034b0:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800034b2:	5c 8c       	casts.h	r12
}
800034b4:	5e fc       	retal	r12

800034b6 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800034b6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800034ba:	30 18       	mov	r8,1
800034bc:	f0 09 18 00 	cp.b	r9,r8
800034c0:	e0 88 00 04 	brls	800034c8 <spi_initMaster+0x12>
800034c4:	30 2c       	mov	r12,2
800034c6:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800034c8:	e0 68 00 80 	mov	r8,128
800034cc:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800034ce:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800034d0:	30 19       	mov	r9,1
800034d2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800034d6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800034da:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800034de:	30 09       	mov	r9,0
800034e0:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800034e4:	30 fa       	mov	r10,15
800034e6:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800034ea:	99 18       	st.w	r12[0x4],r8
800034ec:	5e f9       	retal	r9

800034ee <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800034ee:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800034f0:	30 18       	mov	r8,1
800034f2:	f0 0b 18 00 	cp.b	r11,r8
800034f6:	5f be       	srhi	lr
800034f8:	f0 0a 18 00 	cp.b	r10,r8
800034fc:	5f b8       	srhi	r8
800034fe:	fd e8 10 08 	or	r8,lr,r8
80003502:	c0 30       	breq	80003508 <spi_selectionMode+0x1a>
80003504:	30 2c       	mov	r12,2
80003506:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003508:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000350a:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8000350e:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003512:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80003516:	99 18       	st.w	r12[0x4],r8
80003518:	d8 0a       	popm	pc,r12=0

8000351a <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000351a:	78 18       	ld.w	r8,r12[0x4]
8000351c:	ea 18 00 0f 	orh	r8,0xf
80003520:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003522:	78 18       	ld.w	r8,r12[0x4]
80003524:	e2 18 00 04 	andl	r8,0x4,COH
80003528:	c0 f0       	breq	80003546 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000352a:	30 e8       	mov	r8,14
8000352c:	f0 0b 18 00 	cp.b	r11,r8
80003530:	e0 8b 00 19 	brhi	80003562 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003534:	78 18       	ld.w	r8,r12[0x4]
80003536:	b1 6b       	lsl	r11,0x10
80003538:	ea 1b ff f0 	orh	r11,0xfff0
8000353c:	e8 1b ff ff 	orl	r11,0xffff
80003540:	10 6b       	and	r11,r8
80003542:	99 1b       	st.w	r12[0x4],r11
80003544:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003546:	30 38       	mov	r8,3
80003548:	f0 0b 18 00 	cp.b	r11,r8
8000354c:	e0 8b 00 0b 	brhi	80003562 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003550:	78 18       	ld.w	r8,r12[0x4]
80003552:	2f 0b       	sub	r11,-16
80003554:	30 19       	mov	r9,1
80003556:	f2 0b 09 4b 	lsl	r11,r9,r11
8000355a:	5c db       	com	r11
8000355c:	10 6b       	and	r11,r8
8000355e:	99 1b       	st.w	r12[0x4],r11
80003560:	5e fd       	retal	0
80003562:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80003564:	5e fc       	retal	r12

80003566 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003566:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000356a:	c0 58       	rjmp	80003574 <spi_unselectChip+0xe>
		if (!timeout--) {
8000356c:	58 08       	cp.w	r8,0
8000356e:	c0 21       	brne	80003572 <spi_unselectChip+0xc>
80003570:	5e ff       	retal	1
80003572:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003574:	78 49       	ld.w	r9,r12[0x10]
80003576:	e2 19 02 00 	andl	r9,0x200,COH
8000357a:	cf 90       	breq	8000356c <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000357c:	78 18       	ld.w	r8,r12[0x4]
8000357e:	ea 18 00 0f 	orh	r8,0xf
80003582:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003584:	fc 18 01 00 	movh	r8,0x100
80003588:	99 08       	st.w	r12[0x0],r8
8000358a:	5e fd       	retal	0

8000358c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000358c:	eb cd 40 f8 	pushm	r3-r7,lr
80003590:	18 95       	mov	r5,r12
80003592:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003594:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003598:	30 38       	mov	r8,3
8000359a:	f0 06 18 00 	cp.b	r6,r8
8000359e:	e0 8b 00 4d 	brhi	80003638 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800035a2:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800035a6:	30 18       	mov	r8,1
800035a8:	f0 04 18 00 	cp.b	r4,r8
800035ac:	e0 8b 00 46 	brhi	80003638 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800035b0:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800035b4:	30 78       	mov	r8,7
800035b6:	f0 03 18 00 	cp.b	r3,r8
800035ba:	e0 88 00 3f 	brls	80003638 <spi_setupChipReg+0xac>
800035be:	31 08       	mov	r8,16
800035c0:	f0 03 18 00 	cp.b	r3,r8
800035c4:	e0 8b 00 3a 	brhi	80003638 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800035c8:	14 9b       	mov	r11,r10
800035ca:	6e 1c       	ld.w	r12,r7[0x4]
800035cc:	f0 1f 00 1d 	mcall	80003640 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800035d0:	c3 45       	brlt	80003638 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800035d2:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800035d4:	ec 09 16 01 	lsr	r9,r6,0x1
800035d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800035dc:	ec 16 00 01 	eorl	r6,0x1
800035e0:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800035e4:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800035e8:	20 83       	sub	r3,8
800035ea:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800035ee:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800035f2:	ef 39 00 09 	ld.ub	r9,r7[9]
800035f6:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800035fa:	ef 39 00 0a 	ld.ub	r9,r7[10]
800035fe:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003602:	0f 89       	ld.ub	r9,r7[0x0]
80003604:	30 1a       	mov	r10,1
80003606:	f4 09 18 00 	cp.b	r9,r10
8000360a:	c0 e0       	breq	80003626 <spi_setupChipReg+0x9a>
8000360c:	c0 a3       	brcs	80003620 <spi_setupChipReg+0x94>
8000360e:	30 2a       	mov	r10,2
80003610:	f4 09 18 00 	cp.b	r9,r10
80003614:	c0 c0       	breq	8000362c <spi_setupChipReg+0xa0>
80003616:	30 3a       	mov	r10,3
80003618:	f4 09 18 00 	cp.b	r9,r10
8000361c:	c0 e1       	brne	80003638 <spi_setupChipReg+0xac>
8000361e:	c0 a8       	rjmp	80003632 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003620:	8b c8       	st.w	r5[0x30],r8
80003622:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003626:	8b d8       	st.w	r5[0x34],r8
80003628:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000362c:	8b e8       	st.w	r5[0x38],r8
8000362e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003632:	8b f8       	st.w	r5[0x3c],r8
80003634:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003638:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000363a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000363e:	00 00       	add	r0,r0
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	34 96       	mov	r6,73

80003644 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003644:	30 18       	mov	r8,1
80003646:	99 08       	st.w	r12[0x0],r8
}
80003648:	5e fc       	retal	r12

8000364a <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000364a:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000364e:	c0 58       	rjmp	80003658 <spi_write+0xe>
		if (!timeout--) {
80003650:	58 08       	cp.w	r8,0
80003652:	c0 21       	brne	80003656 <spi_write+0xc>
80003654:	5e ff       	retal	1
80003656:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003658:	78 49       	ld.w	r9,r12[0x10]
8000365a:	e2 19 00 02 	andl	r9,0x2,COH
8000365e:	cf 90       	breq	80003650 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003660:	5c 7b       	castu.h	r11
80003662:	99 3b       	st.w	r12[0xc],r11
80003664:	5e fd       	retal	0

80003666 <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80003666:	78 4c       	ld.w	r12,r12[0x10]
}
80003668:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000366c:	5e fc       	retal	r12

8000366e <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000366e:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003672:	c0 58       	rjmp	8000367c <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003674:	58 08       	cp.w	r8,0
80003676:	c0 21       	brne	8000367a <spi_read+0xc>
80003678:	5e ff       	retal	1
8000367a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000367c:	78 49       	ld.w	r9,r12[0x10]
8000367e:	e2 19 02 01 	andl	r9,0x201,COH
80003682:	e0 49 02 01 	cp.w	r9,513
80003686:	cf 71       	brne	80003674 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003688:	78 28       	ld.w	r8,r12[0x8]
8000368a:	b6 08       	st.h	r11[0x0],r8
8000368c:	5e fd       	retal	0
8000368e:	d7 03       	nop

80003690 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003690:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003694:	fe c0 a6 94 	sub	r0,pc,-22892

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003698:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000369c:	d5 53       	csrf	0x15
  cp      r0, r1
8000369e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800036a0:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800036a4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800036a6:	c0 72       	brcc	800036b4 <idata_load_loop_end>
  cp      r0, r1
800036a8:	fe c2 9d 10 	sub	r2,pc,-25328

800036ac <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800036ac:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800036ae:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800036b0:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800036b2:	cf d3       	brcs	800036ac <idata_load_loop>

800036b4 <idata_load_loop_end>:
  mov     r2, 0
800036b4:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800036b8:	e0 61 06 78 	mov	r1,1656
  cp      r0, r1
  brlo    udata_clear_loop
800036bc:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800036be:	c0 62       	brcc	800036ca <udata_clear_loop_end>
800036c0:	30 02       	mov	r2,0
800036c2:	30 03       	mov	r3,0

800036c4 <udata_clear_loop>:
800036c4:	a1 22       	st.d	r0++,r2
800036c6:	02 30       	cp.w	r0,r1
800036c8:	cf e3       	brcs	800036c4 <udata_clear_loop>

800036ca <udata_clear_loop_end>:
800036ca:	fe cf 15 de 	sub	pc,pc,5598
800036ce:	d7 03       	nop

800036d0 <sysclk_init>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800036d0:	5e fc       	retal	r12

800036d2 <memcpy>:
800036d2:	58 8a       	cp.w	r10,8
800036d4:	c2 f5       	brlt	80003732 <memcpy+0x60>
800036d6:	f9 eb 10 09 	or	r9,r12,r11
800036da:	e2 19 00 03 	andl	r9,0x3,COH
800036de:	e0 81 00 97 	brne	8000380c <memcpy+0x13a>
800036e2:	e0 4a 00 20 	cp.w	r10,32
800036e6:	c3 b4       	brge	8000375c <memcpy+0x8a>
800036e8:	f4 08 14 02 	asr	r8,r10,0x2
800036ec:	f0 09 11 08 	rsub	r9,r8,8
800036f0:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800036f4:	76 69       	ld.w	r9,r11[0x18]
800036f6:	99 69       	st.w	r12[0x18],r9
800036f8:	76 59       	ld.w	r9,r11[0x14]
800036fa:	99 59       	st.w	r12[0x14],r9
800036fc:	76 49       	ld.w	r9,r11[0x10]
800036fe:	99 49       	st.w	r12[0x10],r9
80003700:	76 39       	ld.w	r9,r11[0xc]
80003702:	99 39       	st.w	r12[0xc],r9
80003704:	76 29       	ld.w	r9,r11[0x8]
80003706:	99 29       	st.w	r12[0x8],r9
80003708:	76 19       	ld.w	r9,r11[0x4]
8000370a:	99 19       	st.w	r12[0x4],r9
8000370c:	76 09       	ld.w	r9,r11[0x0]
8000370e:	99 09       	st.w	r12[0x0],r9
80003710:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003714:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003718:	e0 1a 00 03 	andl	r10,0x3
8000371c:	f4 0a 11 04 	rsub	r10,r10,4
80003720:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003724:	17 a9       	ld.ub	r9,r11[0x2]
80003726:	b0 a9       	st.b	r8[0x2],r9
80003728:	17 99       	ld.ub	r9,r11[0x1]
8000372a:	b0 99       	st.b	r8[0x1],r9
8000372c:	17 89       	ld.ub	r9,r11[0x0]
8000372e:	b0 89       	st.b	r8[0x0],r9
80003730:	5e fc       	retal	r12
80003732:	f4 0a 11 09 	rsub	r10,r10,9
80003736:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000373a:	17 f9       	ld.ub	r9,r11[0x7]
8000373c:	b8 f9       	st.b	r12[0x7],r9
8000373e:	17 e9       	ld.ub	r9,r11[0x6]
80003740:	b8 e9       	st.b	r12[0x6],r9
80003742:	17 d9       	ld.ub	r9,r11[0x5]
80003744:	b8 d9       	st.b	r12[0x5],r9
80003746:	17 c9       	ld.ub	r9,r11[0x4]
80003748:	b8 c9       	st.b	r12[0x4],r9
8000374a:	17 b9       	ld.ub	r9,r11[0x3]
8000374c:	b8 b9       	st.b	r12[0x3],r9
8000374e:	17 a9       	ld.ub	r9,r11[0x2]
80003750:	b8 a9       	st.b	r12[0x2],r9
80003752:	17 99       	ld.ub	r9,r11[0x1]
80003754:	b8 99       	st.b	r12[0x1],r9
80003756:	17 89       	ld.ub	r9,r11[0x0]
80003758:	b8 89       	st.b	r12[0x0],r9
8000375a:	5e fc       	retal	r12
8000375c:	eb cd 40 c0 	pushm	r6-r7,lr
80003760:	18 99       	mov	r9,r12
80003762:	22 0a       	sub	r10,32
80003764:	b7 07       	ld.d	r6,r11++
80003766:	b3 26       	st.d	r9++,r6
80003768:	b7 07       	ld.d	r6,r11++
8000376a:	b3 26       	st.d	r9++,r6
8000376c:	b7 07       	ld.d	r6,r11++
8000376e:	b3 26       	st.d	r9++,r6
80003770:	b7 07       	ld.d	r6,r11++
80003772:	b3 26       	st.d	r9++,r6
80003774:	22 0a       	sub	r10,32
80003776:	cf 74       	brge	80003764 <memcpy+0x92>
80003778:	2f 0a       	sub	r10,-16
8000377a:	c0 65       	brlt	80003786 <memcpy+0xb4>
8000377c:	b7 07       	ld.d	r6,r11++
8000377e:	b3 26       	st.d	r9++,r6
80003780:	b7 07       	ld.d	r6,r11++
80003782:	b3 26       	st.d	r9++,r6
80003784:	21 0a       	sub	r10,16
80003786:	5c 3a       	neg	r10
80003788:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000378c:	d7 03       	nop
8000378e:	d7 03       	nop
80003790:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003794:	f3 66 00 0e 	st.b	r9[14],r6
80003798:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000379c:	f3 66 00 0d 	st.b	r9[13],r6
800037a0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800037a4:	f3 66 00 0c 	st.b	r9[12],r6
800037a8:	f7 36 00 0b 	ld.ub	r6,r11[11]
800037ac:	f3 66 00 0b 	st.b	r9[11],r6
800037b0:	f7 36 00 0a 	ld.ub	r6,r11[10]
800037b4:	f3 66 00 0a 	st.b	r9[10],r6
800037b8:	f7 36 00 09 	ld.ub	r6,r11[9]
800037bc:	f3 66 00 09 	st.b	r9[9],r6
800037c0:	f7 36 00 08 	ld.ub	r6,r11[8]
800037c4:	f3 66 00 08 	st.b	r9[8],r6
800037c8:	f7 36 00 07 	ld.ub	r6,r11[7]
800037cc:	f3 66 00 07 	st.b	r9[7],r6
800037d0:	f7 36 00 06 	ld.ub	r6,r11[6]
800037d4:	f3 66 00 06 	st.b	r9[6],r6
800037d8:	f7 36 00 05 	ld.ub	r6,r11[5]
800037dc:	f3 66 00 05 	st.b	r9[5],r6
800037e0:	f7 36 00 04 	ld.ub	r6,r11[4]
800037e4:	f3 66 00 04 	st.b	r9[4],r6
800037e8:	f7 36 00 03 	ld.ub	r6,r11[3]
800037ec:	f3 66 00 03 	st.b	r9[3],r6
800037f0:	f7 36 00 02 	ld.ub	r6,r11[2]
800037f4:	f3 66 00 02 	st.b	r9[2],r6
800037f8:	f7 36 00 01 	ld.ub	r6,r11[1]
800037fc:	f3 66 00 01 	st.b	r9[1],r6
80003800:	f7 36 00 00 	ld.ub	r6,r11[0]
80003804:	f3 66 00 00 	st.b	r9[0],r6
80003808:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000380c:	20 1a       	sub	r10,1
8000380e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003812:	f8 0a 0b 09 	st.b	r12[r10],r9
80003816:	cf b1       	brne	8000380c <memcpy+0x13a>
80003818:	5e fc       	retal	r12

8000381a <memset>:
8000381a:	18 98       	mov	r8,r12
8000381c:	c0 38       	rjmp	80003822 <memset+0x8>
8000381e:	10 cb       	st.b	r8++,r11
80003820:	20 1a       	sub	r10,1
80003822:	58 0a       	cp.w	r10,0
80003824:	cf d1       	brne	8000381e <memset+0x4>
80003826:	5e fc       	retal	r12

80003828 <_vsprintf_r>:
80003828:	d4 01       	pushm	lr
8000382a:	21 7d       	sub	sp,92
8000382c:	e0 68 ff ff 	mov	r8,65535
80003830:	ea 18 7f ff 	orh	r8,0x7fff
80003834:	50 58       	stdsp	sp[0x14],r8
80003836:	50 28       	stdsp	sp[0x8],r8
80003838:	e0 68 02 08 	mov	r8,520
8000383c:	ba 68       	st.h	sp[0xc],r8
8000383e:	3f f8       	mov	r8,-1
80003840:	50 4b       	stdsp	sp[0x10],r11
80003842:	50 0b       	stdsp	sp[0x0],r11
80003844:	ba 78       	st.h	sp[0xe],r8
80003846:	1a 9b       	mov	r11,sp
80003848:	ca 6d       	rcall	80003b94 <_vfprintf_r>
8000384a:	30 09       	mov	r9,0
8000384c:	40 08       	lddsp	r8,sp[0x0]
8000384e:	b0 89       	st.b	r8[0x0],r9
80003850:	2e 9d       	sub	sp,-92
80003852:	d8 02       	popm	pc

80003854 <vsprintf>:
80003854:	d4 01       	pushm	lr
80003856:	e0 68 01 04 	mov	r8,260
8000385a:	14 99       	mov	r9,r10
8000385c:	16 9a       	mov	r10,r11
8000385e:	18 9b       	mov	r11,r12
80003860:	70 0c       	ld.w	r12,r8[0x0]
80003862:	ce 3f       	rcall	80003828 <_vsprintf_r>
80003864:	d8 02       	popm	pc
80003866:	d7 03       	nop

80003868 <get_arg>:
80003868:	d4 31       	pushm	r0-r7,lr
8000386a:	20 8d       	sub	sp,32
8000386c:	fa c4 ff bc 	sub	r4,sp,-68
80003870:	50 4b       	stdsp	sp[0x10],r11
80003872:	68 2e       	ld.w	lr,r4[0x8]
80003874:	50 58       	stdsp	sp[0x14],r8
80003876:	12 96       	mov	r6,r9
80003878:	7c 0b       	ld.w	r11,lr[0x0]
8000387a:	70 05       	ld.w	r5,r8[0x0]
8000387c:	50 6e       	stdsp	sp[0x18],lr
8000387e:	58 0b       	cp.w	r11,0
80003880:	f4 0b 17 00 	moveq	r11,r10
80003884:	68 03       	ld.w	r3,r4[0x0]
80003886:	68 11       	ld.w	r1,r4[0x4]
80003888:	40 49       	lddsp	r9,sp[0x10]
8000388a:	30 08       	mov	r8,0
8000388c:	c2 69       	rjmp	80003ad8 <get_arg+0x270>
8000388e:	2f fb       	sub	r11,-1
80003890:	32 5c       	mov	r12,37
80003892:	17 8a       	ld.ub	r10,r11[0x0]
80003894:	f8 0a 18 00 	cp.b	r10,r12
80003898:	5f 1e       	srne	lr
8000389a:	f0 0a 18 00 	cp.b	r10,r8
8000389e:	5f 1c       	srne	r12
800038a0:	fd ec 00 0c 	and	r12,lr,r12
800038a4:	f0 0c 18 00 	cp.b	r12,r8
800038a8:	cf 31       	brne	8000388e <get_arg+0x26>
800038aa:	58 0a       	cp.w	r10,0
800038ac:	e0 80 01 23 	breq	80003af2 <get_arg+0x28a>
800038b0:	30 0c       	mov	r12,0
800038b2:	3f fa       	mov	r10,-1
800038b4:	18 90       	mov	r0,r12
800038b6:	50 3a       	stdsp	sp[0xc],r10
800038b8:	18 94       	mov	r4,r12
800038ba:	18 92       	mov	r2,r12
800038bc:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800038c0:	16 97       	mov	r7,r11
800038c2:	50 7c       	stdsp	sp[0x1c],r12
800038c4:	fe cc a1 dc 	sub	r12,pc,-24100
800038c8:	0f 3a       	ld.ub	r10,r7++
800038ca:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800038ce:	40 7c       	lddsp	r12,sp[0x1c]
800038d0:	1c 0c       	add	r12,lr
800038d2:	fe ce a2 b2 	sub	lr,pc,-23886
800038d6:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800038da:	20 1e       	sub	lr,1
800038dc:	50 0e       	stdsp	sp[0x0],lr
800038de:	fe ce a3 2a 	sub	lr,pc,-23766
800038e2:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800038e6:	50 7c       	stdsp	sp[0x1c],r12
800038e8:	40 0c       	lddsp	r12,sp[0x0]
800038ea:	58 7c       	cp.w	r12,7
800038ec:	e0 8b 00 ef 	brhi	80003aca <get_arg+0x262>
800038f0:	fe ce a4 dc 	sub	lr,pc,-23332
800038f4:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800038f8:	36 8b       	mov	r11,104
800038fa:	f6 0a 18 00 	cp.b	r10,r11
800038fe:	e0 80 00 e6 	breq	80003aca <get_arg+0x262>
80003902:	37 1b       	mov	r11,113
80003904:	f6 0a 18 00 	cp.b	r10,r11
80003908:	c0 70       	breq	80003916 <get_arg+0xae>
8000390a:	34 cb       	mov	r11,76
8000390c:	f6 0a 18 00 	cp.b	r10,r11
80003910:	c0 51       	brne	8000391a <get_arg+0xb2>
80003912:	a3 b4       	sbr	r4,0x3
80003914:	cd b8       	rjmp	80003aca <get_arg+0x262>
80003916:	a5 b4       	sbr	r4,0x5
80003918:	cd 98       	rjmp	80003aca <get_arg+0x262>
8000391a:	08 9a       	mov	r10,r4
8000391c:	0e 9b       	mov	r11,r7
8000391e:	a5 aa       	sbr	r10,0x4
80003920:	17 3c       	ld.ub	r12,r11++
80003922:	a5 b4       	sbr	r4,0x5
80003924:	36 ce       	mov	lr,108
80003926:	fc 0c 18 00 	cp.b	r12,lr
8000392a:	e0 80 00 d1 	breq	80003acc <get_arg+0x264>
8000392e:	14 94       	mov	r4,r10
80003930:	cc d8       	rjmp	80003aca <get_arg+0x262>
80003932:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003936:	36 7c       	mov	r12,103
80003938:	f8 0a 18 00 	cp.b	r10,r12
8000393c:	e0 8b 00 27 	brhi	8000398a <get_arg+0x122>
80003940:	36 5b       	mov	r11,101
80003942:	f6 0a 18 00 	cp.b	r10,r11
80003946:	c4 82       	brcc	800039d6 <get_arg+0x16e>
80003948:	34 fb       	mov	r11,79
8000394a:	f6 0a 18 00 	cp.b	r10,r11
8000394e:	c4 80       	breq	800039de <get_arg+0x176>
80003950:	e0 8b 00 0c 	brhi	80003968 <get_arg+0x100>
80003954:	34 5b       	mov	r11,69
80003956:	f6 0a 18 00 	cp.b	r10,r11
8000395a:	c3 e0       	breq	800039d6 <get_arg+0x16e>
8000395c:	34 7b       	mov	r11,71
8000395e:	f6 0a 18 00 	cp.b	r10,r11
80003962:	c3 a0       	breq	800039d6 <get_arg+0x16e>
80003964:	34 4b       	mov	r11,68
80003966:	c0 88       	rjmp	80003976 <get_arg+0x10e>
80003968:	35 8b       	mov	r11,88
8000396a:	f6 0a 18 00 	cp.b	r10,r11
8000396e:	c2 c0       	breq	800039c6 <get_arg+0x15e>
80003970:	e0 8b 00 07 	brhi	8000397e <get_arg+0x116>
80003974:	35 5b       	mov	r11,85
80003976:	f6 0a 18 00 	cp.b	r10,r11
8000397a:	c3 51       	brne	800039e4 <get_arg+0x17c>
8000397c:	c3 18       	rjmp	800039de <get_arg+0x176>
8000397e:	36 3b       	mov	r11,99
80003980:	f6 0a 18 00 	cp.b	r10,r11
80003984:	c2 f0       	breq	800039e2 <get_arg+0x17a>
80003986:	36 4b       	mov	r11,100
80003988:	c0 e8       	rjmp	800039a4 <get_arg+0x13c>
8000398a:	37 0b       	mov	r11,112
8000398c:	f6 0a 18 00 	cp.b	r10,r11
80003990:	c2 50       	breq	800039da <get_arg+0x172>
80003992:	e0 8b 00 0d 	brhi	800039ac <get_arg+0x144>
80003996:	36 eb       	mov	r11,110
80003998:	f6 0a 18 00 	cp.b	r10,r11
8000399c:	c1 f0       	breq	800039da <get_arg+0x172>
8000399e:	e0 8b 00 14 	brhi	800039c6 <get_arg+0x15e>
800039a2:	36 9b       	mov	r11,105
800039a4:	f6 0a 18 00 	cp.b	r10,r11
800039a8:	c1 e1       	brne	800039e4 <get_arg+0x17c>
800039aa:	c0 e8       	rjmp	800039c6 <get_arg+0x15e>
800039ac:	37 5b       	mov	r11,117
800039ae:	f6 0a 18 00 	cp.b	r10,r11
800039b2:	c0 a0       	breq	800039c6 <get_arg+0x15e>
800039b4:	37 8b       	mov	r11,120
800039b6:	f6 0a 18 00 	cp.b	r10,r11
800039ba:	c0 60       	breq	800039c6 <get_arg+0x15e>
800039bc:	37 3b       	mov	r11,115
800039be:	f6 0a 18 00 	cp.b	r10,r11
800039c2:	c1 11       	brne	800039e4 <get_arg+0x17c>
800039c4:	c0 b8       	rjmp	800039da <get_arg+0x172>
800039c6:	ed b4 00 04 	bld	r4,0x4
800039ca:	c0 a0       	breq	800039de <get_arg+0x176>
800039cc:	ed b4 00 05 	bld	r4,0x5
800039d0:	c0 91       	brne	800039e2 <get_arg+0x17a>
800039d2:	30 20       	mov	r0,2
800039d4:	c0 88       	rjmp	800039e4 <get_arg+0x17c>
800039d6:	30 40       	mov	r0,4
800039d8:	c0 68       	rjmp	800039e4 <get_arg+0x17c>
800039da:	30 30       	mov	r0,3
800039dc:	c0 48       	rjmp	800039e4 <get_arg+0x17c>
800039de:	30 10       	mov	r0,1
800039e0:	c0 28       	rjmp	800039e4 <get_arg+0x17c>
800039e2:	30 00       	mov	r0,0
800039e4:	40 3b       	lddsp	r11,sp[0xc]
800039e6:	5b fb       	cp.w	r11,-1
800039e8:	c0 40       	breq	800039f0 <get_arg+0x188>
800039ea:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800039ee:	c6 e8       	rjmp	80003aca <get_arg+0x262>
800039f0:	58 60       	cp.w	r0,6
800039f2:	e0 8b 00 6c 	brhi	80003aca <get_arg+0x262>
800039f6:	6c 0a       	ld.w	r10,r6[0x0]
800039f8:	ea cc ff ff 	sub	r12,r5,-1
800039fc:	fe ce a5 c8 	sub	lr,pc,-23096
80003a00:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003a04:	f4 cb ff f8 	sub	r11,r10,-8
80003a08:	8d 0b       	st.w	r6[0x0],r11
80003a0a:	f4 ea 00 00 	ld.d	r10,r10[0]
80003a0e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003a12:	c0 f8       	rjmp	80003a30 <get_arg+0x1c8>
80003a14:	f4 cb ff fc 	sub	r11,r10,-4
80003a18:	8d 0b       	st.w	r6[0x0],r11
80003a1a:	74 0a       	ld.w	r10,r10[0x0]
80003a1c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003a20:	c0 88       	rjmp	80003a30 <get_arg+0x1c8>
80003a22:	f4 cb ff f8 	sub	r11,r10,-8
80003a26:	8d 0b       	st.w	r6[0x0],r11
80003a28:	f4 ea 00 00 	ld.d	r10,r10[0]
80003a2c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003a30:	0e 9b       	mov	r11,r7
80003a32:	18 95       	mov	r5,r12
80003a34:	c4 c8       	rjmp	80003acc <get_arg+0x264>
80003a36:	62 0a       	ld.w	r10,r1[0x0]
80003a38:	5b fa       	cp.w	r10,-1
80003a3a:	c0 a1       	brne	80003a4e <get_arg+0x1e6>
80003a3c:	50 19       	stdsp	sp[0x4],r9
80003a3e:	50 28       	stdsp	sp[0x8],r8
80003a40:	e0 6a 00 80 	mov	r10,128
80003a44:	30 0b       	mov	r11,0
80003a46:	02 9c       	mov	r12,r1
80003a48:	ce 9e       	rcall	8000381a <memset>
80003a4a:	40 28       	lddsp	r8,sp[0x8]
80003a4c:	40 19       	lddsp	r9,sp[0x4]
80003a4e:	e4 cc 00 01 	sub	r12,r2,1
80003a52:	0e 9b       	mov	r11,r7
80003a54:	50 3c       	stdsp	sp[0xc],r12
80003a56:	f2 0c 0c 49 	max	r9,r9,r12
80003a5a:	c3 98       	rjmp	80003acc <get_arg+0x264>
80003a5c:	62 0a       	ld.w	r10,r1[0x0]
80003a5e:	5b fa       	cp.w	r10,-1
80003a60:	c0 a1       	brne	80003a74 <get_arg+0x20c>
80003a62:	50 19       	stdsp	sp[0x4],r9
80003a64:	50 28       	stdsp	sp[0x8],r8
80003a66:	e0 6a 00 80 	mov	r10,128
80003a6a:	30 0b       	mov	r11,0
80003a6c:	02 9c       	mov	r12,r1
80003a6e:	cd 6e       	rcall	8000381a <memset>
80003a70:	40 28       	lddsp	r8,sp[0x8]
80003a72:	40 19       	lddsp	r9,sp[0x4]
80003a74:	20 12       	sub	r2,1
80003a76:	30 0a       	mov	r10,0
80003a78:	0e 9b       	mov	r11,r7
80003a7a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003a7e:	f2 02 0c 49 	max	r9,r9,r2
80003a82:	c2 58       	rjmp	80003acc <get_arg+0x264>
80003a84:	16 97       	mov	r7,r11
80003a86:	6c 0a       	ld.w	r10,r6[0x0]
80003a88:	f4 cb ff fc 	sub	r11,r10,-4
80003a8c:	8d 0b       	st.w	r6[0x0],r11
80003a8e:	74 0a       	ld.w	r10,r10[0x0]
80003a90:	0e 9b       	mov	r11,r7
80003a92:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003a96:	2f f5       	sub	r5,-1
80003a98:	c1 a8       	rjmp	80003acc <get_arg+0x264>
80003a9a:	f4 c2 00 30 	sub	r2,r10,48
80003a9e:	c0 68       	rjmp	80003aaa <get_arg+0x242>
80003aa0:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003aa4:	2f f7       	sub	r7,-1
80003aa6:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003aaa:	0f 8a       	ld.ub	r10,r7[0x0]
80003aac:	58 0a       	cp.w	r10,0
80003aae:	c0 e0       	breq	80003aca <get_arg+0x262>
80003ab0:	23 0a       	sub	r10,48
80003ab2:	58 9a       	cp.w	r10,9
80003ab4:	fe 98 ff f6 	brls	80003aa0 <get_arg+0x238>
80003ab8:	c0 98       	rjmp	80003aca <get_arg+0x262>
80003aba:	2f f7       	sub	r7,-1
80003abc:	0f 8a       	ld.ub	r10,r7[0x0]
80003abe:	58 0a       	cp.w	r10,0
80003ac0:	c0 50       	breq	80003aca <get_arg+0x262>
80003ac2:	23 0a       	sub	r10,48
80003ac4:	58 9a       	cp.w	r10,9
80003ac6:	fe 98 ff fa 	brls	80003aba <get_arg+0x252>
80003aca:	0e 9b       	mov	r11,r7
80003acc:	40 7c       	lddsp	r12,sp[0x1c]
80003ace:	30 ba       	mov	r10,11
80003ad0:	f4 0c 18 00 	cp.b	r12,r10
80003ad4:	fe 91 fe f4 	brne	800038bc <get_arg+0x54>
80003ad8:	40 42       	lddsp	r2,sp[0x10]
80003ada:	17 8c       	ld.ub	r12,r11[0x0]
80003adc:	0a 32       	cp.w	r2,r5
80003ade:	5f 4a       	srge	r10
80003ae0:	f0 0c 18 00 	cp.b	r12,r8
80003ae4:	5f 1c       	srne	r12
80003ae6:	f9 ea 00 0a 	and	r10,r12,r10
80003aea:	f0 0a 18 00 	cp.b	r10,r8
80003aee:	fe 91 fe d1 	brne	80003890 <get_arg+0x28>
80003af2:	30 08       	mov	r8,0
80003af4:	40 4e       	lddsp	lr,sp[0x10]
80003af6:	17 8a       	ld.ub	r10,r11[0x0]
80003af8:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003afc:	f0 0a 18 00 	cp.b	r10,r8
80003b00:	fc 09 17 10 	movne	r9,lr
80003b04:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003b08:	06 9e       	mov	lr,r3
80003b0a:	c2 a8       	rjmp	80003b5e <get_arg+0x2f6>
80003b0c:	62 0a       	ld.w	r10,r1[0x0]
80003b0e:	58 3a       	cp.w	r10,3
80003b10:	c1 e0       	breq	80003b4c <get_arg+0x2e4>
80003b12:	e0 89 00 07 	brgt	80003b20 <get_arg+0x2b8>
80003b16:	58 1a       	cp.w	r10,1
80003b18:	c1 a0       	breq	80003b4c <get_arg+0x2e4>
80003b1a:	58 2a       	cp.w	r10,2
80003b1c:	c1 81       	brne	80003b4c <get_arg+0x2e4>
80003b1e:	c0 58       	rjmp	80003b28 <get_arg+0x2c0>
80003b20:	58 5a       	cp.w	r10,5
80003b22:	c0 c0       	breq	80003b3a <get_arg+0x2d2>
80003b24:	c0 b5       	brlt	80003b3a <get_arg+0x2d2>
80003b26:	c1 38       	rjmp	80003b4c <get_arg+0x2e4>
80003b28:	6c 0a       	ld.w	r10,r6[0x0]
80003b2a:	f4 cc ff f8 	sub	r12,r10,-8
80003b2e:	8d 0c       	st.w	r6[0x0],r12
80003b30:	f4 e2 00 00 	ld.d	r2,r10[0]
80003b34:	f0 e3 00 00 	st.d	r8[0],r2
80003b38:	c1 08       	rjmp	80003b58 <get_arg+0x2f0>
80003b3a:	6c 0a       	ld.w	r10,r6[0x0]
80003b3c:	f4 cc ff f8 	sub	r12,r10,-8
80003b40:	8d 0c       	st.w	r6[0x0],r12
80003b42:	f4 e2 00 00 	ld.d	r2,r10[0]
80003b46:	f0 e3 00 00 	st.d	r8[0],r2
80003b4a:	c0 78       	rjmp	80003b58 <get_arg+0x2f0>
80003b4c:	6c 0a       	ld.w	r10,r6[0x0]
80003b4e:	f4 cc ff fc 	sub	r12,r10,-4
80003b52:	8d 0c       	st.w	r6[0x0],r12
80003b54:	74 0a       	ld.w	r10,r10[0x0]
80003b56:	91 0a       	st.w	r8[0x0],r10
80003b58:	2f f5       	sub	r5,-1
80003b5a:	2f 88       	sub	r8,-8
80003b5c:	2f c1       	sub	r1,-4
80003b5e:	12 35       	cp.w	r5,r9
80003b60:	fe 9a ff d6 	brle	80003b0c <get_arg+0x2a4>
80003b64:	1c 93       	mov	r3,lr
80003b66:	40 52       	lddsp	r2,sp[0x14]
80003b68:	40 6e       	lddsp	lr,sp[0x18]
80003b6a:	85 05       	st.w	r2[0x0],r5
80003b6c:	9d 0b       	st.w	lr[0x0],r11
80003b6e:	40 4b       	lddsp	r11,sp[0x10]
80003b70:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003b74:	2f 8d       	sub	sp,-32
80003b76:	d8 32       	popm	r0-r7,pc

80003b78 <__sprint_r>:
80003b78:	d4 21       	pushm	r4-r7,lr
80003b7a:	14 97       	mov	r7,r10
80003b7c:	74 28       	ld.w	r8,r10[0x8]
80003b7e:	58 08       	cp.w	r8,0
80003b80:	c0 41       	brne	80003b88 <__sprint_r+0x10>
80003b82:	95 18       	st.w	r10[0x4],r8
80003b84:	10 9c       	mov	r12,r8
80003b86:	d8 22       	popm	r4-r7,pc
80003b88:	e0 a0 18 b4 	rcall	80006cf0 <__sfvwrite_r>
80003b8c:	30 08       	mov	r8,0
80003b8e:	8f 18       	st.w	r7[0x4],r8
80003b90:	8f 28       	st.w	r7[0x8],r8
80003b92:	d8 22       	popm	r4-r7,pc

80003b94 <_vfprintf_r>:
80003b94:	d4 31       	pushm	r0-r7,lr
80003b96:	fa cd 06 bc 	sub	sp,sp,1724
80003b9a:	51 09       	stdsp	sp[0x40],r9
80003b9c:	16 91       	mov	r1,r11
80003b9e:	14 97       	mov	r7,r10
80003ba0:	18 95       	mov	r5,r12
80003ba2:	e0 a0 1a 1d 	rcall	80006fdc <_localeconv_r>
80003ba6:	78 0c       	ld.w	r12,r12[0x0]
80003ba8:	50 cc       	stdsp	sp[0x30],r12
80003baa:	58 05       	cp.w	r5,0
80003bac:	c0 70       	breq	80003bba <_vfprintf_r+0x26>
80003bae:	6a 68       	ld.w	r8,r5[0x18]
80003bb0:	58 08       	cp.w	r8,0
80003bb2:	c0 41       	brne	80003bba <_vfprintf_r+0x26>
80003bb4:	0a 9c       	mov	r12,r5
80003bb6:	e0 a0 17 3d 	rcall	80006a30 <__sinit>
80003bba:	fe c8 a3 c2 	sub	r8,pc,-23614
80003bbe:	10 31       	cp.w	r1,r8
80003bc0:	c0 31       	brne	80003bc6 <_vfprintf_r+0x32>
80003bc2:	6a 01       	ld.w	r1,r5[0x0]
80003bc4:	c0 c8       	rjmp	80003bdc <_vfprintf_r+0x48>
80003bc6:	fe c8 a3 ae 	sub	r8,pc,-23634
80003bca:	10 31       	cp.w	r1,r8
80003bcc:	c0 31       	brne	80003bd2 <_vfprintf_r+0x3e>
80003bce:	6a 11       	ld.w	r1,r5[0x4]
80003bd0:	c0 68       	rjmp	80003bdc <_vfprintf_r+0x48>
80003bd2:	fe c8 a3 9a 	sub	r8,pc,-23654
80003bd6:	10 31       	cp.w	r1,r8
80003bd8:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003bdc:	82 68       	ld.sh	r8,r1[0xc]
80003bde:	ed b8 00 03 	bld	r8,0x3
80003be2:	c0 41       	brne	80003bea <_vfprintf_r+0x56>
80003be4:	62 48       	ld.w	r8,r1[0x10]
80003be6:	58 08       	cp.w	r8,0
80003be8:	c0 71       	brne	80003bf6 <_vfprintf_r+0x62>
80003bea:	02 9b       	mov	r11,r1
80003bec:	0a 9c       	mov	r12,r5
80003bee:	e0 a0 0f 5d 	rcall	80005aa8 <__swsetup_r>
80003bf2:	e0 81 0f 54 	brne	80005a9a <_vfprintf_r+0x1f06>
80003bf6:	82 68       	ld.sh	r8,r1[0xc]
80003bf8:	10 99       	mov	r9,r8
80003bfa:	e2 19 00 1a 	andl	r9,0x1a,COH
80003bfe:	58 a9       	cp.w	r9,10
80003c00:	c3 c1       	brne	80003c78 <_vfprintf_r+0xe4>
80003c02:	82 79       	ld.sh	r9,r1[0xe]
80003c04:	30 0a       	mov	r10,0
80003c06:	f4 09 19 00 	cp.h	r9,r10
80003c0a:	c3 75       	brlt	80003c78 <_vfprintf_r+0xe4>
80003c0c:	a1 d8       	cbr	r8,0x1
80003c0e:	fb 58 05 d0 	st.h	sp[1488],r8
80003c12:	62 88       	ld.w	r8,r1[0x20]
80003c14:	fb 48 05 e4 	st.w	sp[1508],r8
80003c18:	62 a8       	ld.w	r8,r1[0x28]
80003c1a:	fb 48 05 ec 	st.w	sp[1516],r8
80003c1e:	fa c8 ff bc 	sub	r8,sp,-68
80003c22:	fb 48 05 d4 	st.w	sp[1492],r8
80003c26:	fb 48 05 c4 	st.w	sp[1476],r8
80003c2a:	e0 68 04 00 	mov	r8,1024
80003c2e:	fb 48 05 d8 	st.w	sp[1496],r8
80003c32:	fb 48 05 cc 	st.w	sp[1484],r8
80003c36:	30 08       	mov	r8,0
80003c38:	fb 59 05 d2 	st.h	sp[1490],r9
80003c3c:	0e 9a       	mov	r10,r7
80003c3e:	41 09       	lddsp	r9,sp[0x40]
80003c40:	fa c7 fa 3c 	sub	r7,sp,-1476
80003c44:	fb 48 05 dc 	st.w	sp[1500],r8
80003c48:	0a 9c       	mov	r12,r5
80003c4a:	0e 9b       	mov	r11,r7
80003c4c:	ca 4f       	rcall	80003b94 <_vfprintf_r>
80003c4e:	50 bc       	stdsp	sp[0x2c],r12
80003c50:	c0 95       	brlt	80003c62 <_vfprintf_r+0xce>
80003c52:	0e 9b       	mov	r11,r7
80003c54:	0a 9c       	mov	r12,r5
80003c56:	e0 a0 16 15 	rcall	80006880 <_fflush_r>
80003c5a:	40 be       	lddsp	lr,sp[0x2c]
80003c5c:	f9 be 01 ff 	movne	lr,-1
80003c60:	50 be       	stdsp	sp[0x2c],lr
80003c62:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003c66:	ed b8 00 06 	bld	r8,0x6
80003c6a:	e0 81 0f 1a 	brne	80005a9e <_vfprintf_r+0x1f0a>
80003c6e:	82 68       	ld.sh	r8,r1[0xc]
80003c70:	a7 a8       	sbr	r8,0x6
80003c72:	a2 68       	st.h	r1[0xc],r8
80003c74:	e0 8f 0f 15 	bral	80005a9e <_vfprintf_r+0x1f0a>
80003c78:	30 08       	mov	r8,0
80003c7a:	fb 48 06 b4 	st.w	sp[1716],r8
80003c7e:	fb 48 06 90 	st.w	sp[1680],r8
80003c82:	fb 48 06 8c 	st.w	sp[1676],r8
80003c86:	fb 48 06 b0 	st.w	sp[1712],r8
80003c8a:	30 08       	mov	r8,0
80003c8c:	30 09       	mov	r9,0
80003c8e:	50 a7       	stdsp	sp[0x28],r7
80003c90:	50 78       	stdsp	sp[0x1c],r8
80003c92:	fa c3 f9 e0 	sub	r3,sp,-1568
80003c96:	3f f8       	mov	r8,-1
80003c98:	50 59       	stdsp	sp[0x14],r9
80003c9a:	fb 43 06 88 	st.w	sp[1672],r3
80003c9e:	fb 48 05 44 	st.w	sp[1348],r8
80003ca2:	12 9c       	mov	r12,r9
80003ca4:	50 69       	stdsp	sp[0x18],r9
80003ca6:	50 d9       	stdsp	sp[0x34],r9
80003ca8:	50 e9       	stdsp	sp[0x38],r9
80003caa:	50 b9       	stdsp	sp[0x2c],r9
80003cac:	12 97       	mov	r7,r9
80003cae:	0a 94       	mov	r4,r5
80003cb0:	40 a2       	lddsp	r2,sp[0x28]
80003cb2:	32 5a       	mov	r10,37
80003cb4:	30 08       	mov	r8,0
80003cb6:	c0 28       	rjmp	80003cba <_vfprintf_r+0x126>
80003cb8:	2f f2       	sub	r2,-1
80003cba:	05 89       	ld.ub	r9,r2[0x0]
80003cbc:	f0 09 18 00 	cp.b	r9,r8
80003cc0:	5f 1b       	srne	r11
80003cc2:	f4 09 18 00 	cp.b	r9,r10
80003cc6:	5f 19       	srne	r9
80003cc8:	f3 eb 00 0b 	and	r11,r9,r11
80003ccc:	f0 0b 18 00 	cp.b	r11,r8
80003cd0:	cf 41       	brne	80003cb8 <_vfprintf_r+0x124>
80003cd2:	40 ab       	lddsp	r11,sp[0x28]
80003cd4:	e4 0b 01 06 	sub	r6,r2,r11
80003cd8:	c1 e0       	breq	80003d14 <_vfprintf_r+0x180>
80003cda:	fa f8 06 90 	ld.w	r8,sp[1680]
80003cde:	0c 08       	add	r8,r6
80003ce0:	87 0b       	st.w	r3[0x0],r11
80003ce2:	fb 48 06 90 	st.w	sp[1680],r8
80003ce6:	87 16       	st.w	r3[0x4],r6
80003ce8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003cec:	2f f8       	sub	r8,-1
80003cee:	fb 48 06 8c 	st.w	sp[1676],r8
80003cf2:	58 78       	cp.w	r8,7
80003cf4:	e0 89 00 04 	brgt	80003cfc <_vfprintf_r+0x168>
80003cf8:	2f 83       	sub	r3,-8
80003cfa:	c0 a8       	rjmp	80003d0e <_vfprintf_r+0x17a>
80003cfc:	fa ca f9 78 	sub	r10,sp,-1672
80003d00:	02 9b       	mov	r11,r1
80003d02:	08 9c       	mov	r12,r4
80003d04:	c3 af       	rcall	80003b78 <__sprint_r>
80003d06:	e0 81 0e c6 	brne	80005a92 <_vfprintf_r+0x1efe>
80003d0a:	fa c3 f9 e0 	sub	r3,sp,-1568
80003d0e:	40 ba       	lddsp	r10,sp[0x2c]
80003d10:	0c 0a       	add	r10,r6
80003d12:	50 ba       	stdsp	sp[0x2c],r10
80003d14:	05 89       	ld.ub	r9,r2[0x0]
80003d16:	30 08       	mov	r8,0
80003d18:	f0 09 18 00 	cp.b	r9,r8
80003d1c:	e0 80 0e aa 	breq	80005a70 <_vfprintf_r+0x1edc>
80003d20:	30 09       	mov	r9,0
80003d22:	fb 68 06 bb 	st.b	sp[1723],r8
80003d26:	0e 96       	mov	r6,r7
80003d28:	e4 c8 ff ff 	sub	r8,r2,-1
80003d2c:	3f fe       	mov	lr,-1
80003d2e:	50 93       	stdsp	sp[0x24],r3
80003d30:	50 41       	stdsp	sp[0x10],r1
80003d32:	0e 93       	mov	r3,r7
80003d34:	04 91       	mov	r1,r2
80003d36:	50 89       	stdsp	sp[0x20],r9
80003d38:	50 a8       	stdsp	sp[0x28],r8
80003d3a:	50 2e       	stdsp	sp[0x8],lr
80003d3c:	50 39       	stdsp	sp[0xc],r9
80003d3e:	12 95       	mov	r5,r9
80003d40:	12 90       	mov	r0,r9
80003d42:	10 97       	mov	r7,r8
80003d44:	08 92       	mov	r2,r4
80003d46:	c0 78       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003d48:	3f fc       	mov	r12,-1
80003d4a:	08 97       	mov	r7,r4
80003d4c:	50 2c       	stdsp	sp[0x8],r12
80003d4e:	c0 38       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003d50:	30 0b       	mov	r11,0
80003d52:	50 3b       	stdsp	sp[0xc],r11
80003d54:	0f 38       	ld.ub	r8,r7++
80003d56:	c0 28       	rjmp	80003d5a <_vfprintf_r+0x1c6>
80003d58:	12 90       	mov	r0,r9
80003d5a:	f0 c9 00 20 	sub	r9,r8,32
80003d5e:	e0 49 00 58 	cp.w	r9,88
80003d62:	e0 8b 0a 30 	brhi	800051c2 <_vfprintf_r+0x162e>
80003d66:	fe ca a9 16 	sub	r10,pc,-22250
80003d6a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003d6e:	50 a7       	stdsp	sp[0x28],r7
80003d70:	50 80       	stdsp	sp[0x20],r0
80003d72:	0c 97       	mov	r7,r6
80003d74:	04 94       	mov	r4,r2
80003d76:	06 96       	mov	r6,r3
80003d78:	02 92       	mov	r2,r1
80003d7a:	fe c9 a6 ee 	sub	r9,pc,-22802
80003d7e:	40 93       	lddsp	r3,sp[0x24]
80003d80:	10 90       	mov	r0,r8
80003d82:	40 41       	lddsp	r1,sp[0x10]
80003d84:	50 d9       	stdsp	sp[0x34],r9
80003d86:	e0 8f 08 8e 	bral	80004ea2 <_vfprintf_r+0x130e>
80003d8a:	30 08       	mov	r8,0
80003d8c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003d90:	f0 09 18 00 	cp.b	r9,r8
80003d94:	ce 01       	brne	80003d54 <_vfprintf_r+0x1c0>
80003d96:	32 08       	mov	r8,32
80003d98:	c6 e8       	rjmp	80003e74 <_vfprintf_r+0x2e0>
80003d9a:	a1 a5       	sbr	r5,0x0
80003d9c:	cd cb       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003d9e:	0f 89       	ld.ub	r9,r7[0x0]
80003da0:	f2 c8 00 30 	sub	r8,r9,48
80003da4:	58 98       	cp.w	r8,9
80003da6:	e0 8b 00 1d 	brhi	80003de0 <_vfprintf_r+0x24c>
80003daa:	ee c8 ff ff 	sub	r8,r7,-1
80003dae:	30 0b       	mov	r11,0
80003db0:	23 09       	sub	r9,48
80003db2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003db6:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003dba:	11 39       	ld.ub	r9,r8++
80003dbc:	f2 ca 00 30 	sub	r10,r9,48
80003dc0:	58 9a       	cp.w	r10,9
80003dc2:	fe 98 ff f7 	brls	80003db0 <_vfprintf_r+0x21c>
80003dc6:	e0 49 00 24 	cp.w	r9,36
80003dca:	cc 31       	brne	80003d50 <_vfprintf_r+0x1bc>
80003dcc:	e0 4b 00 20 	cp.w	r11,32
80003dd0:	e0 89 0e 60 	brgt	80005a90 <_vfprintf_r+0x1efc>
80003dd4:	20 1b       	sub	r11,1
80003dd6:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003dda:	12 3b       	cp.w	r11,r9
80003ddc:	c0 95       	brlt	80003dee <_vfprintf_r+0x25a>
80003dde:	c1 08       	rjmp	80003dfe <_vfprintf_r+0x26a>
80003de0:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003de4:	ec ca ff ff 	sub	r10,r6,-1
80003de8:	12 36       	cp.w	r6,r9
80003dea:	c1 f5       	brlt	80003e28 <_vfprintf_r+0x294>
80003dec:	c2 68       	rjmp	80003e38 <_vfprintf_r+0x2a4>
80003dee:	fa ce f9 44 	sub	lr,sp,-1724
80003df2:	10 97       	mov	r7,r8
80003df4:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003df8:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003dfc:	c3 58       	rjmp	80003e66 <_vfprintf_r+0x2d2>
80003dfe:	10 97       	mov	r7,r8
80003e00:	fa c8 f9 50 	sub	r8,sp,-1712
80003e04:	1a d8       	st.w	--sp,r8
80003e06:	fa c8 fa b8 	sub	r8,sp,-1352
80003e0a:	1a d8       	st.w	--sp,r8
80003e0c:	fa c8 fb b4 	sub	r8,sp,-1100
80003e10:	02 9a       	mov	r10,r1
80003e12:	1a d8       	st.w	--sp,r8
80003e14:	04 9c       	mov	r12,r2
80003e16:	fa c8 f9 40 	sub	r8,sp,-1728
80003e1a:	fa c9 ff b4 	sub	r9,sp,-76
80003e1e:	fe b0 fd 25 	rcall	80003868 <get_arg>
80003e22:	2f dd       	sub	sp,-12
80003e24:	78 00       	ld.w	r0,r12[0x0]
80003e26:	c2 08       	rjmp	80003e66 <_vfprintf_r+0x2d2>
80003e28:	fa cc f9 44 	sub	r12,sp,-1724
80003e2c:	14 96       	mov	r6,r10
80003e2e:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003e32:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003e36:	c1 88       	rjmp	80003e66 <_vfprintf_r+0x2d2>
80003e38:	41 08       	lddsp	r8,sp[0x40]
80003e3a:	59 f9       	cp.w	r9,31
80003e3c:	e0 89 00 11 	brgt	80003e5e <_vfprintf_r+0x2ca>
80003e40:	f0 cb ff fc 	sub	r11,r8,-4
80003e44:	51 0b       	stdsp	sp[0x40],r11
80003e46:	70 00       	ld.w	r0,r8[0x0]
80003e48:	fa cb f9 44 	sub	r11,sp,-1724
80003e4c:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003e50:	f1 40 fd 88 	st.w	r8[-632],r0
80003e54:	2f f9       	sub	r9,-1
80003e56:	14 96       	mov	r6,r10
80003e58:	fb 49 06 b4 	st.w	sp[1716],r9
80003e5c:	c0 58       	rjmp	80003e66 <_vfprintf_r+0x2d2>
80003e5e:	70 00       	ld.w	r0,r8[0x0]
80003e60:	14 96       	mov	r6,r10
80003e62:	2f c8       	sub	r8,-4
80003e64:	51 08       	stdsp	sp[0x40],r8
80003e66:	58 00       	cp.w	r0,0
80003e68:	fe 94 ff 76 	brge	80003d54 <_vfprintf_r+0x1c0>
80003e6c:	5c 30       	neg	r0
80003e6e:	a3 a5       	sbr	r5,0x2
80003e70:	c7 2b       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003e72:	32 b8       	mov	r8,43
80003e74:	fb 68 06 bb 	st.b	sp[1723],r8
80003e78:	c6 eb       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003e7a:	0f 38       	ld.ub	r8,r7++
80003e7c:	e0 48 00 2a 	cp.w	r8,42
80003e80:	c0 30       	breq	80003e86 <_vfprintf_r+0x2f2>
80003e82:	30 09       	mov	r9,0
80003e84:	c7 98       	rjmp	80003f76 <_vfprintf_r+0x3e2>
80003e86:	0f 88       	ld.ub	r8,r7[0x0]
80003e88:	f0 c9 00 30 	sub	r9,r8,48
80003e8c:	58 99       	cp.w	r9,9
80003e8e:	e0 8b 00 1f 	brhi	80003ecc <_vfprintf_r+0x338>
80003e92:	ee c4 ff ff 	sub	r4,r7,-1
80003e96:	30 0b       	mov	r11,0
80003e98:	23 08       	sub	r8,48
80003e9a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003e9e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003ea2:	09 38       	ld.ub	r8,r4++
80003ea4:	f0 c9 00 30 	sub	r9,r8,48
80003ea8:	58 99       	cp.w	r9,9
80003eaa:	fe 98 ff f7 	brls	80003e98 <_vfprintf_r+0x304>
80003eae:	e0 48 00 24 	cp.w	r8,36
80003eb2:	fe 91 ff 4f 	brne	80003d50 <_vfprintf_r+0x1bc>
80003eb6:	e0 4b 00 20 	cp.w	r11,32
80003eba:	e0 89 0d eb 	brgt	80005a90 <_vfprintf_r+0x1efc>
80003ebe:	20 1b       	sub	r11,1
80003ec0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ec4:	10 3b       	cp.w	r11,r8
80003ec6:	c0 a5       	brlt	80003eda <_vfprintf_r+0x346>
80003ec8:	c1 18       	rjmp	80003eea <_vfprintf_r+0x356>
80003eca:	d7 03       	nop
80003ecc:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003ed0:	ec c9 ff ff 	sub	r9,r6,-1
80003ed4:	14 36       	cp.w	r6,r10
80003ed6:	c1 f5       	brlt	80003f14 <_vfprintf_r+0x380>
80003ed8:	c2 88       	rjmp	80003f28 <_vfprintf_r+0x394>
80003eda:	fa ca f9 44 	sub	r10,sp,-1724
80003ede:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003ee2:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003ee6:	50 2b       	stdsp	sp[0x8],r11
80003ee8:	c3 c8       	rjmp	80003f60 <_vfprintf_r+0x3cc>
80003eea:	fa c8 f9 50 	sub	r8,sp,-1712
80003eee:	1a d8       	st.w	--sp,r8
80003ef0:	fa c8 fa b8 	sub	r8,sp,-1352
80003ef4:	1a d8       	st.w	--sp,r8
80003ef6:	fa c8 fb b4 	sub	r8,sp,-1100
80003efa:	02 9a       	mov	r10,r1
80003efc:	1a d8       	st.w	--sp,r8
80003efe:	04 9c       	mov	r12,r2
80003f00:	fa c8 f9 40 	sub	r8,sp,-1728
80003f04:	fa c9 ff b4 	sub	r9,sp,-76
80003f08:	fe b0 fc b0 	rcall	80003868 <get_arg>
80003f0c:	2f dd       	sub	sp,-12
80003f0e:	78 0c       	ld.w	r12,r12[0x0]
80003f10:	50 2c       	stdsp	sp[0x8],r12
80003f12:	c2 78       	rjmp	80003f60 <_vfprintf_r+0x3cc>
80003f14:	12 96       	mov	r6,r9
80003f16:	0e 94       	mov	r4,r7
80003f18:	fa c9 f9 44 	sub	r9,sp,-1724
80003f1c:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003f20:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003f24:	50 28       	stdsp	sp[0x8],r8
80003f26:	c1 d8       	rjmp	80003f60 <_vfprintf_r+0x3cc>
80003f28:	41 08       	lddsp	r8,sp[0x40]
80003f2a:	59 fa       	cp.w	r10,31
80003f2c:	e0 89 00 14 	brgt	80003f54 <_vfprintf_r+0x3c0>
80003f30:	f0 cb ff fc 	sub	r11,r8,-4
80003f34:	70 08       	ld.w	r8,r8[0x0]
80003f36:	51 0b       	stdsp	sp[0x40],r11
80003f38:	50 28       	stdsp	sp[0x8],r8
80003f3a:	fa c6 f9 44 	sub	r6,sp,-1724
80003f3e:	40 2e       	lddsp	lr,sp[0x8]
80003f40:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003f44:	f1 4e fd 88 	st.w	r8[-632],lr
80003f48:	2f fa       	sub	r10,-1
80003f4a:	0e 94       	mov	r4,r7
80003f4c:	fb 4a 06 b4 	st.w	sp[1716],r10
80003f50:	12 96       	mov	r6,r9
80003f52:	c0 78       	rjmp	80003f60 <_vfprintf_r+0x3cc>
80003f54:	70 0c       	ld.w	r12,r8[0x0]
80003f56:	0e 94       	mov	r4,r7
80003f58:	2f c8       	sub	r8,-4
80003f5a:	50 2c       	stdsp	sp[0x8],r12
80003f5c:	12 96       	mov	r6,r9
80003f5e:	51 08       	stdsp	sp[0x40],r8
80003f60:	40 2b       	lddsp	r11,sp[0x8]
80003f62:	58 0b       	cp.w	r11,0
80003f64:	fe 95 fe f2 	brlt	80003d48 <_vfprintf_r+0x1b4>
80003f68:	08 97       	mov	r7,r4
80003f6a:	cf 5a       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003f6c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003f70:	0f 38       	ld.ub	r8,r7++
80003f72:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003f76:	f0 ca 00 30 	sub	r10,r8,48
80003f7a:	58 9a       	cp.w	r10,9
80003f7c:	fe 98 ff f8 	brls	80003f6c <_vfprintf_r+0x3d8>
80003f80:	3f fa       	mov	r10,-1
80003f82:	f2 0a 0c 49 	max	r9,r9,r10
80003f86:	50 29       	stdsp	sp[0x8],r9
80003f88:	ce 9a       	rjmp	80003d5a <_vfprintf_r+0x1c6>
80003f8a:	a7 b5       	sbr	r5,0x7
80003f8c:	ce 4a       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003f8e:	30 09       	mov	r9,0
80003f90:	23 08       	sub	r8,48
80003f92:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003f96:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003f9a:	0f 38       	ld.ub	r8,r7++
80003f9c:	f0 ca 00 30 	sub	r10,r8,48
80003fa0:	58 9a       	cp.w	r10,9
80003fa2:	fe 98 ff f7 	brls	80003f90 <_vfprintf_r+0x3fc>
80003fa6:	e0 48 00 24 	cp.w	r8,36
80003faa:	fe 91 fe d7 	brne	80003d58 <_vfprintf_r+0x1c4>
80003fae:	e0 49 00 20 	cp.w	r9,32
80003fb2:	e0 89 0d 6f 	brgt	80005a90 <_vfprintf_r+0x1efc>
80003fb6:	f2 c3 00 01 	sub	r3,r9,1
80003fba:	30 19       	mov	r9,1
80003fbc:	50 39       	stdsp	sp[0xc],r9
80003fbe:	cc ba       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003fc0:	a3 b5       	sbr	r5,0x3
80003fc2:	cc 9a       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003fc4:	a7 a5       	sbr	r5,0x6
80003fc6:	cc 7a       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003fc8:	0a 98       	mov	r8,r5
80003fca:	a5 b5       	sbr	r5,0x5
80003fcc:	a5 a8       	sbr	r8,0x4
80003fce:	0f 89       	ld.ub	r9,r7[0x0]
80003fd0:	36 ce       	mov	lr,108
80003fd2:	fc 09 18 00 	cp.b	r9,lr
80003fd6:	f7 b7 00 ff 	subeq	r7,-1
80003fda:	f0 05 17 10 	movne	r5,r8
80003fde:	cb ba       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003fe0:	a5 b5       	sbr	r5,0x5
80003fe2:	cb 9a       	rjmp	80003d54 <_vfprintf_r+0x1c0>
80003fe4:	50 a7       	stdsp	sp[0x28],r7
80003fe6:	50 80       	stdsp	sp[0x20],r0
80003fe8:	0c 97       	mov	r7,r6
80003fea:	10 90       	mov	r0,r8
80003fec:	06 96       	mov	r6,r3
80003fee:	04 94       	mov	r4,r2
80003ff0:	40 93       	lddsp	r3,sp[0x24]
80003ff2:	02 92       	mov	r2,r1
80003ff4:	0e 99       	mov	r9,r7
80003ff6:	40 41       	lddsp	r1,sp[0x10]
80003ff8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ffc:	40 3c       	lddsp	r12,sp[0xc]
80003ffe:	58 0c       	cp.w	r12,0
80004000:	c1 d0       	breq	8000403a <_vfprintf_r+0x4a6>
80004002:	10 36       	cp.w	r6,r8
80004004:	c0 64       	brge	80004010 <_vfprintf_r+0x47c>
80004006:	fa cb f9 44 	sub	r11,sp,-1724
8000400a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000400e:	c1 d8       	rjmp	80004048 <_vfprintf_r+0x4b4>
80004010:	fa c8 f9 50 	sub	r8,sp,-1712
80004014:	1a d8       	st.w	--sp,r8
80004016:	fa c8 fa b8 	sub	r8,sp,-1352
8000401a:	1a d8       	st.w	--sp,r8
8000401c:	fa c8 fb b4 	sub	r8,sp,-1100
80004020:	1a d8       	st.w	--sp,r8
80004022:	fa c8 f9 40 	sub	r8,sp,-1728
80004026:	fa c9 ff b4 	sub	r9,sp,-76
8000402a:	04 9a       	mov	r10,r2
8000402c:	0c 9b       	mov	r11,r6
8000402e:	08 9c       	mov	r12,r4
80004030:	fe b0 fc 1c 	rcall	80003868 <get_arg>
80004034:	2f dd       	sub	sp,-12
80004036:	19 b8       	ld.ub	r8,r12[0x3]
80004038:	c2 28       	rjmp	8000407c <_vfprintf_r+0x4e8>
8000403a:	2f f7       	sub	r7,-1
8000403c:	10 39       	cp.w	r9,r8
8000403e:	c0 84       	brge	8000404e <_vfprintf_r+0x4ba>
80004040:	fa ca f9 44 	sub	r10,sp,-1724
80004044:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004048:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000404c:	c1 88       	rjmp	8000407c <_vfprintf_r+0x4e8>
8000404e:	41 09       	lddsp	r9,sp[0x40]
80004050:	59 f8       	cp.w	r8,31
80004052:	e0 89 00 12 	brgt	80004076 <_vfprintf_r+0x4e2>
80004056:	f2 ca ff fc 	sub	r10,r9,-4
8000405a:	51 0a       	stdsp	sp[0x40],r10
8000405c:	72 09       	ld.w	r9,r9[0x0]
8000405e:	fa c6 f9 44 	sub	r6,sp,-1724
80004062:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004066:	2f f8       	sub	r8,-1
80004068:	f5 49 fd 88 	st.w	r10[-632],r9
8000406c:	fb 48 06 b4 	st.w	sp[1716],r8
80004070:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004074:	c0 48       	rjmp	8000407c <_vfprintf_r+0x4e8>
80004076:	13 b8       	ld.ub	r8,r9[0x3]
80004078:	2f c9       	sub	r9,-4
8000407a:	51 09       	stdsp	sp[0x40],r9
8000407c:	fb 68 06 60 	st.b	sp[1632],r8
80004080:	30 0e       	mov	lr,0
80004082:	30 08       	mov	r8,0
80004084:	30 12       	mov	r2,1
80004086:	fb 68 06 bb 	st.b	sp[1723],r8
8000408a:	50 2e       	stdsp	sp[0x8],lr
8000408c:	e0 8f 08 ad 	bral	800051e6 <_vfprintf_r+0x1652>
80004090:	50 a7       	stdsp	sp[0x28],r7
80004092:	50 80       	stdsp	sp[0x20],r0
80004094:	0c 97       	mov	r7,r6
80004096:	04 94       	mov	r4,r2
80004098:	06 96       	mov	r6,r3
8000409a:	02 92       	mov	r2,r1
8000409c:	40 93       	lddsp	r3,sp[0x24]
8000409e:	10 90       	mov	r0,r8
800040a0:	40 41       	lddsp	r1,sp[0x10]
800040a2:	a5 a5       	sbr	r5,0x4
800040a4:	c0 a8       	rjmp	800040b8 <_vfprintf_r+0x524>
800040a6:	50 a7       	stdsp	sp[0x28],r7
800040a8:	50 80       	stdsp	sp[0x20],r0
800040aa:	0c 97       	mov	r7,r6
800040ac:	04 94       	mov	r4,r2
800040ae:	06 96       	mov	r6,r3
800040b0:	02 92       	mov	r2,r1
800040b2:	40 93       	lddsp	r3,sp[0x24]
800040b4:	10 90       	mov	r0,r8
800040b6:	40 41       	lddsp	r1,sp[0x10]
800040b8:	ed b5 00 05 	bld	r5,0x5
800040bc:	c5 11       	brne	8000415e <_vfprintf_r+0x5ca>
800040be:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040c2:	40 3c       	lddsp	r12,sp[0xc]
800040c4:	58 0c       	cp.w	r12,0
800040c6:	c1 e0       	breq	80004102 <_vfprintf_r+0x56e>
800040c8:	10 36       	cp.w	r6,r8
800040ca:	c0 64       	brge	800040d6 <_vfprintf_r+0x542>
800040cc:	fa cb f9 44 	sub	r11,sp,-1724
800040d0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800040d4:	c2 08       	rjmp	80004114 <_vfprintf_r+0x580>
800040d6:	fa c8 f9 50 	sub	r8,sp,-1712
800040da:	1a d8       	st.w	--sp,r8
800040dc:	fa c8 fa b8 	sub	r8,sp,-1352
800040e0:	0c 9b       	mov	r11,r6
800040e2:	1a d8       	st.w	--sp,r8
800040e4:	fa c8 fb b4 	sub	r8,sp,-1100
800040e8:	1a d8       	st.w	--sp,r8
800040ea:	fa c9 ff b4 	sub	r9,sp,-76
800040ee:	fa c8 f9 40 	sub	r8,sp,-1728
800040f2:	04 9a       	mov	r10,r2
800040f4:	08 9c       	mov	r12,r4
800040f6:	fe b0 fb b9 	rcall	80003868 <get_arg>
800040fa:	2f dd       	sub	sp,-12
800040fc:	78 1b       	ld.w	r11,r12[0x4]
800040fe:	78 09       	ld.w	r9,r12[0x0]
80004100:	c2 b8       	rjmp	80004156 <_vfprintf_r+0x5c2>
80004102:	ee ca ff ff 	sub	r10,r7,-1
80004106:	10 37       	cp.w	r7,r8
80004108:	c0 b4       	brge	8000411e <_vfprintf_r+0x58a>
8000410a:	fa c9 f9 44 	sub	r9,sp,-1724
8000410e:	14 97       	mov	r7,r10
80004110:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004114:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004118:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000411c:	c1 d8       	rjmp	80004156 <_vfprintf_r+0x5c2>
8000411e:	41 09       	lddsp	r9,sp[0x40]
80004120:	59 f8       	cp.w	r8,31
80004122:	e0 89 00 14 	brgt	8000414a <_vfprintf_r+0x5b6>
80004126:	f2 cb ff f8 	sub	r11,r9,-8
8000412a:	51 0b       	stdsp	sp[0x40],r11
8000412c:	fa c6 f9 44 	sub	r6,sp,-1724
80004130:	72 1b       	ld.w	r11,r9[0x4]
80004132:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004136:	72 09       	ld.w	r9,r9[0x0]
80004138:	f9 4b fd 8c 	st.w	r12[-628],r11
8000413c:	f9 49 fd 88 	st.w	r12[-632],r9
80004140:	2f f8       	sub	r8,-1
80004142:	14 97       	mov	r7,r10
80004144:	fb 48 06 b4 	st.w	sp[1716],r8
80004148:	c0 78       	rjmp	80004156 <_vfprintf_r+0x5c2>
8000414a:	f2 c8 ff f8 	sub	r8,r9,-8
8000414e:	72 1b       	ld.w	r11,r9[0x4]
80004150:	14 97       	mov	r7,r10
80004152:	51 08       	stdsp	sp[0x40],r8
80004154:	72 09       	ld.w	r9,r9[0x0]
80004156:	16 98       	mov	r8,r11
80004158:	fa e9 00 00 	st.d	sp[0],r8
8000415c:	ca e8       	rjmp	800042b8 <_vfprintf_r+0x724>
8000415e:	ed b5 00 04 	bld	r5,0x4
80004162:	c1 71       	brne	80004190 <_vfprintf_r+0x5fc>
80004164:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004168:	40 3e       	lddsp	lr,sp[0xc]
8000416a:	58 0e       	cp.w	lr,0
8000416c:	c0 80       	breq	8000417c <_vfprintf_r+0x5e8>
8000416e:	10 36       	cp.w	r6,r8
80004170:	c6 94       	brge	80004242 <_vfprintf_r+0x6ae>
80004172:	fa cc f9 44 	sub	r12,sp,-1724
80004176:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000417a:	c8 28       	rjmp	8000427e <_vfprintf_r+0x6ea>
8000417c:	ee ca ff ff 	sub	r10,r7,-1
80004180:	10 37       	cp.w	r7,r8
80004182:	e0 84 00 81 	brge	80004284 <_vfprintf_r+0x6f0>
80004186:	fa cb f9 44 	sub	r11,sp,-1724
8000418a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000418e:	c7 78       	rjmp	8000427c <_vfprintf_r+0x6e8>
80004190:	ed b5 00 06 	bld	r5,0x6
80004194:	c4 b1       	brne	8000422a <_vfprintf_r+0x696>
80004196:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000419a:	40 3c       	lddsp	r12,sp[0xc]
8000419c:	58 0c       	cp.w	r12,0
8000419e:	c1 d0       	breq	800041d8 <_vfprintf_r+0x644>
800041a0:	10 36       	cp.w	r6,r8
800041a2:	c0 64       	brge	800041ae <_vfprintf_r+0x61a>
800041a4:	fa cb f9 44 	sub	r11,sp,-1724
800041a8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800041ac:	c1 f8       	rjmp	800041ea <_vfprintf_r+0x656>
800041ae:	fa c8 f9 50 	sub	r8,sp,-1712
800041b2:	1a d8       	st.w	--sp,r8
800041b4:	fa c8 fa b8 	sub	r8,sp,-1352
800041b8:	1a d8       	st.w	--sp,r8
800041ba:	fa c8 fb b4 	sub	r8,sp,-1100
800041be:	1a d8       	st.w	--sp,r8
800041c0:	fa c8 f9 40 	sub	r8,sp,-1728
800041c4:	fa c9 ff b4 	sub	r9,sp,-76
800041c8:	04 9a       	mov	r10,r2
800041ca:	0c 9b       	mov	r11,r6
800041cc:	08 9c       	mov	r12,r4
800041ce:	fe b0 fb 4d 	rcall	80003868 <get_arg>
800041d2:	2f dd       	sub	sp,-12
800041d4:	98 18       	ld.sh	r8,r12[0x2]
800041d6:	c2 68       	rjmp	80004222 <_vfprintf_r+0x68e>
800041d8:	ee ca ff ff 	sub	r10,r7,-1
800041dc:	10 37       	cp.w	r7,r8
800041de:	c0 94       	brge	800041f0 <_vfprintf_r+0x65c>
800041e0:	fa c9 f9 44 	sub	r9,sp,-1724
800041e4:	14 97       	mov	r7,r10
800041e6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800041ea:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800041ee:	c1 a8       	rjmp	80004222 <_vfprintf_r+0x68e>
800041f0:	41 09       	lddsp	r9,sp[0x40]
800041f2:	59 f8       	cp.w	r8,31
800041f4:	e0 89 00 13 	brgt	8000421a <_vfprintf_r+0x686>
800041f8:	f2 cb ff fc 	sub	r11,r9,-4
800041fc:	51 0b       	stdsp	sp[0x40],r11
800041fe:	72 09       	ld.w	r9,r9[0x0]
80004200:	fa c6 f9 44 	sub	r6,sp,-1724
80004204:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004208:	2f f8       	sub	r8,-1
8000420a:	f7 49 fd 88 	st.w	r11[-632],r9
8000420e:	fb 48 06 b4 	st.w	sp[1716],r8
80004212:	14 97       	mov	r7,r10
80004214:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004218:	c0 58       	rjmp	80004222 <_vfprintf_r+0x68e>
8000421a:	92 18       	ld.sh	r8,r9[0x2]
8000421c:	14 97       	mov	r7,r10
8000421e:	2f c9       	sub	r9,-4
80004220:	51 09       	stdsp	sp[0x40],r9
80004222:	50 18       	stdsp	sp[0x4],r8
80004224:	bf 58       	asr	r8,0x1f
80004226:	50 08       	stdsp	sp[0x0],r8
80004228:	c4 88       	rjmp	800042b8 <_vfprintf_r+0x724>
8000422a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000422e:	40 3c       	lddsp	r12,sp[0xc]
80004230:	58 0c       	cp.w	r12,0
80004232:	c1 d0       	breq	8000426c <_vfprintf_r+0x6d8>
80004234:	10 36       	cp.w	r6,r8
80004236:	c0 64       	brge	80004242 <_vfprintf_r+0x6ae>
80004238:	fa cb f9 44 	sub	r11,sp,-1724
8000423c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004240:	c1 f8       	rjmp	8000427e <_vfprintf_r+0x6ea>
80004242:	fa c8 f9 50 	sub	r8,sp,-1712
80004246:	1a d8       	st.w	--sp,r8
80004248:	fa c8 fa b8 	sub	r8,sp,-1352
8000424c:	0c 9b       	mov	r11,r6
8000424e:	1a d8       	st.w	--sp,r8
80004250:	fa c8 fb b4 	sub	r8,sp,-1100
80004254:	04 9a       	mov	r10,r2
80004256:	1a d8       	st.w	--sp,r8
80004258:	08 9c       	mov	r12,r4
8000425a:	fa c8 f9 40 	sub	r8,sp,-1728
8000425e:	fa c9 ff b4 	sub	r9,sp,-76
80004262:	fe b0 fb 03 	rcall	80003868 <get_arg>
80004266:	2f dd       	sub	sp,-12
80004268:	78 0b       	ld.w	r11,r12[0x0]
8000426a:	c2 48       	rjmp	800042b2 <_vfprintf_r+0x71e>
8000426c:	ee ca ff ff 	sub	r10,r7,-1
80004270:	10 37       	cp.w	r7,r8
80004272:	c0 94       	brge	80004284 <_vfprintf_r+0x6f0>
80004274:	fa c9 f9 44 	sub	r9,sp,-1724
80004278:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000427c:	14 97       	mov	r7,r10
8000427e:	ec fb fd 88 	ld.w	r11,r6[-632]
80004282:	c1 88       	rjmp	800042b2 <_vfprintf_r+0x71e>
80004284:	41 09       	lddsp	r9,sp[0x40]
80004286:	59 f8       	cp.w	r8,31
80004288:	e0 89 00 11 	brgt	800042aa <_vfprintf_r+0x716>
8000428c:	f2 cb ff fc 	sub	r11,r9,-4
80004290:	51 0b       	stdsp	sp[0x40],r11
80004292:	fa c6 f9 44 	sub	r6,sp,-1724
80004296:	72 0b       	ld.w	r11,r9[0x0]
80004298:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000429c:	f3 4b fd 88 	st.w	r9[-632],r11
800042a0:	2f f8       	sub	r8,-1
800042a2:	14 97       	mov	r7,r10
800042a4:	fb 48 06 b4 	st.w	sp[1716],r8
800042a8:	c0 58       	rjmp	800042b2 <_vfprintf_r+0x71e>
800042aa:	72 0b       	ld.w	r11,r9[0x0]
800042ac:	14 97       	mov	r7,r10
800042ae:	2f c9       	sub	r9,-4
800042b0:	51 09       	stdsp	sp[0x40],r9
800042b2:	50 1b       	stdsp	sp[0x4],r11
800042b4:	bf 5b       	asr	r11,0x1f
800042b6:	50 0b       	stdsp	sp[0x0],r11
800042b8:	fa ea 00 00 	ld.d	r10,sp[0]
800042bc:	58 0a       	cp.w	r10,0
800042be:	5c 2b       	cpc	r11
800042c0:	c0 e4       	brge	800042dc <_vfprintf_r+0x748>
800042c2:	30 08       	mov	r8,0
800042c4:	fa ea 00 00 	ld.d	r10,sp[0]
800042c8:	30 09       	mov	r9,0
800042ca:	f0 0a 01 0a 	sub	r10,r8,r10
800042ce:	f2 0b 01 4b 	sbc	r11,r9,r11
800042d2:	32 d8       	mov	r8,45
800042d4:	fa eb 00 00 	st.d	sp[0],r10
800042d8:	fb 68 06 bb 	st.b	sp[1723],r8
800042dc:	30 18       	mov	r8,1
800042de:	e0 8f 06 fa 	bral	800050d2 <_vfprintf_r+0x153e>
800042e2:	50 a7       	stdsp	sp[0x28],r7
800042e4:	50 80       	stdsp	sp[0x20],r0
800042e6:	0c 97       	mov	r7,r6
800042e8:	04 94       	mov	r4,r2
800042ea:	06 96       	mov	r6,r3
800042ec:	02 92       	mov	r2,r1
800042ee:	40 93       	lddsp	r3,sp[0x24]
800042f0:	10 90       	mov	r0,r8
800042f2:	40 41       	lddsp	r1,sp[0x10]
800042f4:	0e 99       	mov	r9,r7
800042f6:	ed b5 00 03 	bld	r5,0x3
800042fa:	c4 11       	brne	8000437c <_vfprintf_r+0x7e8>
800042fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004300:	40 3a       	lddsp	r10,sp[0xc]
80004302:	58 0a       	cp.w	r10,0
80004304:	c1 90       	breq	80004336 <_vfprintf_r+0x7a2>
80004306:	10 36       	cp.w	r6,r8
80004308:	c6 45       	brlt	800043d0 <_vfprintf_r+0x83c>
8000430a:	fa c8 f9 50 	sub	r8,sp,-1712
8000430e:	1a d8       	st.w	--sp,r8
80004310:	fa c8 fa b8 	sub	r8,sp,-1352
80004314:	1a d8       	st.w	--sp,r8
80004316:	fa c8 fb b4 	sub	r8,sp,-1100
8000431a:	0c 9b       	mov	r11,r6
8000431c:	1a d8       	st.w	--sp,r8
8000431e:	04 9a       	mov	r10,r2
80004320:	fa c8 f9 40 	sub	r8,sp,-1728
80004324:	fa c9 ff b4 	sub	r9,sp,-76
80004328:	08 9c       	mov	r12,r4
8000432a:	fe b0 fa 9f 	rcall	80003868 <get_arg>
8000432e:	2f dd       	sub	sp,-12
80004330:	78 16       	ld.w	r6,r12[0x4]
80004332:	50 76       	stdsp	sp[0x1c],r6
80004334:	c4 88       	rjmp	800043c4 <_vfprintf_r+0x830>
80004336:	2f f7       	sub	r7,-1
80004338:	10 39       	cp.w	r9,r8
8000433a:	c0 c4       	brge	80004352 <_vfprintf_r+0x7be>
8000433c:	fa ce f9 44 	sub	lr,sp,-1724
80004340:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004344:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004348:	50 7c       	stdsp	sp[0x1c],r12
8000434a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000434e:	50 56       	stdsp	sp[0x14],r6
80004350:	c6 68       	rjmp	8000441c <_vfprintf_r+0x888>
80004352:	41 09       	lddsp	r9,sp[0x40]
80004354:	59 f8       	cp.w	r8,31
80004356:	e0 89 00 10 	brgt	80004376 <_vfprintf_r+0x7e2>
8000435a:	f2 ca ff f8 	sub	r10,r9,-8
8000435e:	72 1b       	ld.w	r11,r9[0x4]
80004360:	51 0a       	stdsp	sp[0x40],r10
80004362:	72 09       	ld.w	r9,r9[0x0]
80004364:	fa ca f9 44 	sub	r10,sp,-1724
80004368:	50 7b       	stdsp	sp[0x1c],r11
8000436a:	50 59       	stdsp	sp[0x14],r9
8000436c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004370:	40 5b       	lddsp	r11,sp[0x14]
80004372:	40 7a       	lddsp	r10,sp[0x1c]
80004374:	c4 78       	rjmp	80004402 <_vfprintf_r+0x86e>
80004376:	72 18       	ld.w	r8,r9[0x4]
80004378:	50 78       	stdsp	sp[0x1c],r8
8000437a:	c4 c8       	rjmp	80004412 <_vfprintf_r+0x87e>
8000437c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004380:	40 3e       	lddsp	lr,sp[0xc]
80004382:	58 0e       	cp.w	lr,0
80004384:	c2 30       	breq	800043ca <_vfprintf_r+0x836>
80004386:	10 36       	cp.w	r6,r8
80004388:	c0 94       	brge	8000439a <_vfprintf_r+0x806>
8000438a:	fa cc f9 44 	sub	r12,sp,-1724
8000438e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004392:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004396:	50 7b       	stdsp	sp[0x1c],r11
80004398:	cd 9b       	rjmp	8000434a <_vfprintf_r+0x7b6>
8000439a:	fa c8 f9 50 	sub	r8,sp,-1712
8000439e:	1a d8       	st.w	--sp,r8
800043a0:	fa c8 fa b8 	sub	r8,sp,-1352
800043a4:	04 9a       	mov	r10,r2
800043a6:	1a d8       	st.w	--sp,r8
800043a8:	fa c8 fb b4 	sub	r8,sp,-1100
800043ac:	0c 9b       	mov	r11,r6
800043ae:	1a d8       	st.w	--sp,r8
800043b0:	08 9c       	mov	r12,r4
800043b2:	fa c8 f9 40 	sub	r8,sp,-1728
800043b6:	fa c9 ff b4 	sub	r9,sp,-76
800043ba:	fe b0 fa 57 	rcall	80003868 <get_arg>
800043be:	2f dd       	sub	sp,-12
800043c0:	78 1a       	ld.w	r10,r12[0x4]
800043c2:	50 7a       	stdsp	sp[0x1c],r10
800043c4:	78 0c       	ld.w	r12,r12[0x0]
800043c6:	50 5c       	stdsp	sp[0x14],r12
800043c8:	c2 a8       	rjmp	8000441c <_vfprintf_r+0x888>
800043ca:	2f f7       	sub	r7,-1
800043cc:	10 39       	cp.w	r9,r8
800043ce:	c0 94       	brge	800043e0 <_vfprintf_r+0x84c>
800043d0:	fa c9 f9 44 	sub	r9,sp,-1724
800043d4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800043d8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800043dc:	50 78       	stdsp	sp[0x1c],r8
800043de:	cb 6b       	rjmp	8000434a <_vfprintf_r+0x7b6>
800043e0:	41 09       	lddsp	r9,sp[0x40]
800043e2:	59 f8       	cp.w	r8,31
800043e4:	e0 89 00 15 	brgt	8000440e <_vfprintf_r+0x87a>
800043e8:	f2 ca ff f8 	sub	r10,r9,-8
800043ec:	72 16       	ld.w	r6,r9[0x4]
800043ee:	72 09       	ld.w	r9,r9[0x0]
800043f0:	51 0a       	stdsp	sp[0x40],r10
800043f2:	50 59       	stdsp	sp[0x14],r9
800043f4:	fa ce f9 44 	sub	lr,sp,-1724
800043f8:	50 76       	stdsp	sp[0x1c],r6
800043fa:	fc 08 00 39 	add	r9,lr,r8<<0x3
800043fe:	40 5b       	lddsp	r11,sp[0x14]
80004400:	0c 9a       	mov	r10,r6
80004402:	f2 eb fd 88 	st.d	r9[-632],r10
80004406:	2f f8       	sub	r8,-1
80004408:	fb 48 06 b4 	st.w	sp[1716],r8
8000440c:	c0 88       	rjmp	8000441c <_vfprintf_r+0x888>
8000440e:	72 1c       	ld.w	r12,r9[0x4]
80004410:	50 7c       	stdsp	sp[0x1c],r12
80004412:	f2 c8 ff f8 	sub	r8,r9,-8
80004416:	51 08       	stdsp	sp[0x40],r8
80004418:	72 09       	ld.w	r9,r9[0x0]
8000441a:	50 59       	stdsp	sp[0x14],r9
8000441c:	40 5b       	lddsp	r11,sp[0x14]
8000441e:	40 7a       	lddsp	r10,sp[0x1c]
80004420:	e0 a0 1c d6 	rcall	80007dcc <__isinfd>
80004424:	18 96       	mov	r6,r12
80004426:	c1 70       	breq	80004454 <_vfprintf_r+0x8c0>
80004428:	30 08       	mov	r8,0
8000442a:	30 09       	mov	r9,0
8000442c:	40 5b       	lddsp	r11,sp[0x14]
8000442e:	40 7a       	lddsp	r10,sp[0x1c]
80004430:	e0 a0 21 c4 	rcall	800087b8 <__avr32_f64_cmp_lt>
80004434:	c0 40       	breq	8000443c <_vfprintf_r+0x8a8>
80004436:	32 d8       	mov	r8,45
80004438:	fb 68 06 bb 	st.b	sp[1723],r8
8000443c:	fe c8 ad 9c 	sub	r8,pc,-21092
80004440:	fe c6 ad 9c 	sub	r6,pc,-21092
80004444:	a7 d5       	cbr	r5,0x7
80004446:	e0 40 00 47 	cp.w	r0,71
8000444a:	f0 06 17 a0 	movle	r6,r8
8000444e:	30 32       	mov	r2,3
80004450:	e0 8f 06 ce 	bral	800051ec <_vfprintf_r+0x1658>
80004454:	40 5b       	lddsp	r11,sp[0x14]
80004456:	40 7a       	lddsp	r10,sp[0x1c]
80004458:	e0 a0 1c cf 	rcall	80007df6 <__isnand>
8000445c:	c0 e0       	breq	80004478 <_vfprintf_r+0x8e4>
8000445e:	50 26       	stdsp	sp[0x8],r6
80004460:	fe c8 ad b8 	sub	r8,pc,-21064
80004464:	fe c6 ad b8 	sub	r6,pc,-21064
80004468:	a7 d5       	cbr	r5,0x7
8000446a:	e0 40 00 47 	cp.w	r0,71
8000446e:	f0 06 17 a0 	movle	r6,r8
80004472:	30 32       	mov	r2,3
80004474:	e0 8f 06 c2 	bral	800051f8 <_vfprintf_r+0x1664>
80004478:	40 2a       	lddsp	r10,sp[0x8]
8000447a:	5b fa       	cp.w	r10,-1
8000447c:	c0 41       	brne	80004484 <_vfprintf_r+0x8f0>
8000447e:	30 69       	mov	r9,6
80004480:	50 29       	stdsp	sp[0x8],r9
80004482:	c1 18       	rjmp	800044a4 <_vfprintf_r+0x910>
80004484:	e0 40 00 47 	cp.w	r0,71
80004488:	5f 09       	sreq	r9
8000448a:	e0 40 00 67 	cp.w	r0,103
8000448e:	5f 08       	sreq	r8
80004490:	f3 e8 10 08 	or	r8,r9,r8
80004494:	f8 08 18 00 	cp.b	r8,r12
80004498:	c0 60       	breq	800044a4 <_vfprintf_r+0x910>
8000449a:	40 28       	lddsp	r8,sp[0x8]
8000449c:	58 08       	cp.w	r8,0
8000449e:	f9 b8 00 01 	moveq	r8,1
800044a2:	50 28       	stdsp	sp[0x8],r8
800044a4:	40 78       	lddsp	r8,sp[0x1c]
800044a6:	40 59       	lddsp	r9,sp[0x14]
800044a8:	fa e9 06 94 	st.d	sp[1684],r8
800044ac:	a9 a5       	sbr	r5,0x8
800044ae:	fa f8 06 94 	ld.w	r8,sp[1684]
800044b2:	58 08       	cp.w	r8,0
800044b4:	c0 65       	brlt	800044c0 <_vfprintf_r+0x92c>
800044b6:	40 5e       	lddsp	lr,sp[0x14]
800044b8:	30 0c       	mov	r12,0
800044ba:	50 6e       	stdsp	sp[0x18],lr
800044bc:	50 9c       	stdsp	sp[0x24],r12
800044be:	c0 78       	rjmp	800044cc <_vfprintf_r+0x938>
800044c0:	40 5b       	lddsp	r11,sp[0x14]
800044c2:	32 da       	mov	r10,45
800044c4:	ee 1b 80 00 	eorh	r11,0x8000
800044c8:	50 9a       	stdsp	sp[0x24],r10
800044ca:	50 6b       	stdsp	sp[0x18],r11
800044cc:	e0 40 00 46 	cp.w	r0,70
800044d0:	5f 09       	sreq	r9
800044d2:	e0 40 00 66 	cp.w	r0,102
800044d6:	5f 08       	sreq	r8
800044d8:	f3 e8 10 08 	or	r8,r9,r8
800044dc:	50 48       	stdsp	sp[0x10],r8
800044de:	c0 40       	breq	800044e6 <_vfprintf_r+0x952>
800044e0:	40 22       	lddsp	r2,sp[0x8]
800044e2:	30 39       	mov	r9,3
800044e4:	c1 08       	rjmp	80004504 <_vfprintf_r+0x970>
800044e6:	e0 40 00 45 	cp.w	r0,69
800044ea:	5f 09       	sreq	r9
800044ec:	e0 40 00 65 	cp.w	r0,101
800044f0:	5f 08       	sreq	r8
800044f2:	40 22       	lddsp	r2,sp[0x8]
800044f4:	10 49       	or	r9,r8
800044f6:	2f f2       	sub	r2,-1
800044f8:	40 46       	lddsp	r6,sp[0x10]
800044fa:	ec 09 18 00 	cp.b	r9,r6
800044fe:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004502:	30 29       	mov	r9,2
80004504:	fa c8 f9 5c 	sub	r8,sp,-1700
80004508:	1a d8       	st.w	--sp,r8
8000450a:	fa c8 f9 54 	sub	r8,sp,-1708
8000450e:	1a d8       	st.w	--sp,r8
80004510:	fa c8 f9 4c 	sub	r8,sp,-1716
80004514:	08 9c       	mov	r12,r4
80004516:	1a d8       	st.w	--sp,r8
80004518:	04 98       	mov	r8,r2
8000451a:	40 9b       	lddsp	r11,sp[0x24]
8000451c:	40 aa       	lddsp	r10,sp[0x28]
8000451e:	e0 a0 0b c3 	rcall	80005ca4 <_dtoa_r>
80004522:	e0 40 00 47 	cp.w	r0,71
80004526:	5f 19       	srne	r9
80004528:	e0 40 00 67 	cp.w	r0,103
8000452c:	5f 18       	srne	r8
8000452e:	18 96       	mov	r6,r12
80004530:	2f dd       	sub	sp,-12
80004532:	f3 e8 00 08 	and	r8,r9,r8
80004536:	c0 41       	brne	8000453e <_vfprintf_r+0x9aa>
80004538:	ed b5 00 00 	bld	r5,0x0
8000453c:	c3 01       	brne	8000459c <_vfprintf_r+0xa08>
8000453e:	ec 02 00 0e 	add	lr,r6,r2
80004542:	50 3e       	stdsp	sp[0xc],lr
80004544:	40 4c       	lddsp	r12,sp[0x10]
80004546:	58 0c       	cp.w	r12,0
80004548:	c1 50       	breq	80004572 <_vfprintf_r+0x9de>
8000454a:	0d 89       	ld.ub	r9,r6[0x0]
8000454c:	33 08       	mov	r8,48
8000454e:	f0 09 18 00 	cp.b	r9,r8
80004552:	c0 b1       	brne	80004568 <_vfprintf_r+0x9d4>
80004554:	30 08       	mov	r8,0
80004556:	30 09       	mov	r9,0
80004558:	40 6b       	lddsp	r11,sp[0x18]
8000455a:	40 7a       	lddsp	r10,sp[0x1c]
8000455c:	e0 a0 20 e7 	rcall	8000872a <__avr32_f64_cmp_eq>
80004560:	fb b2 00 01 	rsubeq	r2,1
80004564:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004568:	40 3b       	lddsp	r11,sp[0xc]
8000456a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000456e:	10 0b       	add	r11,r8
80004570:	50 3b       	stdsp	sp[0xc],r11
80004572:	40 6b       	lddsp	r11,sp[0x18]
80004574:	30 08       	mov	r8,0
80004576:	30 09       	mov	r9,0
80004578:	40 7a       	lddsp	r10,sp[0x1c]
8000457a:	e0 a0 20 d8 	rcall	8000872a <__avr32_f64_cmp_eq>
8000457e:	c0 90       	breq	80004590 <_vfprintf_r+0x9fc>
80004580:	40 3a       	lddsp	r10,sp[0xc]
80004582:	fb 4a 06 a4 	st.w	sp[1700],r10
80004586:	c0 58       	rjmp	80004590 <_vfprintf_r+0x9fc>
80004588:	10 c9       	st.b	r8++,r9
8000458a:	fb 48 06 a4 	st.w	sp[1700],r8
8000458e:	c0 28       	rjmp	80004592 <_vfprintf_r+0x9fe>
80004590:	33 09       	mov	r9,48
80004592:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004596:	40 3e       	lddsp	lr,sp[0xc]
80004598:	1c 38       	cp.w	r8,lr
8000459a:	cf 73       	brcs	80004588 <_vfprintf_r+0x9f4>
8000459c:	e0 40 00 47 	cp.w	r0,71
800045a0:	5f 09       	sreq	r9
800045a2:	e0 40 00 67 	cp.w	r0,103
800045a6:	5f 08       	sreq	r8
800045a8:	f3 e8 10 08 	or	r8,r9,r8
800045ac:	fa f9 06 a4 	ld.w	r9,sp[1700]
800045b0:	0c 19       	sub	r9,r6
800045b2:	50 69       	stdsp	sp[0x18],r9
800045b4:	58 08       	cp.w	r8,0
800045b6:	c0 b0       	breq	800045cc <_vfprintf_r+0xa38>
800045b8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800045bc:	5b d8       	cp.w	r8,-3
800045be:	c0 55       	brlt	800045c8 <_vfprintf_r+0xa34>
800045c0:	40 2c       	lddsp	r12,sp[0x8]
800045c2:	18 38       	cp.w	r8,r12
800045c4:	e0 8a 00 6a 	brle	80004698 <_vfprintf_r+0xb04>
800045c8:	20 20       	sub	r0,2
800045ca:	c0 58       	rjmp	800045d4 <_vfprintf_r+0xa40>
800045cc:	e0 40 00 65 	cp.w	r0,101
800045d0:	e0 89 00 46 	brgt	8000465c <_vfprintf_r+0xac8>
800045d4:	fa fb 06 ac 	ld.w	r11,sp[1708]
800045d8:	fb 60 06 9c 	st.b	sp[1692],r0
800045dc:	20 1b       	sub	r11,1
800045de:	fb 4b 06 ac 	st.w	sp[1708],r11
800045e2:	c0 47       	brpl	800045ea <_vfprintf_r+0xa56>
800045e4:	5c 3b       	neg	r11
800045e6:	32 d8       	mov	r8,45
800045e8:	c0 28       	rjmp	800045ec <_vfprintf_r+0xa58>
800045ea:	32 b8       	mov	r8,43
800045ec:	fb 68 06 9d 	st.b	sp[1693],r8
800045f0:	58 9b       	cp.w	r11,9
800045f2:	e0 8a 00 1d 	brle	8000462c <_vfprintf_r+0xa98>
800045f6:	fa c9 fa 35 	sub	r9,sp,-1483
800045fa:	30 aa       	mov	r10,10
800045fc:	12 98       	mov	r8,r9
800045fe:	0e 9c       	mov	r12,r7
80004600:	0c 92       	mov	r2,r6
80004602:	f6 0a 0c 06 	divs	r6,r11,r10
80004606:	0e 9b       	mov	r11,r7
80004608:	2d 0b       	sub	r11,-48
8000460a:	10 fb       	st.b	--r8,r11
8000460c:	0c 9b       	mov	r11,r6
8000460e:	58 96       	cp.w	r6,9
80004610:	fe 99 ff f9 	brgt	80004602 <_vfprintf_r+0xa6e>
80004614:	2d 0b       	sub	r11,-48
80004616:	18 97       	mov	r7,r12
80004618:	04 96       	mov	r6,r2
8000461a:	10 fb       	st.b	--r8,r11
8000461c:	fa ca f9 62 	sub	r10,sp,-1694
80004620:	c0 38       	rjmp	80004626 <_vfprintf_r+0xa92>
80004622:	11 3b       	ld.ub	r11,r8++
80004624:	14 cb       	st.b	r10++,r11
80004626:	12 38       	cp.w	r8,r9
80004628:	cf d3       	brcs	80004622 <_vfprintf_r+0xa8e>
8000462a:	c0 98       	rjmp	8000463c <_vfprintf_r+0xaa8>
8000462c:	2d 0b       	sub	r11,-48
8000462e:	33 08       	mov	r8,48
80004630:	fb 6b 06 9f 	st.b	sp[1695],r11
80004634:	fb 68 06 9e 	st.b	sp[1694],r8
80004638:	fa ca f9 60 	sub	r10,sp,-1696
8000463c:	fa c8 f9 64 	sub	r8,sp,-1692
80004640:	f4 08 01 08 	sub	r8,r10,r8
80004644:	50 e8       	stdsp	sp[0x38],r8
80004646:	10 92       	mov	r2,r8
80004648:	40 6b       	lddsp	r11,sp[0x18]
8000464a:	16 02       	add	r2,r11
8000464c:	58 1b       	cp.w	r11,1
8000464e:	e0 89 00 05 	brgt	80004658 <_vfprintf_r+0xac4>
80004652:	ed b5 00 00 	bld	r5,0x0
80004656:	c3 51       	brne	800046c0 <_vfprintf_r+0xb2c>
80004658:	2f f2       	sub	r2,-1
8000465a:	c3 38       	rjmp	800046c0 <_vfprintf_r+0xb2c>
8000465c:	e0 40 00 66 	cp.w	r0,102
80004660:	c1 c1       	brne	80004698 <_vfprintf_r+0xb04>
80004662:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004666:	58 02       	cp.w	r2,0
80004668:	e0 8a 00 0c 	brle	80004680 <_vfprintf_r+0xaec>
8000466c:	40 2a       	lddsp	r10,sp[0x8]
8000466e:	58 0a       	cp.w	r10,0
80004670:	c0 41       	brne	80004678 <_vfprintf_r+0xae4>
80004672:	ed b5 00 00 	bld	r5,0x0
80004676:	c2 51       	brne	800046c0 <_vfprintf_r+0xb2c>
80004678:	2f f2       	sub	r2,-1
8000467a:	40 29       	lddsp	r9,sp[0x8]
8000467c:	12 02       	add	r2,r9
8000467e:	c0 b8       	rjmp	80004694 <_vfprintf_r+0xb00>
80004680:	40 28       	lddsp	r8,sp[0x8]
80004682:	58 08       	cp.w	r8,0
80004684:	c0 61       	brne	80004690 <_vfprintf_r+0xafc>
80004686:	ed b5 00 00 	bld	r5,0x0
8000468a:	c0 30       	breq	80004690 <_vfprintf_r+0xafc>
8000468c:	30 12       	mov	r2,1
8000468e:	c1 98       	rjmp	800046c0 <_vfprintf_r+0xb2c>
80004690:	40 22       	lddsp	r2,sp[0x8]
80004692:	2f e2       	sub	r2,-2
80004694:	36 60       	mov	r0,102
80004696:	c1 58       	rjmp	800046c0 <_vfprintf_r+0xb2c>
80004698:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000469c:	40 6e       	lddsp	lr,sp[0x18]
8000469e:	1c 32       	cp.w	r2,lr
800046a0:	c0 65       	brlt	800046ac <_vfprintf_r+0xb18>
800046a2:	ed b5 00 00 	bld	r5,0x0
800046a6:	f7 b2 00 ff 	subeq	r2,-1
800046aa:	c0 a8       	rjmp	800046be <_vfprintf_r+0xb2a>
800046ac:	e4 08 11 02 	rsub	r8,r2,2
800046b0:	40 6c       	lddsp	r12,sp[0x18]
800046b2:	58 02       	cp.w	r2,0
800046b4:	f0 02 17 a0 	movle	r2,r8
800046b8:	f9 b2 09 01 	movgt	r2,1
800046bc:	18 02       	add	r2,r12
800046be:	36 70       	mov	r0,103
800046c0:	40 9b       	lddsp	r11,sp[0x24]
800046c2:	58 0b       	cp.w	r11,0
800046c4:	e0 80 05 94 	breq	800051ec <_vfprintf_r+0x1658>
800046c8:	32 d8       	mov	r8,45
800046ca:	fb 68 06 bb 	st.b	sp[1723],r8
800046ce:	e0 8f 05 93 	bral	800051f4 <_vfprintf_r+0x1660>
800046d2:	50 a7       	stdsp	sp[0x28],r7
800046d4:	04 94       	mov	r4,r2
800046d6:	0c 97       	mov	r7,r6
800046d8:	02 92       	mov	r2,r1
800046da:	06 96       	mov	r6,r3
800046dc:	40 41       	lddsp	r1,sp[0x10]
800046de:	40 93       	lddsp	r3,sp[0x24]
800046e0:	0e 99       	mov	r9,r7
800046e2:	ed b5 00 05 	bld	r5,0x5
800046e6:	c4 81       	brne	80004776 <_vfprintf_r+0xbe2>
800046e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046ec:	40 3e       	lddsp	lr,sp[0xc]
800046ee:	58 0e       	cp.w	lr,0
800046f0:	c1 d0       	breq	8000472a <_vfprintf_r+0xb96>
800046f2:	10 36       	cp.w	r6,r8
800046f4:	c0 64       	brge	80004700 <_vfprintf_r+0xb6c>
800046f6:	fa cc f9 44 	sub	r12,sp,-1724
800046fa:	f8 06 00 36 	add	r6,r12,r6<<0x3
800046fe:	c1 d8       	rjmp	80004738 <_vfprintf_r+0xba4>
80004700:	fa c8 f9 50 	sub	r8,sp,-1712
80004704:	1a d8       	st.w	--sp,r8
80004706:	fa c8 fa b8 	sub	r8,sp,-1352
8000470a:	04 9a       	mov	r10,r2
8000470c:	1a d8       	st.w	--sp,r8
8000470e:	fa c8 fb b4 	sub	r8,sp,-1100
80004712:	0c 9b       	mov	r11,r6
80004714:	1a d8       	st.w	--sp,r8
80004716:	08 9c       	mov	r12,r4
80004718:	fa c8 f9 40 	sub	r8,sp,-1728
8000471c:	fa c9 ff b4 	sub	r9,sp,-76
80004720:	fe b0 f8 a4 	rcall	80003868 <get_arg>
80004724:	2f dd       	sub	sp,-12
80004726:	78 0a       	ld.w	r10,r12[0x0]
80004728:	c2 08       	rjmp	80004768 <_vfprintf_r+0xbd4>
8000472a:	2f f7       	sub	r7,-1
8000472c:	10 39       	cp.w	r9,r8
8000472e:	c0 84       	brge	8000473e <_vfprintf_r+0xbaa>
80004730:	fa cb f9 44 	sub	r11,sp,-1724
80004734:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004738:	ec fa fd 88 	ld.w	r10,r6[-632]
8000473c:	c1 68       	rjmp	80004768 <_vfprintf_r+0xbd4>
8000473e:	41 09       	lddsp	r9,sp[0x40]
80004740:	59 f8       	cp.w	r8,31
80004742:	e0 89 00 10 	brgt	80004762 <_vfprintf_r+0xbce>
80004746:	f2 ca ff fc 	sub	r10,r9,-4
8000474a:	51 0a       	stdsp	sp[0x40],r10
8000474c:	fa c6 f9 44 	sub	r6,sp,-1724
80004750:	72 0a       	ld.w	r10,r9[0x0]
80004752:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004756:	f3 4a fd 88 	st.w	r9[-632],r10
8000475a:	2f f8       	sub	r8,-1
8000475c:	fb 48 06 b4 	st.w	sp[1716],r8
80004760:	c0 48       	rjmp	80004768 <_vfprintf_r+0xbd4>
80004762:	72 0a       	ld.w	r10,r9[0x0]
80004764:	2f c9       	sub	r9,-4
80004766:	51 09       	stdsp	sp[0x40],r9
80004768:	40 be       	lddsp	lr,sp[0x2c]
8000476a:	1c 98       	mov	r8,lr
8000476c:	95 1e       	st.w	r10[0x4],lr
8000476e:	bf 58       	asr	r8,0x1f
80004770:	95 08       	st.w	r10[0x0],r8
80004772:	fe 9f fa 9f 	bral	80003cb0 <_vfprintf_r+0x11c>
80004776:	ed b5 00 04 	bld	r5,0x4
8000477a:	c4 80       	breq	8000480a <_vfprintf_r+0xc76>
8000477c:	e2 15 00 40 	andl	r5,0x40,COH
80004780:	c4 50       	breq	8000480a <_vfprintf_r+0xc76>
80004782:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004786:	40 3c       	lddsp	r12,sp[0xc]
80004788:	58 0c       	cp.w	r12,0
8000478a:	c1 d0       	breq	800047c4 <_vfprintf_r+0xc30>
8000478c:	10 36       	cp.w	r6,r8
8000478e:	c0 64       	brge	8000479a <_vfprintf_r+0xc06>
80004790:	fa cb f9 44 	sub	r11,sp,-1724
80004794:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004798:	c1 d8       	rjmp	800047d2 <_vfprintf_r+0xc3e>
8000479a:	fa c8 f9 50 	sub	r8,sp,-1712
8000479e:	1a d8       	st.w	--sp,r8
800047a0:	fa c8 fa b8 	sub	r8,sp,-1352
800047a4:	04 9a       	mov	r10,r2
800047a6:	1a d8       	st.w	--sp,r8
800047a8:	fa c8 fb b4 	sub	r8,sp,-1100
800047ac:	0c 9b       	mov	r11,r6
800047ae:	1a d8       	st.w	--sp,r8
800047b0:	08 9c       	mov	r12,r4
800047b2:	fa c8 f9 40 	sub	r8,sp,-1728
800047b6:	fa c9 ff b4 	sub	r9,sp,-76
800047ba:	fe b0 f8 57 	rcall	80003868 <get_arg>
800047be:	2f dd       	sub	sp,-12
800047c0:	78 0a       	ld.w	r10,r12[0x0]
800047c2:	c2 08       	rjmp	80004802 <_vfprintf_r+0xc6e>
800047c4:	2f f7       	sub	r7,-1
800047c6:	10 39       	cp.w	r9,r8
800047c8:	c0 84       	brge	800047d8 <_vfprintf_r+0xc44>
800047ca:	fa ca f9 44 	sub	r10,sp,-1724
800047ce:	f4 06 00 36 	add	r6,r10,r6<<0x3
800047d2:	ec fa fd 88 	ld.w	r10,r6[-632]
800047d6:	c1 68       	rjmp	80004802 <_vfprintf_r+0xc6e>
800047d8:	41 09       	lddsp	r9,sp[0x40]
800047da:	59 f8       	cp.w	r8,31
800047dc:	e0 89 00 10 	brgt	800047fc <_vfprintf_r+0xc68>
800047e0:	f2 ca ff fc 	sub	r10,r9,-4
800047e4:	51 0a       	stdsp	sp[0x40],r10
800047e6:	fa c6 f9 44 	sub	r6,sp,-1724
800047ea:	72 0a       	ld.w	r10,r9[0x0]
800047ec:	ec 08 00 39 	add	r9,r6,r8<<0x3
800047f0:	f3 4a fd 88 	st.w	r9[-632],r10
800047f4:	2f f8       	sub	r8,-1
800047f6:	fb 48 06 b4 	st.w	sp[1716],r8
800047fa:	c0 48       	rjmp	80004802 <_vfprintf_r+0xc6e>
800047fc:	72 0a       	ld.w	r10,r9[0x0]
800047fe:	2f c9       	sub	r9,-4
80004800:	51 09       	stdsp	sp[0x40],r9
80004802:	40 be       	lddsp	lr,sp[0x2c]
80004804:	b4 0e       	st.h	r10[0x0],lr
80004806:	fe 9f fa 55 	bral	80003cb0 <_vfprintf_r+0x11c>
8000480a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000480e:	40 3c       	lddsp	r12,sp[0xc]
80004810:	58 0c       	cp.w	r12,0
80004812:	c1 d0       	breq	8000484c <_vfprintf_r+0xcb8>
80004814:	10 36       	cp.w	r6,r8
80004816:	c0 64       	brge	80004822 <_vfprintf_r+0xc8e>
80004818:	fa cb f9 44 	sub	r11,sp,-1724
8000481c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004820:	c1 d8       	rjmp	8000485a <_vfprintf_r+0xcc6>
80004822:	fa c8 f9 50 	sub	r8,sp,-1712
80004826:	1a d8       	st.w	--sp,r8
80004828:	fa c8 fa b8 	sub	r8,sp,-1352
8000482c:	04 9a       	mov	r10,r2
8000482e:	1a d8       	st.w	--sp,r8
80004830:	fa c8 fb b4 	sub	r8,sp,-1100
80004834:	0c 9b       	mov	r11,r6
80004836:	1a d8       	st.w	--sp,r8
80004838:	08 9c       	mov	r12,r4
8000483a:	fa c8 f9 40 	sub	r8,sp,-1728
8000483e:	fa c9 ff b4 	sub	r9,sp,-76
80004842:	fe b0 f8 13 	rcall	80003868 <get_arg>
80004846:	2f dd       	sub	sp,-12
80004848:	78 0a       	ld.w	r10,r12[0x0]
8000484a:	c2 08       	rjmp	8000488a <_vfprintf_r+0xcf6>
8000484c:	2f f7       	sub	r7,-1
8000484e:	10 39       	cp.w	r9,r8
80004850:	c0 84       	brge	80004860 <_vfprintf_r+0xccc>
80004852:	fa ca f9 44 	sub	r10,sp,-1724
80004856:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000485a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000485e:	c1 68       	rjmp	8000488a <_vfprintf_r+0xcf6>
80004860:	41 09       	lddsp	r9,sp[0x40]
80004862:	59 f8       	cp.w	r8,31
80004864:	e0 89 00 10 	brgt	80004884 <_vfprintf_r+0xcf0>
80004868:	f2 ca ff fc 	sub	r10,r9,-4
8000486c:	51 0a       	stdsp	sp[0x40],r10
8000486e:	fa c6 f9 44 	sub	r6,sp,-1724
80004872:	72 0a       	ld.w	r10,r9[0x0]
80004874:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004878:	f3 4a fd 88 	st.w	r9[-632],r10
8000487c:	2f f8       	sub	r8,-1
8000487e:	fb 48 06 b4 	st.w	sp[1716],r8
80004882:	c0 48       	rjmp	8000488a <_vfprintf_r+0xcf6>
80004884:	72 0a       	ld.w	r10,r9[0x0]
80004886:	2f c9       	sub	r9,-4
80004888:	51 09       	stdsp	sp[0x40],r9
8000488a:	40 be       	lddsp	lr,sp[0x2c]
8000488c:	95 0e       	st.w	r10[0x0],lr
8000488e:	fe 9f fa 11 	bral	80003cb0 <_vfprintf_r+0x11c>
80004892:	50 a7       	stdsp	sp[0x28],r7
80004894:	50 80       	stdsp	sp[0x20],r0
80004896:	0c 97       	mov	r7,r6
80004898:	04 94       	mov	r4,r2
8000489a:	06 96       	mov	r6,r3
8000489c:	02 92       	mov	r2,r1
8000489e:	40 93       	lddsp	r3,sp[0x24]
800048a0:	10 90       	mov	r0,r8
800048a2:	40 41       	lddsp	r1,sp[0x10]
800048a4:	a5 a5       	sbr	r5,0x4
800048a6:	c0 a8       	rjmp	800048ba <_vfprintf_r+0xd26>
800048a8:	50 a7       	stdsp	sp[0x28],r7
800048aa:	50 80       	stdsp	sp[0x20],r0
800048ac:	0c 97       	mov	r7,r6
800048ae:	04 94       	mov	r4,r2
800048b0:	06 96       	mov	r6,r3
800048b2:	02 92       	mov	r2,r1
800048b4:	40 93       	lddsp	r3,sp[0x24]
800048b6:	10 90       	mov	r0,r8
800048b8:	40 41       	lddsp	r1,sp[0x10]
800048ba:	ed b5 00 05 	bld	r5,0x5
800048be:	c5 d1       	brne	80004978 <_vfprintf_r+0xde4>
800048c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048c4:	40 3c       	lddsp	r12,sp[0xc]
800048c6:	58 0c       	cp.w	r12,0
800048c8:	c2 60       	breq	80004914 <_vfprintf_r+0xd80>
800048ca:	10 36       	cp.w	r6,r8
800048cc:	c0 a4       	brge	800048e0 <_vfprintf_r+0xd4c>
800048ce:	fa cb f9 44 	sub	r11,sp,-1724
800048d2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048d6:	ec e8 fd 88 	ld.d	r8,r6[-632]
800048da:	fa e9 00 00 	st.d	sp[0],r8
800048de:	c1 88       	rjmp	8000490e <_vfprintf_r+0xd7a>
800048e0:	fa c8 f9 50 	sub	r8,sp,-1712
800048e4:	1a d8       	st.w	--sp,r8
800048e6:	fa c8 fa b8 	sub	r8,sp,-1352
800048ea:	04 9a       	mov	r10,r2
800048ec:	1a d8       	st.w	--sp,r8
800048ee:	0c 9b       	mov	r11,r6
800048f0:	fa c8 fb b4 	sub	r8,sp,-1100
800048f4:	08 9c       	mov	r12,r4
800048f6:	1a d8       	st.w	--sp,r8
800048f8:	fa c8 f9 40 	sub	r8,sp,-1728
800048fc:	fa c9 ff b4 	sub	r9,sp,-76
80004900:	fe b0 f7 b4 	rcall	80003868 <get_arg>
80004904:	2f dd       	sub	sp,-12
80004906:	f8 ea 00 00 	ld.d	r10,r12[0]
8000490a:	fa eb 00 00 	st.d	sp[0],r10
8000490e:	30 08       	mov	r8,0
80004910:	e0 8f 03 de 	bral	800050cc <_vfprintf_r+0x1538>
80004914:	ee ca ff ff 	sub	r10,r7,-1
80004918:	10 37       	cp.w	r7,r8
8000491a:	c0 b4       	brge	80004930 <_vfprintf_r+0xd9c>
8000491c:	fa c9 f9 44 	sub	r9,sp,-1724
80004920:	14 97       	mov	r7,r10
80004922:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004926:	ec ea fd 88 	ld.d	r10,r6[-632]
8000492a:	fa eb 00 00 	st.d	sp[0],r10
8000492e:	c1 88       	rjmp	8000495e <_vfprintf_r+0xdca>
80004930:	41 09       	lddsp	r9,sp[0x40]
80004932:	59 f8       	cp.w	r8,31
80004934:	e0 89 00 18 	brgt	80004964 <_vfprintf_r+0xdd0>
80004938:	f2 e6 00 00 	ld.d	r6,r9[0]
8000493c:	f2 cb ff f8 	sub	r11,r9,-8
80004940:	fa e7 00 00 	st.d	sp[0],r6
80004944:	51 0b       	stdsp	sp[0x40],r11
80004946:	fa c6 f9 44 	sub	r6,sp,-1724
8000494a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000494e:	fa e6 00 00 	ld.d	r6,sp[0]
80004952:	f2 e7 fd 88 	st.d	r9[-632],r6
80004956:	2f f8       	sub	r8,-1
80004958:	14 97       	mov	r7,r10
8000495a:	fb 48 06 b4 	st.w	sp[1716],r8
8000495e:	40 38       	lddsp	r8,sp[0xc]
80004960:	e0 8f 03 b6 	bral	800050cc <_vfprintf_r+0x1538>
80004964:	f2 e6 00 00 	ld.d	r6,r9[0]
80004968:	40 38       	lddsp	r8,sp[0xc]
8000496a:	fa e7 00 00 	st.d	sp[0],r6
8000496e:	2f 89       	sub	r9,-8
80004970:	14 97       	mov	r7,r10
80004972:	51 09       	stdsp	sp[0x40],r9
80004974:	e0 8f 03 ac 	bral	800050cc <_vfprintf_r+0x1538>
80004978:	ed b5 00 04 	bld	r5,0x4
8000497c:	c1 61       	brne	800049a8 <_vfprintf_r+0xe14>
8000497e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004982:	40 3e       	lddsp	lr,sp[0xc]
80004984:	58 0e       	cp.w	lr,0
80004986:	c0 80       	breq	80004996 <_vfprintf_r+0xe02>
80004988:	10 36       	cp.w	r6,r8
8000498a:	c6 74       	brge	80004a58 <_vfprintf_r+0xec4>
8000498c:	fa cc f9 44 	sub	r12,sp,-1724
80004990:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004994:	c8 08       	rjmp	80004a94 <_vfprintf_r+0xf00>
80004996:	ee ca ff ff 	sub	r10,r7,-1
8000499a:	10 37       	cp.w	r7,r8
8000499c:	c7 f4       	brge	80004a9a <_vfprintf_r+0xf06>
8000499e:	fa cb f9 44 	sub	r11,sp,-1724
800049a2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049a6:	c7 68       	rjmp	80004a92 <_vfprintf_r+0xefe>
800049a8:	ed b5 00 06 	bld	r5,0x6
800049ac:	c4 a1       	brne	80004a40 <_vfprintf_r+0xeac>
800049ae:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049b2:	40 3c       	lddsp	r12,sp[0xc]
800049b4:	58 0c       	cp.w	r12,0
800049b6:	c1 d0       	breq	800049f0 <_vfprintf_r+0xe5c>
800049b8:	10 36       	cp.w	r6,r8
800049ba:	c0 64       	brge	800049c6 <_vfprintf_r+0xe32>
800049bc:	fa cb f9 44 	sub	r11,sp,-1724
800049c0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049c4:	c1 f8       	rjmp	80004a02 <_vfprintf_r+0xe6e>
800049c6:	fa c8 f9 50 	sub	r8,sp,-1712
800049ca:	1a d8       	st.w	--sp,r8
800049cc:	fa c8 fa b8 	sub	r8,sp,-1352
800049d0:	1a d8       	st.w	--sp,r8
800049d2:	fa c8 fb b4 	sub	r8,sp,-1100
800049d6:	1a d8       	st.w	--sp,r8
800049d8:	fa c8 f9 40 	sub	r8,sp,-1728
800049dc:	fa c9 ff b4 	sub	r9,sp,-76
800049e0:	04 9a       	mov	r10,r2
800049e2:	0c 9b       	mov	r11,r6
800049e4:	08 9c       	mov	r12,r4
800049e6:	fe b0 f7 41 	rcall	80003868 <get_arg>
800049ea:	2f dd       	sub	sp,-12
800049ec:	98 18       	ld.sh	r8,r12[0x2]
800049ee:	c2 68       	rjmp	80004a3a <_vfprintf_r+0xea6>
800049f0:	ee ca ff ff 	sub	r10,r7,-1
800049f4:	10 37       	cp.w	r7,r8
800049f6:	c0 94       	brge	80004a08 <_vfprintf_r+0xe74>
800049f8:	fa c9 f9 44 	sub	r9,sp,-1724
800049fc:	14 97       	mov	r7,r10
800049fe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a02:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004a06:	c1 a8       	rjmp	80004a3a <_vfprintf_r+0xea6>
80004a08:	41 09       	lddsp	r9,sp[0x40]
80004a0a:	59 f8       	cp.w	r8,31
80004a0c:	e0 89 00 13 	brgt	80004a32 <_vfprintf_r+0xe9e>
80004a10:	f2 cb ff fc 	sub	r11,r9,-4
80004a14:	51 0b       	stdsp	sp[0x40],r11
80004a16:	72 09       	ld.w	r9,r9[0x0]
80004a18:	fa c6 f9 44 	sub	r6,sp,-1724
80004a1c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004a20:	2f f8       	sub	r8,-1
80004a22:	f7 49 fd 88 	st.w	r11[-632],r9
80004a26:	fb 48 06 b4 	st.w	sp[1716],r8
80004a2a:	14 97       	mov	r7,r10
80004a2c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004a30:	c0 58       	rjmp	80004a3a <_vfprintf_r+0xea6>
80004a32:	92 18       	ld.sh	r8,r9[0x2]
80004a34:	14 97       	mov	r7,r10
80004a36:	2f c9       	sub	r9,-4
80004a38:	51 09       	stdsp	sp[0x40],r9
80004a3a:	5c 78       	castu.h	r8
80004a3c:	50 18       	stdsp	sp[0x4],r8
80004a3e:	c4 68       	rjmp	80004aca <_vfprintf_r+0xf36>
80004a40:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a44:	40 3c       	lddsp	r12,sp[0xc]
80004a46:	58 0c       	cp.w	r12,0
80004a48:	c1 d0       	breq	80004a82 <_vfprintf_r+0xeee>
80004a4a:	10 36       	cp.w	r6,r8
80004a4c:	c0 64       	brge	80004a58 <_vfprintf_r+0xec4>
80004a4e:	fa cb f9 44 	sub	r11,sp,-1724
80004a52:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a56:	c1 f8       	rjmp	80004a94 <_vfprintf_r+0xf00>
80004a58:	fa c8 f9 50 	sub	r8,sp,-1712
80004a5c:	1a d8       	st.w	--sp,r8
80004a5e:	fa c8 fa b8 	sub	r8,sp,-1352
80004a62:	0c 9b       	mov	r11,r6
80004a64:	1a d8       	st.w	--sp,r8
80004a66:	fa c8 fb b4 	sub	r8,sp,-1100
80004a6a:	04 9a       	mov	r10,r2
80004a6c:	1a d8       	st.w	--sp,r8
80004a6e:	08 9c       	mov	r12,r4
80004a70:	fa c8 f9 40 	sub	r8,sp,-1728
80004a74:	fa c9 ff b4 	sub	r9,sp,-76
80004a78:	fe b0 f6 f8 	rcall	80003868 <get_arg>
80004a7c:	2f dd       	sub	sp,-12
80004a7e:	78 0b       	ld.w	r11,r12[0x0]
80004a80:	c2 48       	rjmp	80004ac8 <_vfprintf_r+0xf34>
80004a82:	ee ca ff ff 	sub	r10,r7,-1
80004a86:	10 37       	cp.w	r7,r8
80004a88:	c0 94       	brge	80004a9a <_vfprintf_r+0xf06>
80004a8a:	fa c9 f9 44 	sub	r9,sp,-1724
80004a8e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a92:	14 97       	mov	r7,r10
80004a94:	ec fb fd 88 	ld.w	r11,r6[-632]
80004a98:	c1 88       	rjmp	80004ac8 <_vfprintf_r+0xf34>
80004a9a:	41 09       	lddsp	r9,sp[0x40]
80004a9c:	59 f8       	cp.w	r8,31
80004a9e:	e0 89 00 11 	brgt	80004ac0 <_vfprintf_r+0xf2c>
80004aa2:	f2 cb ff fc 	sub	r11,r9,-4
80004aa6:	51 0b       	stdsp	sp[0x40],r11
80004aa8:	fa c6 f9 44 	sub	r6,sp,-1724
80004aac:	72 0b       	ld.w	r11,r9[0x0]
80004aae:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ab2:	f3 4b fd 88 	st.w	r9[-632],r11
80004ab6:	2f f8       	sub	r8,-1
80004ab8:	14 97       	mov	r7,r10
80004aba:	fb 48 06 b4 	st.w	sp[1716],r8
80004abe:	c0 58       	rjmp	80004ac8 <_vfprintf_r+0xf34>
80004ac0:	72 0b       	ld.w	r11,r9[0x0]
80004ac2:	14 97       	mov	r7,r10
80004ac4:	2f c9       	sub	r9,-4
80004ac6:	51 09       	stdsp	sp[0x40],r9
80004ac8:	50 1b       	stdsp	sp[0x4],r11
80004aca:	30 0e       	mov	lr,0
80004acc:	50 0e       	stdsp	sp[0x0],lr
80004ace:	1c 98       	mov	r8,lr
80004ad0:	e0 8f 02 fe 	bral	800050cc <_vfprintf_r+0x1538>
80004ad4:	50 a7       	stdsp	sp[0x28],r7
80004ad6:	50 80       	stdsp	sp[0x20],r0
80004ad8:	0c 97       	mov	r7,r6
80004ada:	04 94       	mov	r4,r2
80004adc:	06 96       	mov	r6,r3
80004ade:	02 92       	mov	r2,r1
80004ae0:	40 93       	lddsp	r3,sp[0x24]
80004ae2:	40 41       	lddsp	r1,sp[0x10]
80004ae4:	0e 99       	mov	r9,r7
80004ae6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004aea:	40 3c       	lddsp	r12,sp[0xc]
80004aec:	58 0c       	cp.w	r12,0
80004aee:	c1 d0       	breq	80004b28 <_vfprintf_r+0xf94>
80004af0:	10 36       	cp.w	r6,r8
80004af2:	c0 64       	brge	80004afe <_vfprintf_r+0xf6a>
80004af4:	fa cb f9 44 	sub	r11,sp,-1724
80004af8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004afc:	c1 d8       	rjmp	80004b36 <_vfprintf_r+0xfa2>
80004afe:	fa c8 f9 50 	sub	r8,sp,-1712
80004b02:	1a d8       	st.w	--sp,r8
80004b04:	fa c8 fa b8 	sub	r8,sp,-1352
80004b08:	1a d8       	st.w	--sp,r8
80004b0a:	fa c8 fb b4 	sub	r8,sp,-1100
80004b0e:	1a d8       	st.w	--sp,r8
80004b10:	fa c9 ff b4 	sub	r9,sp,-76
80004b14:	fa c8 f9 40 	sub	r8,sp,-1728
80004b18:	04 9a       	mov	r10,r2
80004b1a:	0c 9b       	mov	r11,r6
80004b1c:	08 9c       	mov	r12,r4
80004b1e:	fe b0 f6 a5 	rcall	80003868 <get_arg>
80004b22:	2f dd       	sub	sp,-12
80004b24:	78 09       	ld.w	r9,r12[0x0]
80004b26:	c2 18       	rjmp	80004b68 <_vfprintf_r+0xfd4>
80004b28:	2f f7       	sub	r7,-1
80004b2a:	10 39       	cp.w	r9,r8
80004b2c:	c0 84       	brge	80004b3c <_vfprintf_r+0xfa8>
80004b2e:	fa ca f9 44 	sub	r10,sp,-1724
80004b32:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004b36:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004b3a:	c1 78       	rjmp	80004b68 <_vfprintf_r+0xfd4>
80004b3c:	41 09       	lddsp	r9,sp[0x40]
80004b3e:	59 f8       	cp.w	r8,31
80004b40:	e0 89 00 10 	brgt	80004b60 <_vfprintf_r+0xfcc>
80004b44:	f2 ca ff fc 	sub	r10,r9,-4
80004b48:	51 0a       	stdsp	sp[0x40],r10
80004b4a:	fa c6 f9 44 	sub	r6,sp,-1724
80004b4e:	72 09       	ld.w	r9,r9[0x0]
80004b50:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004b54:	f5 49 fd 88 	st.w	r10[-632],r9
80004b58:	2f f8       	sub	r8,-1
80004b5a:	fb 48 06 b4 	st.w	sp[1716],r8
80004b5e:	c0 58       	rjmp	80004b68 <_vfprintf_r+0xfd4>
80004b60:	f2 c8 ff fc 	sub	r8,r9,-4
80004b64:	51 08       	stdsp	sp[0x40],r8
80004b66:	72 09       	ld.w	r9,r9[0x0]
80004b68:	33 08       	mov	r8,48
80004b6a:	fb 68 06 b8 	st.b	sp[1720],r8
80004b6e:	37 88       	mov	r8,120
80004b70:	30 0e       	mov	lr,0
80004b72:	fb 68 06 b9 	st.b	sp[1721],r8
80004b76:	fe cc b4 c6 	sub	r12,pc,-19258
80004b7a:	50 19       	stdsp	sp[0x4],r9
80004b7c:	a1 b5       	sbr	r5,0x1
80004b7e:	50 0e       	stdsp	sp[0x0],lr
80004b80:	50 dc       	stdsp	sp[0x34],r12
80004b82:	30 28       	mov	r8,2
80004b84:	37 80       	mov	r0,120
80004b86:	e0 8f 02 a3 	bral	800050cc <_vfprintf_r+0x1538>
80004b8a:	50 a7       	stdsp	sp[0x28],r7
80004b8c:	50 80       	stdsp	sp[0x20],r0
80004b8e:	10 90       	mov	r0,r8
80004b90:	30 08       	mov	r8,0
80004b92:	fb 68 06 bb 	st.b	sp[1723],r8
80004b96:	0c 97       	mov	r7,r6
80004b98:	04 94       	mov	r4,r2
80004b9a:	06 96       	mov	r6,r3
80004b9c:	02 92       	mov	r2,r1
80004b9e:	40 93       	lddsp	r3,sp[0x24]
80004ba0:	40 41       	lddsp	r1,sp[0x10]
80004ba2:	0e 99       	mov	r9,r7
80004ba4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ba8:	40 3b       	lddsp	r11,sp[0xc]
80004baa:	58 0b       	cp.w	r11,0
80004bac:	c1 d0       	breq	80004be6 <_vfprintf_r+0x1052>
80004bae:	10 36       	cp.w	r6,r8
80004bb0:	c0 64       	brge	80004bbc <_vfprintf_r+0x1028>
80004bb2:	fa ca f9 44 	sub	r10,sp,-1724
80004bb6:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004bba:	c1 d8       	rjmp	80004bf4 <_vfprintf_r+0x1060>
80004bbc:	fa c8 f9 50 	sub	r8,sp,-1712
80004bc0:	1a d8       	st.w	--sp,r8
80004bc2:	fa c8 fa b8 	sub	r8,sp,-1352
80004bc6:	1a d8       	st.w	--sp,r8
80004bc8:	fa c8 fb b4 	sub	r8,sp,-1100
80004bcc:	0c 9b       	mov	r11,r6
80004bce:	1a d8       	st.w	--sp,r8
80004bd0:	04 9a       	mov	r10,r2
80004bd2:	fa c8 f9 40 	sub	r8,sp,-1728
80004bd6:	fa c9 ff b4 	sub	r9,sp,-76
80004bda:	08 9c       	mov	r12,r4
80004bdc:	fe b0 f6 46 	rcall	80003868 <get_arg>
80004be0:	2f dd       	sub	sp,-12
80004be2:	78 06       	ld.w	r6,r12[0x0]
80004be4:	c2 08       	rjmp	80004c24 <_vfprintf_r+0x1090>
80004be6:	2f f7       	sub	r7,-1
80004be8:	10 39       	cp.w	r9,r8
80004bea:	c0 84       	brge	80004bfa <_vfprintf_r+0x1066>
80004bec:	fa c9 f9 44 	sub	r9,sp,-1724
80004bf0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bf4:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004bf8:	c1 68       	rjmp	80004c24 <_vfprintf_r+0x1090>
80004bfa:	41 09       	lddsp	r9,sp[0x40]
80004bfc:	59 f8       	cp.w	r8,31
80004bfe:	e0 89 00 10 	brgt	80004c1e <_vfprintf_r+0x108a>
80004c02:	f2 ca ff fc 	sub	r10,r9,-4
80004c06:	51 0a       	stdsp	sp[0x40],r10
80004c08:	72 06       	ld.w	r6,r9[0x0]
80004c0a:	fa ce f9 44 	sub	lr,sp,-1724
80004c0e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004c12:	f3 46 fd 88 	st.w	r9[-632],r6
80004c16:	2f f8       	sub	r8,-1
80004c18:	fb 48 06 b4 	st.w	sp[1716],r8
80004c1c:	c0 48       	rjmp	80004c24 <_vfprintf_r+0x1090>
80004c1e:	72 06       	ld.w	r6,r9[0x0]
80004c20:	2f c9       	sub	r9,-4
80004c22:	51 09       	stdsp	sp[0x40],r9
80004c24:	40 2c       	lddsp	r12,sp[0x8]
80004c26:	58 0c       	cp.w	r12,0
80004c28:	c1 05       	brlt	80004c48 <_vfprintf_r+0x10b4>
80004c2a:	18 9a       	mov	r10,r12
80004c2c:	30 0b       	mov	r11,0
80004c2e:	0c 9c       	mov	r12,r6
80004c30:	e0 a0 14 58 	rcall	800074e0 <memchr>
80004c34:	e0 80 02 df 	breq	800051f2 <_vfprintf_r+0x165e>
80004c38:	f8 06 01 02 	sub	r2,r12,r6
80004c3c:	40 2b       	lddsp	r11,sp[0x8]
80004c3e:	16 32       	cp.w	r2,r11
80004c40:	e0 89 02 d9 	brgt	800051f2 <_vfprintf_r+0x165e>
80004c44:	e0 8f 02 d4 	bral	800051ec <_vfprintf_r+0x1658>
80004c48:	30 0a       	mov	r10,0
80004c4a:	0c 9c       	mov	r12,r6
80004c4c:	50 2a       	stdsp	sp[0x8],r10
80004c4e:	e0 a0 19 2b 	rcall	80007ea4 <strlen>
80004c52:	18 92       	mov	r2,r12
80004c54:	e0 8f 02 d2 	bral	800051f8 <_vfprintf_r+0x1664>
80004c58:	50 a7       	stdsp	sp[0x28],r7
80004c5a:	50 80       	stdsp	sp[0x20],r0
80004c5c:	0c 97       	mov	r7,r6
80004c5e:	04 94       	mov	r4,r2
80004c60:	06 96       	mov	r6,r3
80004c62:	02 92       	mov	r2,r1
80004c64:	40 93       	lddsp	r3,sp[0x24]
80004c66:	10 90       	mov	r0,r8
80004c68:	40 41       	lddsp	r1,sp[0x10]
80004c6a:	a5 a5       	sbr	r5,0x4
80004c6c:	c0 a8       	rjmp	80004c80 <_vfprintf_r+0x10ec>
80004c6e:	50 a7       	stdsp	sp[0x28],r7
80004c70:	50 80       	stdsp	sp[0x20],r0
80004c72:	0c 97       	mov	r7,r6
80004c74:	04 94       	mov	r4,r2
80004c76:	06 96       	mov	r6,r3
80004c78:	02 92       	mov	r2,r1
80004c7a:	40 93       	lddsp	r3,sp[0x24]
80004c7c:	10 90       	mov	r0,r8
80004c7e:	40 41       	lddsp	r1,sp[0x10]
80004c80:	ed b5 00 05 	bld	r5,0x5
80004c84:	c5 61       	brne	80004d30 <_vfprintf_r+0x119c>
80004c86:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c8a:	40 39       	lddsp	r9,sp[0xc]
80004c8c:	58 09       	cp.w	r9,0
80004c8e:	c2 10       	breq	80004cd0 <_vfprintf_r+0x113c>
80004c90:	10 36       	cp.w	r6,r8
80004c92:	c0 74       	brge	80004ca0 <_vfprintf_r+0x110c>
80004c94:	fa c8 f9 44 	sub	r8,sp,-1724
80004c98:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004c9c:	c2 38       	rjmp	80004ce2 <_vfprintf_r+0x114e>
80004c9e:	d7 03       	nop
80004ca0:	fa c8 f9 50 	sub	r8,sp,-1712
80004ca4:	1a d8       	st.w	--sp,r8
80004ca6:	fa c8 fa b8 	sub	r8,sp,-1352
80004caa:	1a d8       	st.w	--sp,r8
80004cac:	fa c8 fb b4 	sub	r8,sp,-1100
80004cb0:	1a d8       	st.w	--sp,r8
80004cb2:	fa c8 f9 40 	sub	r8,sp,-1728
80004cb6:	fa c9 ff b4 	sub	r9,sp,-76
80004cba:	04 9a       	mov	r10,r2
80004cbc:	0c 9b       	mov	r11,r6
80004cbe:	08 9c       	mov	r12,r4
80004cc0:	fe b0 f5 d4 	rcall	80003868 <get_arg>
80004cc4:	2f dd       	sub	sp,-12
80004cc6:	f8 e8 00 00 	ld.d	r8,r12[0]
80004cca:	fa e9 00 00 	st.d	sp[0],r8
80004cce:	c2 e8       	rjmp	80004d2a <_vfprintf_r+0x1196>
80004cd0:	ee ca ff ff 	sub	r10,r7,-1
80004cd4:	10 37       	cp.w	r7,r8
80004cd6:	c0 b4       	brge	80004cec <_vfprintf_r+0x1158>
80004cd8:	fa c8 f9 44 	sub	r8,sp,-1724
80004cdc:	14 97       	mov	r7,r10
80004cde:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004ce2:	ec ea fd 88 	ld.d	r10,r6[-632]
80004ce6:	fa eb 00 00 	st.d	sp[0],r10
80004cea:	c2 08       	rjmp	80004d2a <_vfprintf_r+0x1196>
80004cec:	41 09       	lddsp	r9,sp[0x40]
80004cee:	59 f8       	cp.w	r8,31
80004cf0:	e0 89 00 16 	brgt	80004d1c <_vfprintf_r+0x1188>
80004cf4:	f2 e6 00 00 	ld.d	r6,r9[0]
80004cf8:	f2 cb ff f8 	sub	r11,r9,-8
80004cfc:	fa e7 00 00 	st.d	sp[0],r6
80004d00:	51 0b       	stdsp	sp[0x40],r11
80004d02:	fa c6 f9 44 	sub	r6,sp,-1724
80004d06:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d0a:	fa e6 00 00 	ld.d	r6,sp[0]
80004d0e:	f2 e7 fd 88 	st.d	r9[-632],r6
80004d12:	2f f8       	sub	r8,-1
80004d14:	14 97       	mov	r7,r10
80004d16:	fb 48 06 b4 	st.w	sp[1716],r8
80004d1a:	c0 88       	rjmp	80004d2a <_vfprintf_r+0x1196>
80004d1c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d20:	2f 89       	sub	r9,-8
80004d22:	fa e7 00 00 	st.d	sp[0],r6
80004d26:	51 09       	stdsp	sp[0x40],r9
80004d28:	14 97       	mov	r7,r10
80004d2a:	30 18       	mov	r8,1
80004d2c:	e0 8f 01 d0 	bral	800050cc <_vfprintf_r+0x1538>
80004d30:	ed b5 00 04 	bld	r5,0x4
80004d34:	c1 61       	brne	80004d60 <_vfprintf_r+0x11cc>
80004d36:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d3a:	40 3e       	lddsp	lr,sp[0xc]
80004d3c:	58 0e       	cp.w	lr,0
80004d3e:	c0 80       	breq	80004d4e <_vfprintf_r+0x11ba>
80004d40:	10 36       	cp.w	r6,r8
80004d42:	c6 74       	brge	80004e10 <_vfprintf_r+0x127c>
80004d44:	fa cc f9 44 	sub	r12,sp,-1724
80004d48:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d4c:	c8 08       	rjmp	80004e4c <_vfprintf_r+0x12b8>
80004d4e:	ee ca ff ff 	sub	r10,r7,-1
80004d52:	10 37       	cp.w	r7,r8
80004d54:	c7 f4       	brge	80004e52 <_vfprintf_r+0x12be>
80004d56:	fa cb f9 44 	sub	r11,sp,-1724
80004d5a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d5e:	c7 68       	rjmp	80004e4a <_vfprintf_r+0x12b6>
80004d60:	ed b5 00 06 	bld	r5,0x6
80004d64:	c4 a1       	brne	80004df8 <_vfprintf_r+0x1264>
80004d66:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d6a:	40 3c       	lddsp	r12,sp[0xc]
80004d6c:	58 0c       	cp.w	r12,0
80004d6e:	c1 d0       	breq	80004da8 <_vfprintf_r+0x1214>
80004d70:	10 36       	cp.w	r6,r8
80004d72:	c0 64       	brge	80004d7e <_vfprintf_r+0x11ea>
80004d74:	fa cb f9 44 	sub	r11,sp,-1724
80004d78:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d7c:	c1 f8       	rjmp	80004dba <_vfprintf_r+0x1226>
80004d7e:	fa c8 f9 50 	sub	r8,sp,-1712
80004d82:	1a d8       	st.w	--sp,r8
80004d84:	fa c8 fa b8 	sub	r8,sp,-1352
80004d88:	1a d8       	st.w	--sp,r8
80004d8a:	fa c8 fb b4 	sub	r8,sp,-1100
80004d8e:	1a d8       	st.w	--sp,r8
80004d90:	fa c8 f9 40 	sub	r8,sp,-1728
80004d94:	fa c9 ff b4 	sub	r9,sp,-76
80004d98:	04 9a       	mov	r10,r2
80004d9a:	0c 9b       	mov	r11,r6
80004d9c:	08 9c       	mov	r12,r4
80004d9e:	fe b0 f5 65 	rcall	80003868 <get_arg>
80004da2:	2f dd       	sub	sp,-12
80004da4:	98 18       	ld.sh	r8,r12[0x2]
80004da6:	c2 68       	rjmp	80004df2 <_vfprintf_r+0x125e>
80004da8:	ee ca ff ff 	sub	r10,r7,-1
80004dac:	10 37       	cp.w	r7,r8
80004dae:	c0 94       	brge	80004dc0 <_vfprintf_r+0x122c>
80004db0:	fa c9 f9 44 	sub	r9,sp,-1724
80004db4:	14 97       	mov	r7,r10
80004db6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004dba:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004dbe:	c1 a8       	rjmp	80004df2 <_vfprintf_r+0x125e>
80004dc0:	41 09       	lddsp	r9,sp[0x40]
80004dc2:	59 f8       	cp.w	r8,31
80004dc4:	e0 89 00 13 	brgt	80004dea <_vfprintf_r+0x1256>
80004dc8:	f2 cb ff fc 	sub	r11,r9,-4
80004dcc:	51 0b       	stdsp	sp[0x40],r11
80004dce:	72 09       	ld.w	r9,r9[0x0]
80004dd0:	fa c6 f9 44 	sub	r6,sp,-1724
80004dd4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004dd8:	2f f8       	sub	r8,-1
80004dda:	f7 49 fd 88 	st.w	r11[-632],r9
80004dde:	fb 48 06 b4 	st.w	sp[1716],r8
80004de2:	14 97       	mov	r7,r10
80004de4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004de8:	c0 58       	rjmp	80004df2 <_vfprintf_r+0x125e>
80004dea:	92 18       	ld.sh	r8,r9[0x2]
80004dec:	14 97       	mov	r7,r10
80004dee:	2f c9       	sub	r9,-4
80004df0:	51 09       	stdsp	sp[0x40],r9
80004df2:	5c 78       	castu.h	r8
80004df4:	50 18       	stdsp	sp[0x4],r8
80004df6:	c4 68       	rjmp	80004e82 <_vfprintf_r+0x12ee>
80004df8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dfc:	40 3c       	lddsp	r12,sp[0xc]
80004dfe:	58 0c       	cp.w	r12,0
80004e00:	c1 d0       	breq	80004e3a <_vfprintf_r+0x12a6>
80004e02:	10 36       	cp.w	r6,r8
80004e04:	c0 64       	brge	80004e10 <_vfprintf_r+0x127c>
80004e06:	fa cb f9 44 	sub	r11,sp,-1724
80004e0a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e0e:	c1 f8       	rjmp	80004e4c <_vfprintf_r+0x12b8>
80004e10:	fa c8 f9 50 	sub	r8,sp,-1712
80004e14:	1a d8       	st.w	--sp,r8
80004e16:	fa c8 fa b8 	sub	r8,sp,-1352
80004e1a:	0c 9b       	mov	r11,r6
80004e1c:	1a d8       	st.w	--sp,r8
80004e1e:	fa c8 fb b4 	sub	r8,sp,-1100
80004e22:	04 9a       	mov	r10,r2
80004e24:	1a d8       	st.w	--sp,r8
80004e26:	08 9c       	mov	r12,r4
80004e28:	fa c8 f9 40 	sub	r8,sp,-1728
80004e2c:	fa c9 ff b4 	sub	r9,sp,-76
80004e30:	fe b0 f5 1c 	rcall	80003868 <get_arg>
80004e34:	2f dd       	sub	sp,-12
80004e36:	78 0b       	ld.w	r11,r12[0x0]
80004e38:	c2 48       	rjmp	80004e80 <_vfprintf_r+0x12ec>
80004e3a:	ee ca ff ff 	sub	r10,r7,-1
80004e3e:	10 37       	cp.w	r7,r8
80004e40:	c0 94       	brge	80004e52 <_vfprintf_r+0x12be>
80004e42:	fa c9 f9 44 	sub	r9,sp,-1724
80004e46:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e4a:	14 97       	mov	r7,r10
80004e4c:	ec fb fd 88 	ld.w	r11,r6[-632]
80004e50:	c1 88       	rjmp	80004e80 <_vfprintf_r+0x12ec>
80004e52:	41 09       	lddsp	r9,sp[0x40]
80004e54:	59 f8       	cp.w	r8,31
80004e56:	e0 89 00 11 	brgt	80004e78 <_vfprintf_r+0x12e4>
80004e5a:	f2 cb ff fc 	sub	r11,r9,-4
80004e5e:	51 0b       	stdsp	sp[0x40],r11
80004e60:	fa c6 f9 44 	sub	r6,sp,-1724
80004e64:	72 0b       	ld.w	r11,r9[0x0]
80004e66:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e6a:	f3 4b fd 88 	st.w	r9[-632],r11
80004e6e:	2f f8       	sub	r8,-1
80004e70:	14 97       	mov	r7,r10
80004e72:	fb 48 06 b4 	st.w	sp[1716],r8
80004e76:	c0 58       	rjmp	80004e80 <_vfprintf_r+0x12ec>
80004e78:	72 0b       	ld.w	r11,r9[0x0]
80004e7a:	14 97       	mov	r7,r10
80004e7c:	2f c9       	sub	r9,-4
80004e7e:	51 09       	stdsp	sp[0x40],r9
80004e80:	50 1b       	stdsp	sp[0x4],r11
80004e82:	30 0e       	mov	lr,0
80004e84:	30 18       	mov	r8,1
80004e86:	50 0e       	stdsp	sp[0x0],lr
80004e88:	c2 29       	rjmp	800050cc <_vfprintf_r+0x1538>
80004e8a:	50 a7       	stdsp	sp[0x28],r7
80004e8c:	50 80       	stdsp	sp[0x20],r0
80004e8e:	0c 97       	mov	r7,r6
80004e90:	04 94       	mov	r4,r2
80004e92:	06 96       	mov	r6,r3
80004e94:	02 92       	mov	r2,r1
80004e96:	fe cc b7 e6 	sub	r12,pc,-18458
80004e9a:	40 93       	lddsp	r3,sp[0x24]
80004e9c:	10 90       	mov	r0,r8
80004e9e:	40 41       	lddsp	r1,sp[0x10]
80004ea0:	50 dc       	stdsp	sp[0x34],r12
80004ea2:	ed b5 00 05 	bld	r5,0x5
80004ea6:	c5 51       	brne	80004f50 <_vfprintf_r+0x13bc>
80004ea8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004eac:	40 3b       	lddsp	r11,sp[0xc]
80004eae:	58 0b       	cp.w	r11,0
80004eb0:	c2 20       	breq	80004ef4 <_vfprintf_r+0x1360>
80004eb2:	10 36       	cp.w	r6,r8
80004eb4:	c0 a4       	brge	80004ec8 <_vfprintf_r+0x1334>
80004eb6:	fa ca f9 44 	sub	r10,sp,-1724
80004eba:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004ebe:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004ec2:	fa e9 00 00 	st.d	sp[0],r8
80004ec6:	cf 28       	rjmp	800050aa <_vfprintf_r+0x1516>
80004ec8:	fa c8 f9 50 	sub	r8,sp,-1712
80004ecc:	1a d8       	st.w	--sp,r8
80004ece:	fa c8 fa b8 	sub	r8,sp,-1352
80004ed2:	04 9a       	mov	r10,r2
80004ed4:	1a d8       	st.w	--sp,r8
80004ed6:	0c 9b       	mov	r11,r6
80004ed8:	fa c8 fb b4 	sub	r8,sp,-1100
80004edc:	08 9c       	mov	r12,r4
80004ede:	1a d8       	st.w	--sp,r8
80004ee0:	fa c8 f9 40 	sub	r8,sp,-1728
80004ee4:	fa c9 ff b4 	sub	r9,sp,-76
80004ee8:	fe b0 f4 c0 	rcall	80003868 <get_arg>
80004eec:	2f dd       	sub	sp,-12
80004eee:	f8 ea 00 00 	ld.d	r10,r12[0]
80004ef2:	c0 c8       	rjmp	80004f0a <_vfprintf_r+0x1376>
80004ef4:	ee ca ff ff 	sub	r10,r7,-1
80004ef8:	10 37       	cp.w	r7,r8
80004efa:	c0 b4       	brge	80004f10 <_vfprintf_r+0x137c>
80004efc:	fa c9 f9 44 	sub	r9,sp,-1724
80004f00:	14 97       	mov	r7,r10
80004f02:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004f06:	ec ea fd 88 	ld.d	r10,r6[-632]
80004f0a:	fa eb 00 00 	st.d	sp[0],r10
80004f0e:	cc e8       	rjmp	800050aa <_vfprintf_r+0x1516>
80004f10:	41 09       	lddsp	r9,sp[0x40]
80004f12:	59 f8       	cp.w	r8,31
80004f14:	e0 89 00 16 	brgt	80004f40 <_vfprintf_r+0x13ac>
80004f18:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f1c:	f2 cb ff f8 	sub	r11,r9,-8
80004f20:	fa e7 00 00 	st.d	sp[0],r6
80004f24:	51 0b       	stdsp	sp[0x40],r11
80004f26:	fa c6 f9 44 	sub	r6,sp,-1724
80004f2a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f2e:	fa e6 00 00 	ld.d	r6,sp[0]
80004f32:	f2 e7 fd 88 	st.d	r9[-632],r6
80004f36:	2f f8       	sub	r8,-1
80004f38:	14 97       	mov	r7,r10
80004f3a:	fb 48 06 b4 	st.w	sp[1716],r8
80004f3e:	cb 68       	rjmp	800050aa <_vfprintf_r+0x1516>
80004f40:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f44:	2f 89       	sub	r9,-8
80004f46:	fa e7 00 00 	st.d	sp[0],r6
80004f4a:	51 09       	stdsp	sp[0x40],r9
80004f4c:	14 97       	mov	r7,r10
80004f4e:	ca e8       	rjmp	800050aa <_vfprintf_r+0x1516>
80004f50:	ed b5 00 04 	bld	r5,0x4
80004f54:	c1 71       	brne	80004f82 <_vfprintf_r+0x13ee>
80004f56:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f5a:	40 3e       	lddsp	lr,sp[0xc]
80004f5c:	58 0e       	cp.w	lr,0
80004f5e:	c0 80       	breq	80004f6e <_vfprintf_r+0x13da>
80004f60:	10 36       	cp.w	r6,r8
80004f62:	c6 94       	brge	80005034 <_vfprintf_r+0x14a0>
80004f64:	fa cc f9 44 	sub	r12,sp,-1724
80004f68:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004f6c:	c8 28       	rjmp	80005070 <_vfprintf_r+0x14dc>
80004f6e:	ee ca ff ff 	sub	r10,r7,-1
80004f72:	10 37       	cp.w	r7,r8
80004f74:	e0 84 00 81 	brge	80005076 <_vfprintf_r+0x14e2>
80004f78:	fa cb f9 44 	sub	r11,sp,-1724
80004f7c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f80:	c7 78       	rjmp	8000506e <_vfprintf_r+0x14da>
80004f82:	ed b5 00 06 	bld	r5,0x6
80004f86:	c4 b1       	brne	8000501c <_vfprintf_r+0x1488>
80004f88:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f8c:	40 3c       	lddsp	r12,sp[0xc]
80004f8e:	58 0c       	cp.w	r12,0
80004f90:	c1 d0       	breq	80004fca <_vfprintf_r+0x1436>
80004f92:	10 36       	cp.w	r6,r8
80004f94:	c0 64       	brge	80004fa0 <_vfprintf_r+0x140c>
80004f96:	fa cb f9 44 	sub	r11,sp,-1724
80004f9a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f9e:	c1 f8       	rjmp	80004fdc <_vfprintf_r+0x1448>
80004fa0:	fa c8 f9 50 	sub	r8,sp,-1712
80004fa4:	1a d8       	st.w	--sp,r8
80004fa6:	fa c8 fa b8 	sub	r8,sp,-1352
80004faa:	1a d8       	st.w	--sp,r8
80004fac:	fa c8 fb b4 	sub	r8,sp,-1100
80004fb0:	1a d8       	st.w	--sp,r8
80004fb2:	fa c8 f9 40 	sub	r8,sp,-1728
80004fb6:	fa c9 ff b4 	sub	r9,sp,-76
80004fba:	04 9a       	mov	r10,r2
80004fbc:	0c 9b       	mov	r11,r6
80004fbe:	08 9c       	mov	r12,r4
80004fc0:	fe b0 f4 54 	rcall	80003868 <get_arg>
80004fc4:	2f dd       	sub	sp,-12
80004fc6:	98 18       	ld.sh	r8,r12[0x2]
80004fc8:	c2 78       	rjmp	80005016 <_vfprintf_r+0x1482>
80004fca:	ee ca ff ff 	sub	r10,r7,-1
80004fce:	10 37       	cp.w	r7,r8
80004fd0:	c0 a4       	brge	80004fe4 <_vfprintf_r+0x1450>
80004fd2:	fa c9 f9 44 	sub	r9,sp,-1724
80004fd6:	14 97       	mov	r7,r10
80004fd8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004fdc:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004fe0:	c1 b8       	rjmp	80005016 <_vfprintf_r+0x1482>
80004fe2:	d7 03       	nop
80004fe4:	41 09       	lddsp	r9,sp[0x40]
80004fe6:	59 f8       	cp.w	r8,31
80004fe8:	e0 89 00 13 	brgt	8000500e <_vfprintf_r+0x147a>
80004fec:	f2 cb ff fc 	sub	r11,r9,-4
80004ff0:	51 0b       	stdsp	sp[0x40],r11
80004ff2:	72 09       	ld.w	r9,r9[0x0]
80004ff4:	fa c6 f9 44 	sub	r6,sp,-1724
80004ff8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004ffc:	2f f8       	sub	r8,-1
80004ffe:	f7 49 fd 88 	st.w	r11[-632],r9
80005002:	fb 48 06 b4 	st.w	sp[1716],r8
80005006:	14 97       	mov	r7,r10
80005008:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000500c:	c0 58       	rjmp	80005016 <_vfprintf_r+0x1482>
8000500e:	92 18       	ld.sh	r8,r9[0x2]
80005010:	14 97       	mov	r7,r10
80005012:	2f c9       	sub	r9,-4
80005014:	51 09       	stdsp	sp[0x40],r9
80005016:	5c 78       	castu.h	r8
80005018:	50 18       	stdsp	sp[0x4],r8
8000501a:	c4 68       	rjmp	800050a6 <_vfprintf_r+0x1512>
8000501c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005020:	40 3c       	lddsp	r12,sp[0xc]
80005022:	58 0c       	cp.w	r12,0
80005024:	c1 d0       	breq	8000505e <_vfprintf_r+0x14ca>
80005026:	10 36       	cp.w	r6,r8
80005028:	c0 64       	brge	80005034 <_vfprintf_r+0x14a0>
8000502a:	fa cb f9 44 	sub	r11,sp,-1724
8000502e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005032:	c1 f8       	rjmp	80005070 <_vfprintf_r+0x14dc>
80005034:	fa c8 f9 50 	sub	r8,sp,-1712
80005038:	1a d8       	st.w	--sp,r8
8000503a:	fa c8 fa b8 	sub	r8,sp,-1352
8000503e:	0c 9b       	mov	r11,r6
80005040:	1a d8       	st.w	--sp,r8
80005042:	fa c8 fb b4 	sub	r8,sp,-1100
80005046:	04 9a       	mov	r10,r2
80005048:	1a d8       	st.w	--sp,r8
8000504a:	08 9c       	mov	r12,r4
8000504c:	fa c8 f9 40 	sub	r8,sp,-1728
80005050:	fa c9 ff b4 	sub	r9,sp,-76
80005054:	fe b0 f4 0a 	rcall	80003868 <get_arg>
80005058:	2f dd       	sub	sp,-12
8000505a:	78 0b       	ld.w	r11,r12[0x0]
8000505c:	c2 48       	rjmp	800050a4 <_vfprintf_r+0x1510>
8000505e:	ee ca ff ff 	sub	r10,r7,-1
80005062:	10 37       	cp.w	r7,r8
80005064:	c0 94       	brge	80005076 <_vfprintf_r+0x14e2>
80005066:	fa c9 f9 44 	sub	r9,sp,-1724
8000506a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000506e:	14 97       	mov	r7,r10
80005070:	ec fb fd 88 	ld.w	r11,r6[-632]
80005074:	c1 88       	rjmp	800050a4 <_vfprintf_r+0x1510>
80005076:	41 09       	lddsp	r9,sp[0x40]
80005078:	59 f8       	cp.w	r8,31
8000507a:	e0 89 00 11 	brgt	8000509c <_vfprintf_r+0x1508>
8000507e:	f2 cb ff fc 	sub	r11,r9,-4
80005082:	51 0b       	stdsp	sp[0x40],r11
80005084:	fa c6 f9 44 	sub	r6,sp,-1724
80005088:	72 0b       	ld.w	r11,r9[0x0]
8000508a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000508e:	f3 4b fd 88 	st.w	r9[-632],r11
80005092:	2f f8       	sub	r8,-1
80005094:	14 97       	mov	r7,r10
80005096:	fb 48 06 b4 	st.w	sp[1716],r8
8000509a:	c0 58       	rjmp	800050a4 <_vfprintf_r+0x1510>
8000509c:	72 0b       	ld.w	r11,r9[0x0]
8000509e:	14 97       	mov	r7,r10
800050a0:	2f c9       	sub	r9,-4
800050a2:	51 09       	stdsp	sp[0x40],r9
800050a4:	50 1b       	stdsp	sp[0x4],r11
800050a6:	30 0e       	mov	lr,0
800050a8:	50 0e       	stdsp	sp[0x0],lr
800050aa:	40 08       	lddsp	r8,sp[0x0]
800050ac:	40 1c       	lddsp	r12,sp[0x4]
800050ae:	18 48       	or	r8,r12
800050b0:	5f 19       	srne	r9
800050b2:	0a 98       	mov	r8,r5
800050b4:	eb e9 00 09 	and	r9,r5,r9
800050b8:	a1 b8       	sbr	r8,0x1
800050ba:	58 09       	cp.w	r9,0
800050bc:	c0 70       	breq	800050ca <_vfprintf_r+0x1536>
800050be:	10 95       	mov	r5,r8
800050c0:	fb 60 06 b9 	st.b	sp[1721],r0
800050c4:	33 08       	mov	r8,48
800050c6:	fb 68 06 b8 	st.b	sp[1720],r8
800050ca:	30 28       	mov	r8,2
800050cc:	30 09       	mov	r9,0
800050ce:	fb 69 06 bb 	st.b	sp[1723],r9
800050d2:	0a 99       	mov	r9,r5
800050d4:	a7 d9       	cbr	r9,0x7
800050d6:	40 2b       	lddsp	r11,sp[0x8]
800050d8:	40 16       	lddsp	r6,sp[0x4]
800050da:	58 0b       	cp.w	r11,0
800050dc:	5f 1a       	srne	r10
800050de:	f2 05 17 40 	movge	r5,r9
800050e2:	fa c2 f9 78 	sub	r2,sp,-1672
800050e6:	40 09       	lddsp	r9,sp[0x0]
800050e8:	0c 49       	or	r9,r6
800050ea:	5f 19       	srne	r9
800050ec:	f5 e9 10 09 	or	r9,r10,r9
800050f0:	c5 c0       	breq	800051a8 <_vfprintf_r+0x1614>
800050f2:	30 19       	mov	r9,1
800050f4:	f2 08 18 00 	cp.b	r8,r9
800050f8:	c0 60       	breq	80005104 <_vfprintf_r+0x1570>
800050fa:	30 29       	mov	r9,2
800050fc:	f2 08 18 00 	cp.b	r8,r9
80005100:	c0 41       	brne	80005108 <_vfprintf_r+0x1574>
80005102:	c3 c8       	rjmp	8000517a <_vfprintf_r+0x15e6>
80005104:	04 96       	mov	r6,r2
80005106:	c3 08       	rjmp	80005166 <_vfprintf_r+0x15d2>
80005108:	04 96       	mov	r6,r2
8000510a:	fa e8 00 00 	ld.d	r8,sp[0]
8000510e:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005112:	2d 0a       	sub	r10,-48
80005114:	0c fa       	st.b	--r6,r10
80005116:	f0 0b 16 03 	lsr	r11,r8,0x3
8000511a:	f2 0c 16 03 	lsr	r12,r9,0x3
8000511e:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005122:	18 99       	mov	r9,r12
80005124:	16 98       	mov	r8,r11
80005126:	58 08       	cp.w	r8,0
80005128:	5c 29       	cpc	r9
8000512a:	cf 21       	brne	8000510e <_vfprintf_r+0x157a>
8000512c:	fa e9 00 00 	st.d	sp[0],r8
80005130:	ed b5 00 00 	bld	r5,0x0
80005134:	c4 51       	brne	800051be <_vfprintf_r+0x162a>
80005136:	33 09       	mov	r9,48
80005138:	f2 0a 18 00 	cp.b	r10,r9
8000513c:	c4 10       	breq	800051be <_vfprintf_r+0x162a>
8000513e:	0c f9       	st.b	--r6,r9
80005140:	c3 f8       	rjmp	800051be <_vfprintf_r+0x162a>
80005142:	fa ea 00 00 	ld.d	r10,sp[0]
80005146:	30 a8       	mov	r8,10
80005148:	30 09       	mov	r9,0
8000514a:	e0 a0 1e 29 	rcall	80008d9c <__avr32_umod64>
8000514e:	30 a8       	mov	r8,10
80005150:	2d 0a       	sub	r10,-48
80005152:	30 09       	mov	r9,0
80005154:	ac 8a       	st.b	r6[0x0],r10
80005156:	fa ea 00 00 	ld.d	r10,sp[0]
8000515a:	e0 a0 1c ef 	rcall	80008b38 <__avr32_udiv64>
8000515e:	16 99       	mov	r9,r11
80005160:	14 98       	mov	r8,r10
80005162:	fa e9 00 00 	st.d	sp[0],r8
80005166:	20 16       	sub	r6,1
80005168:	fa ea 00 00 	ld.d	r10,sp[0]
8000516c:	58 9a       	cp.w	r10,9
8000516e:	5c 2b       	cpc	r11
80005170:	fe 9b ff e9 	brhi	80005142 <_vfprintf_r+0x15ae>
80005174:	1b f8       	ld.ub	r8,sp[0x7]
80005176:	2d 08       	sub	r8,-48
80005178:	c2 08       	rjmp	800051b8 <_vfprintf_r+0x1624>
8000517a:	04 96       	mov	r6,r2
8000517c:	fa e8 00 00 	ld.d	r8,sp[0]
80005180:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005184:	40 de       	lddsp	lr,sp[0x34]
80005186:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000518a:	0c fa       	st.b	--r6,r10
8000518c:	f2 0b 16 04 	lsr	r11,r9,0x4
80005190:	f0 0a 16 04 	lsr	r10,r8,0x4
80005194:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005198:	16 99       	mov	r9,r11
8000519a:	14 98       	mov	r8,r10
8000519c:	58 08       	cp.w	r8,0
8000519e:	5c 29       	cpc	r9
800051a0:	cf 01       	brne	80005180 <_vfprintf_r+0x15ec>
800051a2:	fa e9 00 00 	st.d	sp[0],r8
800051a6:	c0 c8       	rjmp	800051be <_vfprintf_r+0x162a>
800051a8:	58 08       	cp.w	r8,0
800051aa:	c0 91       	brne	800051bc <_vfprintf_r+0x1628>
800051ac:	ed b5 00 00 	bld	r5,0x0
800051b0:	c0 61       	brne	800051bc <_vfprintf_r+0x1628>
800051b2:	fa c6 f9 79 	sub	r6,sp,-1671
800051b6:	33 08       	mov	r8,48
800051b8:	ac 88       	st.b	r6[0x0],r8
800051ba:	c0 28       	rjmp	800051be <_vfprintf_r+0x162a>
800051bc:	04 96       	mov	r6,r2
800051be:	0c 12       	sub	r2,r6
800051c0:	c1 c8       	rjmp	800051f8 <_vfprintf_r+0x1664>
800051c2:	50 a7       	stdsp	sp[0x28],r7
800051c4:	50 80       	stdsp	sp[0x20],r0
800051c6:	40 93       	lddsp	r3,sp[0x24]
800051c8:	0c 97       	mov	r7,r6
800051ca:	10 90       	mov	r0,r8
800051cc:	04 94       	mov	r4,r2
800051ce:	40 41       	lddsp	r1,sp[0x10]
800051d0:	58 08       	cp.w	r8,0
800051d2:	e0 80 04 4f 	breq	80005a70 <_vfprintf_r+0x1edc>
800051d6:	fb 68 06 60 	st.b	sp[1632],r8
800051da:	30 0c       	mov	r12,0
800051dc:	30 08       	mov	r8,0
800051de:	30 12       	mov	r2,1
800051e0:	fb 68 06 bb 	st.b	sp[1723],r8
800051e4:	50 2c       	stdsp	sp[0x8],r12
800051e6:	fa c6 f9 a0 	sub	r6,sp,-1632
800051ea:	c0 78       	rjmp	800051f8 <_vfprintf_r+0x1664>
800051ec:	30 0b       	mov	r11,0
800051ee:	50 2b       	stdsp	sp[0x8],r11
800051f0:	c0 48       	rjmp	800051f8 <_vfprintf_r+0x1664>
800051f2:	40 22       	lddsp	r2,sp[0x8]
800051f4:	30 0a       	mov	r10,0
800051f6:	50 2a       	stdsp	sp[0x8],r10
800051f8:	40 29       	lddsp	r9,sp[0x8]
800051fa:	e4 09 0c 49 	max	r9,r2,r9
800051fe:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005202:	50 39       	stdsp	sp[0xc],r9
80005204:	0a 9e       	mov	lr,r5
80005206:	30 09       	mov	r9,0
80005208:	e2 1e 00 02 	andl	lr,0x2,COH
8000520c:	f2 08 18 00 	cp.b	r8,r9
80005210:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005214:	f7 b8 01 ff 	subne	r8,-1
80005218:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000521c:	0a 9b       	mov	r11,r5
8000521e:	58 0e       	cp.w	lr,0
80005220:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005224:	f7 bc 01 fe 	subne	r12,-2
80005228:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000522c:	e2 1b 00 84 	andl	r11,0x84,COH
80005230:	50 fe       	stdsp	sp[0x3c],lr
80005232:	50 9b       	stdsp	sp[0x24],r11
80005234:	c4 71       	brne	800052c2 <_vfprintf_r+0x172e>
80005236:	40 8a       	lddsp	r10,sp[0x20]
80005238:	40 39       	lddsp	r9,sp[0xc]
8000523a:	12 1a       	sub	r10,r9
8000523c:	50 4a       	stdsp	sp[0x10],r10
8000523e:	58 0a       	cp.w	r10,0
80005240:	e0 89 00 20 	brgt	80005280 <_vfprintf_r+0x16ec>
80005244:	c3 f8       	rjmp	800052c2 <_vfprintf_r+0x172e>
80005246:	2f 09       	sub	r9,-16
80005248:	2f f8       	sub	r8,-1
8000524a:	fe ce bb 82 	sub	lr,pc,-17534
8000524e:	31 0c       	mov	r12,16
80005250:	fb 49 06 90 	st.w	sp[1680],r9
80005254:	87 0e       	st.w	r3[0x0],lr
80005256:	87 1c       	st.w	r3[0x4],r12
80005258:	fb 48 06 8c 	st.w	sp[1676],r8
8000525c:	58 78       	cp.w	r8,7
8000525e:	e0 89 00 04 	brgt	80005266 <_vfprintf_r+0x16d2>
80005262:	2f 83       	sub	r3,-8
80005264:	c0 b8       	rjmp	8000527a <_vfprintf_r+0x16e6>
80005266:	fa ca f9 78 	sub	r10,sp,-1672
8000526a:	02 9b       	mov	r11,r1
8000526c:	08 9c       	mov	r12,r4
8000526e:	fe b0 f4 85 	rcall	80003b78 <__sprint_r>
80005272:	e0 81 04 10 	brne	80005a92 <_vfprintf_r+0x1efe>
80005276:	fa c3 f9 e0 	sub	r3,sp,-1568
8000527a:	40 4b       	lddsp	r11,sp[0x10]
8000527c:	21 0b       	sub	r11,16
8000527e:	50 4b       	stdsp	sp[0x10],r11
80005280:	fa f9 06 90 	ld.w	r9,sp[1680]
80005284:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005288:	fe ca bb c0 	sub	r10,pc,-17472
8000528c:	40 4e       	lddsp	lr,sp[0x10]
8000528e:	59 0e       	cp.w	lr,16
80005290:	fe 99 ff db 	brgt	80005246 <_vfprintf_r+0x16b2>
80005294:	1c 09       	add	r9,lr
80005296:	2f f8       	sub	r8,-1
80005298:	87 0a       	st.w	r3[0x0],r10
8000529a:	fb 49 06 90 	st.w	sp[1680],r9
8000529e:	87 1e       	st.w	r3[0x4],lr
800052a0:	fb 48 06 8c 	st.w	sp[1676],r8
800052a4:	58 78       	cp.w	r8,7
800052a6:	e0 89 00 04 	brgt	800052ae <_vfprintf_r+0x171a>
800052aa:	2f 83       	sub	r3,-8
800052ac:	c0 b8       	rjmp	800052c2 <_vfprintf_r+0x172e>
800052ae:	fa ca f9 78 	sub	r10,sp,-1672
800052b2:	02 9b       	mov	r11,r1
800052b4:	08 9c       	mov	r12,r4
800052b6:	fe b0 f4 61 	rcall	80003b78 <__sprint_r>
800052ba:	e0 81 03 ec 	brne	80005a92 <_vfprintf_r+0x1efe>
800052be:	fa c3 f9 e0 	sub	r3,sp,-1568
800052c2:	30 09       	mov	r9,0
800052c4:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800052c8:	f2 08 18 00 	cp.b	r8,r9
800052cc:	c1 f0       	breq	8000530a <_vfprintf_r+0x1776>
800052ce:	fa f8 06 90 	ld.w	r8,sp[1680]
800052d2:	fa c9 f9 45 	sub	r9,sp,-1723
800052d6:	2f f8       	sub	r8,-1
800052d8:	87 09       	st.w	r3[0x0],r9
800052da:	fb 48 06 90 	st.w	sp[1680],r8
800052de:	30 19       	mov	r9,1
800052e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052e4:	87 19       	st.w	r3[0x4],r9
800052e6:	2f f8       	sub	r8,-1
800052e8:	fb 48 06 8c 	st.w	sp[1676],r8
800052ec:	58 78       	cp.w	r8,7
800052ee:	e0 89 00 04 	brgt	800052f6 <_vfprintf_r+0x1762>
800052f2:	2f 83       	sub	r3,-8
800052f4:	c0 b8       	rjmp	8000530a <_vfprintf_r+0x1776>
800052f6:	fa ca f9 78 	sub	r10,sp,-1672
800052fa:	02 9b       	mov	r11,r1
800052fc:	08 9c       	mov	r12,r4
800052fe:	fe b0 f4 3d 	rcall	80003b78 <__sprint_r>
80005302:	e0 81 03 c8 	brne	80005a92 <_vfprintf_r+0x1efe>
80005306:	fa c3 f9 e0 	sub	r3,sp,-1568
8000530a:	40 fc       	lddsp	r12,sp[0x3c]
8000530c:	58 0c       	cp.w	r12,0
8000530e:	c1 f0       	breq	8000534c <_vfprintf_r+0x17b8>
80005310:	fa f8 06 90 	ld.w	r8,sp[1680]
80005314:	fa c9 f9 48 	sub	r9,sp,-1720
80005318:	2f e8       	sub	r8,-2
8000531a:	87 09       	st.w	r3[0x0],r9
8000531c:	fb 48 06 90 	st.w	sp[1680],r8
80005320:	30 29       	mov	r9,2
80005322:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005326:	87 19       	st.w	r3[0x4],r9
80005328:	2f f8       	sub	r8,-1
8000532a:	fb 48 06 8c 	st.w	sp[1676],r8
8000532e:	58 78       	cp.w	r8,7
80005330:	e0 89 00 04 	brgt	80005338 <_vfprintf_r+0x17a4>
80005334:	2f 83       	sub	r3,-8
80005336:	c0 b8       	rjmp	8000534c <_vfprintf_r+0x17b8>
80005338:	fa ca f9 78 	sub	r10,sp,-1672
8000533c:	02 9b       	mov	r11,r1
8000533e:	08 9c       	mov	r12,r4
80005340:	fe b0 f4 1c 	rcall	80003b78 <__sprint_r>
80005344:	e0 81 03 a7 	brne	80005a92 <_vfprintf_r+0x1efe>
80005348:	fa c3 f9 e0 	sub	r3,sp,-1568
8000534c:	40 9b       	lddsp	r11,sp[0x24]
8000534e:	e0 4b 00 80 	cp.w	r11,128
80005352:	c4 71       	brne	800053e0 <_vfprintf_r+0x184c>
80005354:	40 8a       	lddsp	r10,sp[0x20]
80005356:	40 39       	lddsp	r9,sp[0xc]
80005358:	12 1a       	sub	r10,r9
8000535a:	50 4a       	stdsp	sp[0x10],r10
8000535c:	58 0a       	cp.w	r10,0
8000535e:	e0 89 00 20 	brgt	8000539e <_vfprintf_r+0x180a>
80005362:	c3 f8       	rjmp	800053e0 <_vfprintf_r+0x184c>
80005364:	2f 09       	sub	r9,-16
80005366:	2f f8       	sub	r8,-1
80005368:	fe ce bc 90 	sub	lr,pc,-17264
8000536c:	31 0c       	mov	r12,16
8000536e:	fb 49 06 90 	st.w	sp[1680],r9
80005372:	87 0e       	st.w	r3[0x0],lr
80005374:	87 1c       	st.w	r3[0x4],r12
80005376:	fb 48 06 8c 	st.w	sp[1676],r8
8000537a:	58 78       	cp.w	r8,7
8000537c:	e0 89 00 04 	brgt	80005384 <_vfprintf_r+0x17f0>
80005380:	2f 83       	sub	r3,-8
80005382:	c0 b8       	rjmp	80005398 <_vfprintf_r+0x1804>
80005384:	fa ca f9 78 	sub	r10,sp,-1672
80005388:	02 9b       	mov	r11,r1
8000538a:	08 9c       	mov	r12,r4
8000538c:	fe b0 f3 f6 	rcall	80003b78 <__sprint_r>
80005390:	e0 81 03 81 	brne	80005a92 <_vfprintf_r+0x1efe>
80005394:	fa c3 f9 e0 	sub	r3,sp,-1568
80005398:	40 4b       	lddsp	r11,sp[0x10]
8000539a:	21 0b       	sub	r11,16
8000539c:	50 4b       	stdsp	sp[0x10],r11
8000539e:	fa f9 06 90 	ld.w	r9,sp[1680]
800053a2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053a6:	fe ca bc ce 	sub	r10,pc,-17202
800053aa:	40 4e       	lddsp	lr,sp[0x10]
800053ac:	59 0e       	cp.w	lr,16
800053ae:	fe 99 ff db 	brgt	80005364 <_vfprintf_r+0x17d0>
800053b2:	1c 09       	add	r9,lr
800053b4:	2f f8       	sub	r8,-1
800053b6:	87 0a       	st.w	r3[0x0],r10
800053b8:	fb 49 06 90 	st.w	sp[1680],r9
800053bc:	87 1e       	st.w	r3[0x4],lr
800053be:	fb 48 06 8c 	st.w	sp[1676],r8
800053c2:	58 78       	cp.w	r8,7
800053c4:	e0 89 00 04 	brgt	800053cc <_vfprintf_r+0x1838>
800053c8:	2f 83       	sub	r3,-8
800053ca:	c0 b8       	rjmp	800053e0 <_vfprintf_r+0x184c>
800053cc:	fa ca f9 78 	sub	r10,sp,-1672
800053d0:	02 9b       	mov	r11,r1
800053d2:	08 9c       	mov	r12,r4
800053d4:	fe b0 f3 d2 	rcall	80003b78 <__sprint_r>
800053d8:	e0 81 03 5d 	brne	80005a92 <_vfprintf_r+0x1efe>
800053dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800053e0:	40 2c       	lddsp	r12,sp[0x8]
800053e2:	04 1c       	sub	r12,r2
800053e4:	50 2c       	stdsp	sp[0x8],r12
800053e6:	58 0c       	cp.w	r12,0
800053e8:	e0 89 00 20 	brgt	80005428 <_vfprintf_r+0x1894>
800053ec:	c3 f8       	rjmp	8000546a <_vfprintf_r+0x18d6>
800053ee:	2f 09       	sub	r9,-16
800053f0:	2f f8       	sub	r8,-1
800053f2:	fe cb bd 1a 	sub	r11,pc,-17126
800053f6:	31 0a       	mov	r10,16
800053f8:	fb 49 06 90 	st.w	sp[1680],r9
800053fc:	87 0b       	st.w	r3[0x0],r11
800053fe:	87 1a       	st.w	r3[0x4],r10
80005400:	fb 48 06 8c 	st.w	sp[1676],r8
80005404:	58 78       	cp.w	r8,7
80005406:	e0 89 00 04 	brgt	8000540e <_vfprintf_r+0x187a>
8000540a:	2f 83       	sub	r3,-8
8000540c:	c0 b8       	rjmp	80005422 <_vfprintf_r+0x188e>
8000540e:	fa ca f9 78 	sub	r10,sp,-1672
80005412:	02 9b       	mov	r11,r1
80005414:	08 9c       	mov	r12,r4
80005416:	fe b0 f3 b1 	rcall	80003b78 <__sprint_r>
8000541a:	e0 81 03 3c 	brne	80005a92 <_vfprintf_r+0x1efe>
8000541e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005422:	40 29       	lddsp	r9,sp[0x8]
80005424:	21 09       	sub	r9,16
80005426:	50 29       	stdsp	sp[0x8],r9
80005428:	fa f9 06 90 	ld.w	r9,sp[1680]
8000542c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005430:	fe ca bd 58 	sub	r10,pc,-17064
80005434:	40 2e       	lddsp	lr,sp[0x8]
80005436:	59 0e       	cp.w	lr,16
80005438:	fe 99 ff db 	brgt	800053ee <_vfprintf_r+0x185a>
8000543c:	1c 09       	add	r9,lr
8000543e:	2f f8       	sub	r8,-1
80005440:	87 0a       	st.w	r3[0x0],r10
80005442:	fb 49 06 90 	st.w	sp[1680],r9
80005446:	87 1e       	st.w	r3[0x4],lr
80005448:	fb 48 06 8c 	st.w	sp[1676],r8
8000544c:	58 78       	cp.w	r8,7
8000544e:	e0 89 00 04 	brgt	80005456 <_vfprintf_r+0x18c2>
80005452:	2f 83       	sub	r3,-8
80005454:	c0 b8       	rjmp	8000546a <_vfprintf_r+0x18d6>
80005456:	fa ca f9 78 	sub	r10,sp,-1672
8000545a:	02 9b       	mov	r11,r1
8000545c:	08 9c       	mov	r12,r4
8000545e:	fe b0 f3 8d 	rcall	80003b78 <__sprint_r>
80005462:	e0 81 03 18 	brne	80005a92 <_vfprintf_r+0x1efe>
80005466:	fa c3 f9 e0 	sub	r3,sp,-1568
8000546a:	ed b5 00 08 	bld	r5,0x8
8000546e:	c0 b0       	breq	80005484 <_vfprintf_r+0x18f0>
80005470:	fa f8 06 90 	ld.w	r8,sp[1680]
80005474:	87 12       	st.w	r3[0x4],r2
80005476:	87 06       	st.w	r3[0x0],r6
80005478:	f0 02 00 02 	add	r2,r8,r2
8000547c:	fb 42 06 90 	st.w	sp[1680],r2
80005480:	e0 8f 01 d4 	bral	80005828 <_vfprintf_r+0x1c94>
80005484:	e0 40 00 65 	cp.w	r0,101
80005488:	e0 8a 01 d6 	brle	80005834 <_vfprintf_r+0x1ca0>
8000548c:	30 08       	mov	r8,0
8000548e:	30 09       	mov	r9,0
80005490:	40 5b       	lddsp	r11,sp[0x14]
80005492:	40 7a       	lddsp	r10,sp[0x1c]
80005494:	e0 a0 19 4b 	rcall	8000872a <__avr32_f64_cmp_eq>
80005498:	c7 90       	breq	8000558a <_vfprintf_r+0x19f6>
8000549a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000549e:	fe c9 bd da 	sub	r9,pc,-16934
800054a2:	2f f8       	sub	r8,-1
800054a4:	87 09       	st.w	r3[0x0],r9
800054a6:	fb 48 06 90 	st.w	sp[1680],r8
800054aa:	30 19       	mov	r9,1
800054ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054b0:	87 19       	st.w	r3[0x4],r9
800054b2:	2f f8       	sub	r8,-1
800054b4:	fb 48 06 8c 	st.w	sp[1676],r8
800054b8:	58 78       	cp.w	r8,7
800054ba:	e0 89 00 05 	brgt	800054c4 <_vfprintf_r+0x1930>
800054be:	2f 83       	sub	r3,-8
800054c0:	c0 c8       	rjmp	800054d8 <_vfprintf_r+0x1944>
800054c2:	d7 03       	nop
800054c4:	fa ca f9 78 	sub	r10,sp,-1672
800054c8:	02 9b       	mov	r11,r1
800054ca:	08 9c       	mov	r12,r4
800054cc:	fe b0 f3 56 	rcall	80003b78 <__sprint_r>
800054d0:	e0 81 02 e1 	brne	80005a92 <_vfprintf_r+0x1efe>
800054d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800054d8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800054dc:	40 6c       	lddsp	r12,sp[0x18]
800054de:	18 38       	cp.w	r8,r12
800054e0:	c0 55       	brlt	800054ea <_vfprintf_r+0x1956>
800054e2:	ed b5 00 00 	bld	r5,0x0
800054e6:	e0 81 02 6b 	brne	800059bc <_vfprintf_r+0x1e28>
800054ea:	fa f8 06 90 	ld.w	r8,sp[1680]
800054ee:	2f f8       	sub	r8,-1
800054f0:	40 cb       	lddsp	r11,sp[0x30]
800054f2:	fb 48 06 90 	st.w	sp[1680],r8
800054f6:	30 19       	mov	r9,1
800054f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054fc:	87 0b       	st.w	r3[0x0],r11
800054fe:	2f f8       	sub	r8,-1
80005500:	87 19       	st.w	r3[0x4],r9
80005502:	fb 48 06 8c 	st.w	sp[1676],r8
80005506:	58 78       	cp.w	r8,7
80005508:	e0 89 00 04 	brgt	80005510 <_vfprintf_r+0x197c>
8000550c:	2f 83       	sub	r3,-8
8000550e:	c0 b8       	rjmp	80005524 <_vfprintf_r+0x1990>
80005510:	fa ca f9 78 	sub	r10,sp,-1672
80005514:	02 9b       	mov	r11,r1
80005516:	08 9c       	mov	r12,r4
80005518:	fe b0 f3 30 	rcall	80003b78 <__sprint_r>
8000551c:	e0 81 02 bb 	brne	80005a92 <_vfprintf_r+0x1efe>
80005520:	fa c3 f9 e0 	sub	r3,sp,-1568
80005524:	40 66       	lddsp	r6,sp[0x18]
80005526:	20 16       	sub	r6,1
80005528:	58 06       	cp.w	r6,0
8000552a:	e0 89 00 1d 	brgt	80005564 <_vfprintf_r+0x19d0>
8000552e:	e0 8f 02 47 	bral	800059bc <_vfprintf_r+0x1e28>
80005532:	2f 09       	sub	r9,-16
80005534:	2f f8       	sub	r8,-1
80005536:	fb 49 06 90 	st.w	sp[1680],r9
8000553a:	87 02       	st.w	r3[0x0],r2
8000553c:	87 10       	st.w	r3[0x4],r0
8000553e:	fb 48 06 8c 	st.w	sp[1676],r8
80005542:	58 78       	cp.w	r8,7
80005544:	e0 89 00 04 	brgt	8000554c <_vfprintf_r+0x19b8>
80005548:	2f 83       	sub	r3,-8
8000554a:	c0 b8       	rjmp	80005560 <_vfprintf_r+0x19cc>
8000554c:	fa ca f9 78 	sub	r10,sp,-1672
80005550:	02 9b       	mov	r11,r1
80005552:	08 9c       	mov	r12,r4
80005554:	fe b0 f3 12 	rcall	80003b78 <__sprint_r>
80005558:	e0 81 02 9d 	brne	80005a92 <_vfprintf_r+0x1efe>
8000555c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005560:	21 06       	sub	r6,16
80005562:	c0 48       	rjmp	8000556a <_vfprintf_r+0x19d6>
80005564:	fe c2 be 8c 	sub	r2,pc,-16756
80005568:	31 00       	mov	r0,16
8000556a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000556e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005572:	fe ca be 9a 	sub	r10,pc,-16742
80005576:	59 06       	cp.w	r6,16
80005578:	fe 99 ff dd 	brgt	80005532 <_vfprintf_r+0x199e>
8000557c:	0c 09       	add	r9,r6
8000557e:	87 0a       	st.w	r3[0x0],r10
80005580:	fb 49 06 90 	st.w	sp[1680],r9
80005584:	2f f8       	sub	r8,-1
80005586:	87 16       	st.w	r3[0x4],r6
80005588:	c5 39       	rjmp	8000582e <_vfprintf_r+0x1c9a>
8000558a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000558e:	58 0a       	cp.w	r10,0
80005590:	e0 89 00 92 	brgt	800056b4 <_vfprintf_r+0x1b20>
80005594:	fa f8 06 90 	ld.w	r8,sp[1680]
80005598:	fe c9 be d4 	sub	r9,pc,-16684
8000559c:	2f f8       	sub	r8,-1
8000559e:	87 09       	st.w	r3[0x0],r9
800055a0:	fb 48 06 90 	st.w	sp[1680],r8
800055a4:	30 19       	mov	r9,1
800055a6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055aa:	87 19       	st.w	r3[0x4],r9
800055ac:	2f f8       	sub	r8,-1
800055ae:	fb 48 06 8c 	st.w	sp[1676],r8
800055b2:	58 78       	cp.w	r8,7
800055b4:	e0 89 00 04 	brgt	800055bc <_vfprintf_r+0x1a28>
800055b8:	2f 83       	sub	r3,-8
800055ba:	c0 b8       	rjmp	800055d0 <_vfprintf_r+0x1a3c>
800055bc:	fa ca f9 78 	sub	r10,sp,-1672
800055c0:	02 9b       	mov	r11,r1
800055c2:	08 9c       	mov	r12,r4
800055c4:	fe b0 f2 da 	rcall	80003b78 <__sprint_r>
800055c8:	e0 81 02 65 	brne	80005a92 <_vfprintf_r+0x1efe>
800055cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800055d0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800055d4:	58 08       	cp.w	r8,0
800055d6:	c0 81       	brne	800055e6 <_vfprintf_r+0x1a52>
800055d8:	40 6a       	lddsp	r10,sp[0x18]
800055da:	58 0a       	cp.w	r10,0
800055dc:	c0 51       	brne	800055e6 <_vfprintf_r+0x1a52>
800055de:	ed b5 00 00 	bld	r5,0x0
800055e2:	e0 81 01 ed 	brne	800059bc <_vfprintf_r+0x1e28>
800055e6:	40 c9       	lddsp	r9,sp[0x30]
800055e8:	fa f8 06 90 	ld.w	r8,sp[1680]
800055ec:	2f f8       	sub	r8,-1
800055ee:	87 09       	st.w	r3[0x0],r9
800055f0:	fb 48 06 90 	st.w	sp[1680],r8
800055f4:	30 19       	mov	r9,1
800055f6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055fa:	87 19       	st.w	r3[0x4],r9
800055fc:	2f f8       	sub	r8,-1
800055fe:	fb 48 06 8c 	st.w	sp[1676],r8
80005602:	58 78       	cp.w	r8,7
80005604:	e0 89 00 04 	brgt	8000560c <_vfprintf_r+0x1a78>
80005608:	2f 83       	sub	r3,-8
8000560a:	c0 b8       	rjmp	80005620 <_vfprintf_r+0x1a8c>
8000560c:	fa ca f9 78 	sub	r10,sp,-1672
80005610:	02 9b       	mov	r11,r1
80005612:	08 9c       	mov	r12,r4
80005614:	fe b0 f2 b2 	rcall	80003b78 <__sprint_r>
80005618:	e0 81 02 3d 	brne	80005a92 <_vfprintf_r+0x1efe>
8000561c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005620:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005624:	5c 32       	neg	r2
80005626:	58 02       	cp.w	r2,0
80005628:	e0 89 00 1d 	brgt	80005662 <_vfprintf_r+0x1ace>
8000562c:	c3 d8       	rjmp	800056a6 <_vfprintf_r+0x1b12>
8000562e:	2f 09       	sub	r9,-16
80005630:	2f f8       	sub	r8,-1
80005632:	31 0e       	mov	lr,16
80005634:	fb 49 06 90 	st.w	sp[1680],r9
80005638:	87 00       	st.w	r3[0x0],r0
8000563a:	87 1e       	st.w	r3[0x4],lr
8000563c:	fb 48 06 8c 	st.w	sp[1676],r8
80005640:	58 78       	cp.w	r8,7
80005642:	e0 89 00 04 	brgt	8000564a <_vfprintf_r+0x1ab6>
80005646:	2f 83       	sub	r3,-8
80005648:	c0 b8       	rjmp	8000565e <_vfprintf_r+0x1aca>
8000564a:	fa ca f9 78 	sub	r10,sp,-1672
8000564e:	02 9b       	mov	r11,r1
80005650:	08 9c       	mov	r12,r4
80005652:	fe b0 f2 93 	rcall	80003b78 <__sprint_r>
80005656:	e0 81 02 1e 	brne	80005a92 <_vfprintf_r+0x1efe>
8000565a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000565e:	21 02       	sub	r2,16
80005660:	c0 38       	rjmp	80005666 <_vfprintf_r+0x1ad2>
80005662:	fe c0 bf 8a 	sub	r0,pc,-16502
80005666:	fa f9 06 90 	ld.w	r9,sp[1680]
8000566a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000566e:	fe ca bf 96 	sub	r10,pc,-16490
80005672:	59 02       	cp.w	r2,16
80005674:	fe 99 ff dd 	brgt	8000562e <_vfprintf_r+0x1a9a>
80005678:	04 09       	add	r9,r2
8000567a:	2f f8       	sub	r8,-1
8000567c:	87 0a       	st.w	r3[0x0],r10
8000567e:	fb 49 06 90 	st.w	sp[1680],r9
80005682:	87 12       	st.w	r3[0x4],r2
80005684:	fb 48 06 8c 	st.w	sp[1676],r8
80005688:	58 78       	cp.w	r8,7
8000568a:	e0 89 00 04 	brgt	80005692 <_vfprintf_r+0x1afe>
8000568e:	2f 83       	sub	r3,-8
80005690:	c0 b8       	rjmp	800056a6 <_vfprintf_r+0x1b12>
80005692:	fa ca f9 78 	sub	r10,sp,-1672
80005696:	02 9b       	mov	r11,r1
80005698:	08 9c       	mov	r12,r4
8000569a:	fe b0 f2 6f 	rcall	80003b78 <__sprint_r>
8000569e:	e0 81 01 fa 	brne	80005a92 <_vfprintf_r+0x1efe>
800056a2:	fa c3 f9 e0 	sub	r3,sp,-1568
800056a6:	40 6c       	lddsp	r12,sp[0x18]
800056a8:	fa f8 06 90 	ld.w	r8,sp[1680]
800056ac:	87 06       	st.w	r3[0x0],r6
800056ae:	87 1c       	st.w	r3[0x4],r12
800056b0:	18 08       	add	r8,r12
800056b2:	cb 98       	rjmp	80005824 <_vfprintf_r+0x1c90>
800056b4:	fa f9 06 90 	ld.w	r9,sp[1680]
800056b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056bc:	40 6b       	lddsp	r11,sp[0x18]
800056be:	16 3a       	cp.w	r10,r11
800056c0:	c6 f5       	brlt	8000579e <_vfprintf_r+0x1c0a>
800056c2:	16 09       	add	r9,r11
800056c4:	2f f8       	sub	r8,-1
800056c6:	87 06       	st.w	r3[0x0],r6
800056c8:	fb 49 06 90 	st.w	sp[1680],r9
800056cc:	87 1b       	st.w	r3[0x4],r11
800056ce:	fb 48 06 8c 	st.w	sp[1676],r8
800056d2:	58 78       	cp.w	r8,7
800056d4:	e0 89 00 04 	brgt	800056dc <_vfprintf_r+0x1b48>
800056d8:	2f 83       	sub	r3,-8
800056da:	c0 b8       	rjmp	800056f0 <_vfprintf_r+0x1b5c>
800056dc:	fa ca f9 78 	sub	r10,sp,-1672
800056e0:	02 9b       	mov	r11,r1
800056e2:	08 9c       	mov	r12,r4
800056e4:	fe b0 f2 4a 	rcall	80003b78 <__sprint_r>
800056e8:	e0 81 01 d5 	brne	80005a92 <_vfprintf_r+0x1efe>
800056ec:	fa c3 f9 e0 	sub	r3,sp,-1568
800056f0:	fa f6 06 ac 	ld.w	r6,sp[1708]
800056f4:	40 6a       	lddsp	r10,sp[0x18]
800056f6:	14 16       	sub	r6,r10
800056f8:	58 06       	cp.w	r6,0
800056fa:	e0 89 00 1c 	brgt	80005732 <_vfprintf_r+0x1b9e>
800056fe:	c3 d8       	rjmp	80005778 <_vfprintf_r+0x1be4>
80005700:	2f 09       	sub	r9,-16
80005702:	2f f8       	sub	r8,-1
80005704:	fb 49 06 90 	st.w	sp[1680],r9
80005708:	87 02       	st.w	r3[0x0],r2
8000570a:	87 10       	st.w	r3[0x4],r0
8000570c:	fb 48 06 8c 	st.w	sp[1676],r8
80005710:	58 78       	cp.w	r8,7
80005712:	e0 89 00 04 	brgt	8000571a <_vfprintf_r+0x1b86>
80005716:	2f 83       	sub	r3,-8
80005718:	c0 b8       	rjmp	8000572e <_vfprintf_r+0x1b9a>
8000571a:	fa ca f9 78 	sub	r10,sp,-1672
8000571e:	02 9b       	mov	r11,r1
80005720:	08 9c       	mov	r12,r4
80005722:	fe b0 f2 2b 	rcall	80003b78 <__sprint_r>
80005726:	e0 81 01 b6 	brne	80005a92 <_vfprintf_r+0x1efe>
8000572a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000572e:	21 06       	sub	r6,16
80005730:	c0 48       	rjmp	80005738 <_vfprintf_r+0x1ba4>
80005732:	fe c2 c0 5a 	sub	r2,pc,-16294
80005736:	31 00       	mov	r0,16
80005738:	fa f9 06 90 	ld.w	r9,sp[1680]
8000573c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005740:	fe ca c0 68 	sub	r10,pc,-16280
80005744:	59 06       	cp.w	r6,16
80005746:	fe 99 ff dd 	brgt	80005700 <_vfprintf_r+0x1b6c>
8000574a:	0c 09       	add	r9,r6
8000574c:	2f f8       	sub	r8,-1
8000574e:	87 0a       	st.w	r3[0x0],r10
80005750:	fb 49 06 90 	st.w	sp[1680],r9
80005754:	87 16       	st.w	r3[0x4],r6
80005756:	fb 48 06 8c 	st.w	sp[1676],r8
8000575a:	58 78       	cp.w	r8,7
8000575c:	e0 89 00 04 	brgt	80005764 <_vfprintf_r+0x1bd0>
80005760:	2f 83       	sub	r3,-8
80005762:	c0 b8       	rjmp	80005778 <_vfprintf_r+0x1be4>
80005764:	fa ca f9 78 	sub	r10,sp,-1672
80005768:	02 9b       	mov	r11,r1
8000576a:	08 9c       	mov	r12,r4
8000576c:	fe b0 f2 06 	rcall	80003b78 <__sprint_r>
80005770:	e0 81 01 91 	brne	80005a92 <_vfprintf_r+0x1efe>
80005774:	fa c3 f9 e0 	sub	r3,sp,-1568
80005778:	ed b5 00 00 	bld	r5,0x0
8000577c:	e0 81 01 20 	brne	800059bc <_vfprintf_r+0x1e28>
80005780:	40 c9       	lddsp	r9,sp[0x30]
80005782:	fa f8 06 90 	ld.w	r8,sp[1680]
80005786:	2f f8       	sub	r8,-1
80005788:	87 09       	st.w	r3[0x0],r9
8000578a:	fb 48 06 90 	st.w	sp[1680],r8
8000578e:	30 19       	mov	r9,1
80005790:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005794:	87 19       	st.w	r3[0x4],r9
80005796:	2f f8       	sub	r8,-1
80005798:	fb 48 06 8c 	st.w	sp[1676],r8
8000579c:	c0 29       	rjmp	800059a0 <_vfprintf_r+0x1e0c>
8000579e:	14 09       	add	r9,r10
800057a0:	2f f8       	sub	r8,-1
800057a2:	fb 49 06 90 	st.w	sp[1680],r9
800057a6:	87 06       	st.w	r3[0x0],r6
800057a8:	87 1a       	st.w	r3[0x4],r10
800057aa:	fb 48 06 8c 	st.w	sp[1676],r8
800057ae:	58 78       	cp.w	r8,7
800057b0:	e0 89 00 04 	brgt	800057b8 <_vfprintf_r+0x1c24>
800057b4:	2f 83       	sub	r3,-8
800057b6:	c0 b8       	rjmp	800057cc <_vfprintf_r+0x1c38>
800057b8:	fa ca f9 78 	sub	r10,sp,-1672
800057bc:	02 9b       	mov	r11,r1
800057be:	08 9c       	mov	r12,r4
800057c0:	fe b0 f1 dc 	rcall	80003b78 <__sprint_r>
800057c4:	e0 81 01 67 	brne	80005a92 <_vfprintf_r+0x1efe>
800057c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800057cc:	40 c8       	lddsp	r8,sp[0x30]
800057ce:	87 08       	st.w	r3[0x0],r8
800057d0:	fa f8 06 90 	ld.w	r8,sp[1680]
800057d4:	2f f8       	sub	r8,-1
800057d6:	30 19       	mov	r9,1
800057d8:	fb 48 06 90 	st.w	sp[1680],r8
800057dc:	87 19       	st.w	r3[0x4],r9
800057de:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057e2:	2f f8       	sub	r8,-1
800057e4:	fb 48 06 8c 	st.w	sp[1676],r8
800057e8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800057ec:	58 78       	cp.w	r8,7
800057ee:	e0 89 00 04 	brgt	800057f6 <_vfprintf_r+0x1c62>
800057f2:	2f 83       	sub	r3,-8
800057f4:	c0 b8       	rjmp	8000580a <_vfprintf_r+0x1c76>
800057f6:	fa ca f9 78 	sub	r10,sp,-1672
800057fa:	02 9b       	mov	r11,r1
800057fc:	08 9c       	mov	r12,r4
800057fe:	fe b0 f1 bd 	rcall	80003b78 <__sprint_r>
80005802:	e0 81 01 48 	brne	80005a92 <_vfprintf_r+0x1efe>
80005806:	fa c3 f9 e0 	sub	r3,sp,-1568
8000580a:	04 06       	add	r6,r2
8000580c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005810:	87 06       	st.w	r3[0x0],r6
80005812:	fa f9 06 90 	ld.w	r9,sp[1680]
80005816:	40 66       	lddsp	r6,sp[0x18]
80005818:	40 6e       	lddsp	lr,sp[0x18]
8000581a:	10 16       	sub	r6,r8
8000581c:	f2 08 01 08 	sub	r8,r9,r8
80005820:	87 16       	st.w	r3[0x4],r6
80005822:	1c 08       	add	r8,lr
80005824:	fb 48 06 90 	st.w	sp[1680],r8
80005828:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000582c:	2f f8       	sub	r8,-1
8000582e:	fb 48 06 8c 	st.w	sp[1676],r8
80005832:	cb 78       	rjmp	800059a0 <_vfprintf_r+0x1e0c>
80005834:	40 6c       	lddsp	r12,sp[0x18]
80005836:	58 1c       	cp.w	r12,1
80005838:	e0 89 00 06 	brgt	80005844 <_vfprintf_r+0x1cb0>
8000583c:	ed b5 00 00 	bld	r5,0x0
80005840:	e0 81 00 85 	brne	8000594a <_vfprintf_r+0x1db6>
80005844:	fa f8 06 90 	ld.w	r8,sp[1680]
80005848:	2f f8       	sub	r8,-1
8000584a:	30 19       	mov	r9,1
8000584c:	fb 48 06 90 	st.w	sp[1680],r8
80005850:	87 06       	st.w	r3[0x0],r6
80005852:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005856:	87 19       	st.w	r3[0x4],r9
80005858:	2f f8       	sub	r8,-1
8000585a:	fb 48 06 8c 	st.w	sp[1676],r8
8000585e:	58 78       	cp.w	r8,7
80005860:	e0 89 00 04 	brgt	80005868 <_vfprintf_r+0x1cd4>
80005864:	2f 83       	sub	r3,-8
80005866:	c0 b8       	rjmp	8000587c <_vfprintf_r+0x1ce8>
80005868:	fa ca f9 78 	sub	r10,sp,-1672
8000586c:	02 9b       	mov	r11,r1
8000586e:	08 9c       	mov	r12,r4
80005870:	fe b0 f1 84 	rcall	80003b78 <__sprint_r>
80005874:	e0 81 01 0f 	brne	80005a92 <_vfprintf_r+0x1efe>
80005878:	fa c3 f9 e0 	sub	r3,sp,-1568
8000587c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005880:	2f f8       	sub	r8,-1
80005882:	40 cb       	lddsp	r11,sp[0x30]
80005884:	fb 48 06 90 	st.w	sp[1680],r8
80005888:	30 19       	mov	r9,1
8000588a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000588e:	87 0b       	st.w	r3[0x0],r11
80005890:	2f f8       	sub	r8,-1
80005892:	87 19       	st.w	r3[0x4],r9
80005894:	fb 48 06 8c 	st.w	sp[1676],r8
80005898:	58 78       	cp.w	r8,7
8000589a:	e0 89 00 05 	brgt	800058a4 <_vfprintf_r+0x1d10>
8000589e:	2f 83       	sub	r3,-8
800058a0:	c0 c8       	rjmp	800058b8 <_vfprintf_r+0x1d24>
800058a2:	d7 03       	nop
800058a4:	fa ca f9 78 	sub	r10,sp,-1672
800058a8:	02 9b       	mov	r11,r1
800058aa:	08 9c       	mov	r12,r4
800058ac:	fe b0 f1 66 	rcall	80003b78 <__sprint_r>
800058b0:	e0 81 00 f1 	brne	80005a92 <_vfprintf_r+0x1efe>
800058b4:	fa c3 f9 e0 	sub	r3,sp,-1568
800058b8:	30 08       	mov	r8,0
800058ba:	30 09       	mov	r9,0
800058bc:	40 5b       	lddsp	r11,sp[0x14]
800058be:	40 7a       	lddsp	r10,sp[0x1c]
800058c0:	e0 a0 17 35 	rcall	8000872a <__avr32_f64_cmp_eq>
800058c4:	40 68       	lddsp	r8,sp[0x18]
800058c6:	20 18       	sub	r8,1
800058c8:	58 0c       	cp.w	r12,0
800058ca:	c0 d1       	brne	800058e4 <_vfprintf_r+0x1d50>
800058cc:	2f f6       	sub	r6,-1
800058ce:	87 18       	st.w	r3[0x4],r8
800058d0:	87 06       	st.w	r3[0x0],r6
800058d2:	fa f6 06 90 	ld.w	r6,sp[1680]
800058d6:	10 06       	add	r6,r8
800058d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058dc:	fb 46 06 90 	st.w	sp[1680],r6
800058e0:	2f f8       	sub	r8,-1
800058e2:	c3 18       	rjmp	80005944 <_vfprintf_r+0x1db0>
800058e4:	10 96       	mov	r6,r8
800058e6:	58 08       	cp.w	r8,0
800058e8:	e0 89 00 1c 	brgt	80005920 <_vfprintf_r+0x1d8c>
800058ec:	c4 b8       	rjmp	80005982 <_vfprintf_r+0x1dee>
800058ee:	2f 09       	sub	r9,-16
800058f0:	2f f8       	sub	r8,-1
800058f2:	fb 49 06 90 	st.w	sp[1680],r9
800058f6:	87 02       	st.w	r3[0x0],r2
800058f8:	87 10       	st.w	r3[0x4],r0
800058fa:	fb 48 06 8c 	st.w	sp[1676],r8
800058fe:	58 78       	cp.w	r8,7
80005900:	e0 89 00 04 	brgt	80005908 <_vfprintf_r+0x1d74>
80005904:	2f 83       	sub	r3,-8
80005906:	c0 b8       	rjmp	8000591c <_vfprintf_r+0x1d88>
80005908:	fa ca f9 78 	sub	r10,sp,-1672
8000590c:	02 9b       	mov	r11,r1
8000590e:	08 9c       	mov	r12,r4
80005910:	fe b0 f1 34 	rcall	80003b78 <__sprint_r>
80005914:	e0 81 00 bf 	brne	80005a92 <_vfprintf_r+0x1efe>
80005918:	fa c3 f9 e0 	sub	r3,sp,-1568
8000591c:	21 06       	sub	r6,16
8000591e:	c0 48       	rjmp	80005926 <_vfprintf_r+0x1d92>
80005920:	fe c2 c2 48 	sub	r2,pc,-15800
80005924:	31 00       	mov	r0,16
80005926:	fa f9 06 90 	ld.w	r9,sp[1680]
8000592a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000592e:	fe ca c2 56 	sub	r10,pc,-15786
80005932:	59 06       	cp.w	r6,16
80005934:	fe 99 ff dd 	brgt	800058ee <_vfprintf_r+0x1d5a>
80005938:	0c 09       	add	r9,r6
8000593a:	87 0a       	st.w	r3[0x0],r10
8000593c:	fb 49 06 90 	st.w	sp[1680],r9
80005940:	2f f8       	sub	r8,-1
80005942:	87 16       	st.w	r3[0x4],r6
80005944:	fb 48 06 8c 	st.w	sp[1676],r8
80005948:	c0 e8       	rjmp	80005964 <_vfprintf_r+0x1dd0>
8000594a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000594e:	2f f8       	sub	r8,-1
80005950:	30 19       	mov	r9,1
80005952:	fb 48 06 90 	st.w	sp[1680],r8
80005956:	87 06       	st.w	r3[0x0],r6
80005958:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000595c:	87 19       	st.w	r3[0x4],r9
8000595e:	2f f8       	sub	r8,-1
80005960:	fb 48 06 8c 	st.w	sp[1676],r8
80005964:	58 78       	cp.w	r8,7
80005966:	e0 89 00 04 	brgt	8000596e <_vfprintf_r+0x1dda>
8000596a:	2f 83       	sub	r3,-8
8000596c:	c0 b8       	rjmp	80005982 <_vfprintf_r+0x1dee>
8000596e:	fa ca f9 78 	sub	r10,sp,-1672
80005972:	02 9b       	mov	r11,r1
80005974:	08 9c       	mov	r12,r4
80005976:	fe b0 f1 01 	rcall	80003b78 <__sprint_r>
8000597a:	e0 81 00 8c 	brne	80005a92 <_vfprintf_r+0x1efe>
8000597e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005982:	40 ea       	lddsp	r10,sp[0x38]
80005984:	fa f8 06 90 	ld.w	r8,sp[1680]
80005988:	14 08       	add	r8,r10
8000598a:	fa c9 f9 64 	sub	r9,sp,-1692
8000598e:	fb 48 06 90 	st.w	sp[1680],r8
80005992:	87 1a       	st.w	r3[0x4],r10
80005994:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005998:	87 09       	st.w	r3[0x0],r9
8000599a:	2f f8       	sub	r8,-1
8000599c:	fb 48 06 8c 	st.w	sp[1676],r8
800059a0:	58 78       	cp.w	r8,7
800059a2:	e0 89 00 04 	brgt	800059aa <_vfprintf_r+0x1e16>
800059a6:	2f 83       	sub	r3,-8
800059a8:	c0 a8       	rjmp	800059bc <_vfprintf_r+0x1e28>
800059aa:	fa ca f9 78 	sub	r10,sp,-1672
800059ae:	02 9b       	mov	r11,r1
800059b0:	08 9c       	mov	r12,r4
800059b2:	fe b0 f0 e3 	rcall	80003b78 <__sprint_r>
800059b6:	c6 e1       	brne	80005a92 <_vfprintf_r+0x1efe>
800059b8:	fa c3 f9 e0 	sub	r3,sp,-1568
800059bc:	e2 15 00 04 	andl	r5,0x4,COH
800059c0:	c3 f0       	breq	80005a3e <_vfprintf_r+0x1eaa>
800059c2:	40 86       	lddsp	r6,sp[0x20]
800059c4:	40 39       	lddsp	r9,sp[0xc]
800059c6:	12 16       	sub	r6,r9
800059c8:	58 06       	cp.w	r6,0
800059ca:	e0 89 00 1a 	brgt	800059fe <_vfprintf_r+0x1e6a>
800059ce:	c3 88       	rjmp	80005a3e <_vfprintf_r+0x1eaa>
800059d0:	2f 09       	sub	r9,-16
800059d2:	2f f8       	sub	r8,-1
800059d4:	fb 49 06 90 	st.w	sp[1680],r9
800059d8:	87 05       	st.w	r3[0x0],r5
800059da:	87 12       	st.w	r3[0x4],r2
800059dc:	fb 48 06 8c 	st.w	sp[1676],r8
800059e0:	58 78       	cp.w	r8,7
800059e2:	e0 89 00 04 	brgt	800059ea <_vfprintf_r+0x1e56>
800059e6:	2f 83       	sub	r3,-8
800059e8:	c0 98       	rjmp	800059fa <_vfprintf_r+0x1e66>
800059ea:	00 9a       	mov	r10,r0
800059ec:	02 9b       	mov	r11,r1
800059ee:	08 9c       	mov	r12,r4
800059f0:	fe b0 f0 c4 	rcall	80003b78 <__sprint_r>
800059f4:	c4 f1       	brne	80005a92 <_vfprintf_r+0x1efe>
800059f6:	fa c3 f9 e0 	sub	r3,sp,-1568
800059fa:	21 06       	sub	r6,16
800059fc:	c0 68       	rjmp	80005a08 <_vfprintf_r+0x1e74>
800059fe:	fe c5 c3 36 	sub	r5,pc,-15562
80005a02:	31 02       	mov	r2,16
80005a04:	fa c0 f9 78 	sub	r0,sp,-1672
80005a08:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a0c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a10:	fe ca c3 48 	sub	r10,pc,-15544
80005a14:	59 06       	cp.w	r6,16
80005a16:	fe 99 ff dd 	brgt	800059d0 <_vfprintf_r+0x1e3c>
80005a1a:	0c 09       	add	r9,r6
80005a1c:	2f f8       	sub	r8,-1
80005a1e:	87 0a       	st.w	r3[0x0],r10
80005a20:	87 16       	st.w	r3[0x4],r6
80005a22:	fb 49 06 90 	st.w	sp[1680],r9
80005a26:	fb 48 06 8c 	st.w	sp[1676],r8
80005a2a:	58 78       	cp.w	r8,7
80005a2c:	e0 8a 00 09 	brle	80005a3e <_vfprintf_r+0x1eaa>
80005a30:	fa ca f9 78 	sub	r10,sp,-1672
80005a34:	02 9b       	mov	r11,r1
80005a36:	08 9c       	mov	r12,r4
80005a38:	fe b0 f0 a0 	rcall	80003b78 <__sprint_r>
80005a3c:	c2 b1       	brne	80005a92 <_vfprintf_r+0x1efe>
80005a3e:	40 bc       	lddsp	r12,sp[0x2c]
80005a40:	40 36       	lddsp	r6,sp[0xc]
80005a42:	40 8e       	lddsp	lr,sp[0x20]
80005a44:	ec 0e 0c 48 	max	r8,r6,lr
80005a48:	10 0c       	add	r12,r8
80005a4a:	50 bc       	stdsp	sp[0x2c],r12
80005a4c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a50:	58 08       	cp.w	r8,0
80005a52:	c0 80       	breq	80005a62 <_vfprintf_r+0x1ece>
80005a54:	fa ca f9 78 	sub	r10,sp,-1672
80005a58:	02 9b       	mov	r11,r1
80005a5a:	08 9c       	mov	r12,r4
80005a5c:	fe b0 f0 8e 	rcall	80003b78 <__sprint_r>
80005a60:	c1 91       	brne	80005a92 <_vfprintf_r+0x1efe>
80005a62:	30 0b       	mov	r11,0
80005a64:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a68:	fb 4b 06 8c 	st.w	sp[1676],r11
80005a6c:	fe 9f f1 22 	bral	80003cb0 <_vfprintf_r+0x11c>
80005a70:	08 95       	mov	r5,r4
80005a72:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a76:	58 08       	cp.w	r8,0
80005a78:	c0 80       	breq	80005a88 <_vfprintf_r+0x1ef4>
80005a7a:	08 9c       	mov	r12,r4
80005a7c:	fa ca f9 78 	sub	r10,sp,-1672
80005a80:	02 9b       	mov	r11,r1
80005a82:	fe b0 f0 7b 	rcall	80003b78 <__sprint_r>
80005a86:	c0 61       	brne	80005a92 <_vfprintf_r+0x1efe>
80005a88:	30 08       	mov	r8,0
80005a8a:	fb 48 06 8c 	st.w	sp[1676],r8
80005a8e:	c0 28       	rjmp	80005a92 <_vfprintf_r+0x1efe>
80005a90:	40 41       	lddsp	r1,sp[0x10]
80005a92:	82 68       	ld.sh	r8,r1[0xc]
80005a94:	ed b8 00 06 	bld	r8,0x6
80005a98:	c0 31       	brne	80005a9e <_vfprintf_r+0x1f0a>
80005a9a:	3f fa       	mov	r10,-1
80005a9c:	50 ba       	stdsp	sp[0x2c],r10
80005a9e:	40 bc       	lddsp	r12,sp[0x2c]
80005aa0:	fe 3d f9 44 	sub	sp,-1724
80005aa4:	d8 32       	popm	r0-r7,pc
80005aa6:	d7 03       	nop

80005aa8 <__swsetup_r>:
80005aa8:	d4 21       	pushm	r4-r7,lr
80005aaa:	e0 68 01 04 	mov	r8,260
80005aae:	18 96       	mov	r6,r12
80005ab0:	16 97       	mov	r7,r11
80005ab2:	70 0c       	ld.w	r12,r8[0x0]
80005ab4:	58 0c       	cp.w	r12,0
80005ab6:	c0 60       	breq	80005ac2 <__swsetup_r+0x1a>
80005ab8:	78 68       	ld.w	r8,r12[0x18]
80005aba:	58 08       	cp.w	r8,0
80005abc:	c0 31       	brne	80005ac2 <__swsetup_r+0x1a>
80005abe:	e0 a0 07 b9 	rcall	80006a30 <__sinit>
80005ac2:	fe c8 c2 ca 	sub	r8,pc,-15670
80005ac6:	10 37       	cp.w	r7,r8
80005ac8:	c0 61       	brne	80005ad4 <__swsetup_r+0x2c>
80005aca:	e0 68 01 04 	mov	r8,260
80005ace:	70 08       	ld.w	r8,r8[0x0]
80005ad0:	70 07       	ld.w	r7,r8[0x0]
80005ad2:	c1 28       	rjmp	80005af6 <__swsetup_r+0x4e>
80005ad4:	fe c8 c2 bc 	sub	r8,pc,-15684
80005ad8:	10 37       	cp.w	r7,r8
80005ada:	c0 61       	brne	80005ae6 <__swsetup_r+0x3e>
80005adc:	e0 68 01 04 	mov	r8,260
80005ae0:	70 08       	ld.w	r8,r8[0x0]
80005ae2:	70 17       	ld.w	r7,r8[0x4]
80005ae4:	c0 98       	rjmp	80005af6 <__swsetup_r+0x4e>
80005ae6:	fe c8 c2 ae 	sub	r8,pc,-15698
80005aea:	10 37       	cp.w	r7,r8
80005aec:	c0 51       	brne	80005af6 <__swsetup_r+0x4e>
80005aee:	e0 68 01 04 	mov	r8,260
80005af2:	70 08       	ld.w	r8,r8[0x0]
80005af4:	70 27       	ld.w	r7,r8[0x8]
80005af6:	8e 68       	ld.sh	r8,r7[0xc]
80005af8:	ed b8 00 03 	bld	r8,0x3
80005afc:	c1 e0       	breq	80005b38 <__swsetup_r+0x90>
80005afe:	ed b8 00 04 	bld	r8,0x4
80005b02:	c3 e1       	brne	80005b7e <__swsetup_r+0xd6>
80005b04:	ed b8 00 02 	bld	r8,0x2
80005b08:	c1 51       	brne	80005b32 <__swsetup_r+0x8a>
80005b0a:	6e db       	ld.w	r11,r7[0x34]
80005b0c:	58 0b       	cp.w	r11,0
80005b0e:	c0 a0       	breq	80005b22 <__swsetup_r+0x7a>
80005b10:	ee c8 ff bc 	sub	r8,r7,-68
80005b14:	10 3b       	cp.w	r11,r8
80005b16:	c0 40       	breq	80005b1e <__swsetup_r+0x76>
80005b18:	0c 9c       	mov	r12,r6
80005b1a:	e0 a0 08 25 	rcall	80006b64 <_free_r>
80005b1e:	30 08       	mov	r8,0
80005b20:	8f d8       	st.w	r7[0x34],r8
80005b22:	8e 68       	ld.sh	r8,r7[0xc]
80005b24:	e0 18 ff db 	andl	r8,0xffdb
80005b28:	ae 68       	st.h	r7[0xc],r8
80005b2a:	30 08       	mov	r8,0
80005b2c:	8f 18       	st.w	r7[0x4],r8
80005b2e:	6e 48       	ld.w	r8,r7[0x10]
80005b30:	8f 08       	st.w	r7[0x0],r8
80005b32:	8e 68       	ld.sh	r8,r7[0xc]
80005b34:	a3 b8       	sbr	r8,0x3
80005b36:	ae 68       	st.h	r7[0xc],r8
80005b38:	6e 48       	ld.w	r8,r7[0x10]
80005b3a:	58 08       	cp.w	r8,0
80005b3c:	c0 b1       	brne	80005b52 <__swsetup_r+0xaa>
80005b3e:	8e 68       	ld.sh	r8,r7[0xc]
80005b40:	e2 18 02 80 	andl	r8,0x280,COH
80005b44:	e0 48 02 00 	cp.w	r8,512
80005b48:	c0 50       	breq	80005b52 <__swsetup_r+0xaa>
80005b4a:	0c 9c       	mov	r12,r6
80005b4c:	0e 9b       	mov	r11,r7
80005b4e:	e0 a0 0a 4b 	rcall	80006fe4 <__smakebuf_r>
80005b52:	8e 69       	ld.sh	r9,r7[0xc]
80005b54:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005b58:	c0 70       	breq	80005b66 <__swsetup_r+0xbe>
80005b5a:	30 08       	mov	r8,0
80005b5c:	8f 28       	st.w	r7[0x8],r8
80005b5e:	6e 58       	ld.w	r8,r7[0x14]
80005b60:	5c 38       	neg	r8
80005b62:	8f 68       	st.w	r7[0x18],r8
80005b64:	c0 68       	rjmp	80005b70 <__swsetup_r+0xc8>
80005b66:	ed b9 00 01 	bld	r9,0x1
80005b6a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005b6e:	8f 28       	st.w	r7[0x8],r8
80005b70:	6e 48       	ld.w	r8,r7[0x10]
80005b72:	58 08       	cp.w	r8,0
80005b74:	c0 61       	brne	80005b80 <__swsetup_r+0xd8>
80005b76:	8e 68       	ld.sh	r8,r7[0xc]
80005b78:	ed b8 00 07 	bld	r8,0x7
80005b7c:	c0 21       	brne	80005b80 <__swsetup_r+0xd8>
80005b7e:	dc 2a       	popm	r4-r7,pc,r12=-1
80005b80:	d8 2a       	popm	r4-r7,pc,r12=0
80005b82:	d7 03       	nop

80005b84 <quorem>:
80005b84:	d4 31       	pushm	r0-r7,lr
80005b86:	20 2d       	sub	sp,8
80005b88:	18 97       	mov	r7,r12
80005b8a:	78 48       	ld.w	r8,r12[0x10]
80005b8c:	76 46       	ld.w	r6,r11[0x10]
80005b8e:	0c 38       	cp.w	r8,r6
80005b90:	c0 34       	brge	80005b96 <quorem+0x12>
80005b92:	30 0c       	mov	r12,0
80005b94:	c8 58       	rjmp	80005c9e <quorem+0x11a>
80005b96:	ec c2 ff fc 	sub	r2,r6,-4
80005b9a:	f6 c3 ff ec 	sub	r3,r11,-20
80005b9e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005ba2:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005ba6:	2f f9       	sub	r9,-1
80005ba8:	20 16       	sub	r6,1
80005baa:	f8 09 0d 08 	divu	r8,r12,r9
80005bae:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005bb2:	ee c4 ff ec 	sub	r4,r7,-20
80005bb6:	10 95       	mov	r5,r8
80005bb8:	58 08       	cp.w	r8,0
80005bba:	c4 10       	breq	80005c3c <quorem+0xb8>
80005bbc:	30 09       	mov	r9,0
80005bbe:	06 9a       	mov	r10,r3
80005bc0:	08 98       	mov	r8,r4
80005bc2:	12 91       	mov	r1,r9
80005bc4:	50 0b       	stdsp	sp[0x0],r11
80005bc6:	70 0e       	ld.w	lr,r8[0x0]
80005bc8:	b1 8e       	lsr	lr,0x10
80005bca:	50 1e       	stdsp	sp[0x4],lr
80005bcc:	15 0e       	ld.w	lr,r10++
80005bce:	fc 00 16 10 	lsr	r0,lr,0x10
80005bd2:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005bd6:	ea 0e 03 41 	mac	r1,r5,lr
80005bda:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005bde:	b1 81       	lsr	r1,0x10
80005be0:	40 1b       	lddsp	r11,sp[0x4]
80005be2:	ea 00 02 40 	mul	r0,r5,r0
80005be6:	e2 00 00 00 	add	r0,r1,r0
80005bea:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005bee:	02 1b       	sub	r11,r1
80005bf0:	50 1b       	stdsp	sp[0x4],r11
80005bf2:	70 0b       	ld.w	r11,r8[0x0]
80005bf4:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005bf8:	02 09       	add	r9,r1
80005bfa:	f2 0e 01 0e 	sub	lr,r9,lr
80005bfe:	b0 1e       	st.h	r8[0x2],lr
80005c00:	fc 09 14 10 	asr	r9,lr,0x10
80005c04:	40 1e       	lddsp	lr,sp[0x4]
80005c06:	fc 09 00 09 	add	r9,lr,r9
80005c0a:	b0 09       	st.h	r8[0x0],r9
80005c0c:	e0 01 16 10 	lsr	r1,r0,0x10
80005c10:	2f c8       	sub	r8,-4
80005c12:	b1 49       	asr	r9,0x10
80005c14:	04 3a       	cp.w	r10,r2
80005c16:	fe 98 ff d8 	brls	80005bc6 <quorem+0x42>
80005c1a:	40 0b       	lddsp	r11,sp[0x0]
80005c1c:	58 0c       	cp.w	r12,0
80005c1e:	c0 f1       	brne	80005c3c <quorem+0xb8>
80005c20:	ec c8 ff fb 	sub	r8,r6,-5
80005c24:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005c28:	c0 28       	rjmp	80005c2c <quorem+0xa8>
80005c2a:	20 16       	sub	r6,1
80005c2c:	20 48       	sub	r8,4
80005c2e:	08 38       	cp.w	r8,r4
80005c30:	e0 88 00 05 	brls	80005c3a <quorem+0xb6>
80005c34:	70 09       	ld.w	r9,r8[0x0]
80005c36:	58 09       	cp.w	r9,0
80005c38:	cf 90       	breq	80005c2a <quorem+0xa6>
80005c3a:	8f 46       	st.w	r7[0x10],r6
80005c3c:	0e 9c       	mov	r12,r7
80005c3e:	e0 a0 0c f4 	rcall	80007626 <__mcmp>
80005c42:	c2 d5       	brlt	80005c9c <quorem+0x118>
80005c44:	2f f5       	sub	r5,-1
80005c46:	08 98       	mov	r8,r4
80005c48:	30 09       	mov	r9,0
80005c4a:	07 0b       	ld.w	r11,r3++
80005c4c:	f6 0a 16 10 	lsr	r10,r11,0x10
80005c50:	70 0c       	ld.w	r12,r8[0x0]
80005c52:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005c56:	f8 0e 16 10 	lsr	lr,r12,0x10
80005c5a:	14 1e       	sub	lr,r10
80005c5c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005c60:	16 1a       	sub	r10,r11
80005c62:	12 0a       	add	r10,r9
80005c64:	b0 1a       	st.h	r8[0x2],r10
80005c66:	b1 4a       	asr	r10,0x10
80005c68:	fc 0a 00 09 	add	r9,lr,r10
80005c6c:	b0 09       	st.h	r8[0x0],r9
80005c6e:	2f c8       	sub	r8,-4
80005c70:	b1 49       	asr	r9,0x10
80005c72:	04 33       	cp.w	r3,r2
80005c74:	fe 98 ff eb 	brls	80005c4a <quorem+0xc6>
80005c78:	ec c8 ff fb 	sub	r8,r6,-5
80005c7c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005c80:	58 09       	cp.w	r9,0
80005c82:	c0 d1       	brne	80005c9c <quorem+0x118>
80005c84:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005c88:	c0 28       	rjmp	80005c8c <quorem+0x108>
80005c8a:	20 16       	sub	r6,1
80005c8c:	20 48       	sub	r8,4
80005c8e:	08 38       	cp.w	r8,r4
80005c90:	e0 88 00 05 	brls	80005c9a <quorem+0x116>
80005c94:	70 09       	ld.w	r9,r8[0x0]
80005c96:	58 09       	cp.w	r9,0
80005c98:	cf 90       	breq	80005c8a <quorem+0x106>
80005c9a:	8f 46       	st.w	r7[0x10],r6
80005c9c:	0a 9c       	mov	r12,r5
80005c9e:	2f ed       	sub	sp,-8
80005ca0:	d8 32       	popm	r0-r7,pc
80005ca2:	d7 03       	nop

80005ca4 <_dtoa_r>:
80005ca4:	d4 31       	pushm	r0-r7,lr
80005ca6:	21 ad       	sub	sp,104
80005ca8:	fa c4 ff 74 	sub	r4,sp,-140
80005cac:	18 97       	mov	r7,r12
80005cae:	16 95       	mov	r5,r11
80005cb0:	68 2c       	ld.w	r12,r4[0x8]
80005cb2:	50 c9       	stdsp	sp[0x30],r9
80005cb4:	68 16       	ld.w	r6,r4[0x4]
80005cb6:	68 09       	ld.w	r9,r4[0x0]
80005cb8:	50 e8       	stdsp	sp[0x38],r8
80005cba:	14 94       	mov	r4,r10
80005cbc:	51 2c       	stdsp	sp[0x48],r12
80005cbe:	fa e5 00 08 	st.d	sp[8],r4
80005cc2:	51 59       	stdsp	sp[0x54],r9
80005cc4:	6e 95       	ld.w	r5,r7[0x24]
80005cc6:	58 05       	cp.w	r5,0
80005cc8:	c0 91       	brne	80005cda <_dtoa_r+0x36>
80005cca:	31 0c       	mov	r12,16
80005ccc:	e0 a0 09 ea 	rcall	800070a0 <malloc>
80005cd0:	99 35       	st.w	r12[0xc],r5
80005cd2:	8f 9c       	st.w	r7[0x24],r12
80005cd4:	99 15       	st.w	r12[0x4],r5
80005cd6:	99 25       	st.w	r12[0x8],r5
80005cd8:	99 05       	st.w	r12[0x0],r5
80005cda:	6e 99       	ld.w	r9,r7[0x24]
80005cdc:	72 08       	ld.w	r8,r9[0x0]
80005cde:	58 08       	cp.w	r8,0
80005ce0:	c0 f0       	breq	80005cfe <_dtoa_r+0x5a>
80005ce2:	72 1a       	ld.w	r10,r9[0x4]
80005ce4:	91 1a       	st.w	r8[0x4],r10
80005ce6:	30 1a       	mov	r10,1
80005ce8:	72 19       	ld.w	r9,r9[0x4]
80005cea:	f4 09 09 49 	lsl	r9,r10,r9
80005cee:	10 9b       	mov	r11,r8
80005cf0:	91 29       	st.w	r8[0x8],r9
80005cf2:	0e 9c       	mov	r12,r7
80005cf4:	e0 a0 0c b2 	rcall	80007658 <_Bfree>
80005cf8:	6e 98       	ld.w	r8,r7[0x24]
80005cfa:	30 09       	mov	r9,0
80005cfc:	91 09       	st.w	r8[0x0],r9
80005cfe:	40 28       	lddsp	r8,sp[0x8]
80005d00:	10 94       	mov	r4,r8
80005d02:	58 08       	cp.w	r8,0
80005d04:	c0 64       	brge	80005d10 <_dtoa_r+0x6c>
80005d06:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005d0a:	50 28       	stdsp	sp[0x8],r8
80005d0c:	30 18       	mov	r8,1
80005d0e:	c0 28       	rjmp	80005d12 <_dtoa_r+0x6e>
80005d10:	30 08       	mov	r8,0
80005d12:	8d 08       	st.w	r6[0x0],r8
80005d14:	fc 1c 7f f0 	movh	r12,0x7ff0
80005d18:	40 26       	lddsp	r6,sp[0x8]
80005d1a:	0c 98       	mov	r8,r6
80005d1c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005d20:	18 38       	cp.w	r8,r12
80005d22:	c2 01       	brne	80005d62 <_dtoa_r+0xbe>
80005d24:	e0 68 27 0f 	mov	r8,9999
80005d28:	41 5b       	lddsp	r11,sp[0x54]
80005d2a:	97 08       	st.w	r11[0x0],r8
80005d2c:	40 3a       	lddsp	r10,sp[0xc]
80005d2e:	58 0a       	cp.w	r10,0
80005d30:	c0 71       	brne	80005d3e <_dtoa_r+0x9a>
80005d32:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005d36:	c0 41       	brne	80005d3e <_dtoa_r+0x9a>
80005d38:	fe cc c5 50 	sub	r12,pc,-15024
80005d3c:	c0 38       	rjmp	80005d42 <_dtoa_r+0x9e>
80005d3e:	fe cc c5 4a 	sub	r12,pc,-15030
80005d42:	41 29       	lddsp	r9,sp[0x48]
80005d44:	58 09       	cp.w	r9,0
80005d46:	e0 80 05 9a 	breq	8000687a <_dtoa_r+0xbd6>
80005d4a:	f8 c8 ff fd 	sub	r8,r12,-3
80005d4e:	f8 c9 ff f8 	sub	r9,r12,-8
80005d52:	11 8b       	ld.ub	r11,r8[0x0]
80005d54:	30 0a       	mov	r10,0
80005d56:	41 25       	lddsp	r5,sp[0x48]
80005d58:	f4 0b 18 00 	cp.b	r11,r10
80005d5c:	f2 08 17 10 	movne	r8,r9
80005d60:	c1 68       	rjmp	80005d8c <_dtoa_r+0xe8>
80005d62:	fa ea 00 08 	ld.d	r10,sp[8]
80005d66:	30 08       	mov	r8,0
80005d68:	fa eb 00 3c 	st.d	sp[60],r10
80005d6c:	30 09       	mov	r9,0
80005d6e:	e0 a0 14 de 	rcall	8000872a <__avr32_f64_cmp_eq>
80005d72:	c1 00       	breq	80005d92 <_dtoa_r+0xee>
80005d74:	30 18       	mov	r8,1
80005d76:	41 5a       	lddsp	r10,sp[0x54]
80005d78:	95 08       	st.w	r10[0x0],r8
80005d7a:	fe cc c6 b6 	sub	r12,pc,-14666
80005d7e:	41 29       	lddsp	r9,sp[0x48]
80005d80:	f8 08 00 08 	add	r8,r12,r8
80005d84:	58 09       	cp.w	r9,0
80005d86:	e0 80 05 7a 	breq	8000687a <_dtoa_r+0xbd6>
80005d8a:	12 95       	mov	r5,r9
80005d8c:	8b 08       	st.w	r5[0x0],r8
80005d8e:	e0 8f 05 76 	bral	8000687a <_dtoa_r+0xbd6>
80005d92:	fa c8 ff 9c 	sub	r8,sp,-100
80005d96:	fa c9 ff a0 	sub	r9,sp,-96
80005d9a:	fa ea 00 3c 	ld.d	r10,sp[60]
80005d9e:	0e 9c       	mov	r12,r7
80005da0:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005da4:	e0 a0 0c ac 	rcall	800076fc <__d2b>
80005da8:	18 93       	mov	r3,r12
80005daa:	58 05       	cp.w	r5,0
80005dac:	c0 d0       	breq	80005dc6 <_dtoa_r+0x122>
80005dae:	fa ea 00 3c 	ld.d	r10,sp[60]
80005db2:	30 04       	mov	r4,0
80005db4:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005db8:	ea c5 03 ff 	sub	r5,r5,1023
80005dbc:	10 9b       	mov	r11,r8
80005dbe:	51 74       	stdsp	sp[0x5c],r4
80005dc0:	ea 1b 3f f0 	orh	r11,0x3ff0
80005dc4:	c2 58       	rjmp	80005e0e <_dtoa_r+0x16a>
80005dc6:	41 88       	lddsp	r8,sp[0x60]
80005dc8:	41 9c       	lddsp	r12,sp[0x64]
80005dca:	10 0c       	add	r12,r8
80005dcc:	f8 c5 fb ce 	sub	r5,r12,-1074
80005dd0:	e0 45 00 20 	cp.w	r5,32
80005dd4:	e0 8a 00 0e 	brle	80005df0 <_dtoa_r+0x14c>
80005dd8:	f8 cc fb ee 	sub	r12,r12,-1042
80005ddc:	40 3b       	lddsp	r11,sp[0xc]
80005dde:	ea 08 11 40 	rsub	r8,r5,64
80005de2:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005de6:	ec 08 09 46 	lsl	r6,r6,r8
80005dea:	0c 4c       	or	r12,r6
80005dec:	c0 78       	rjmp	80005dfa <_dtoa_r+0x156>
80005dee:	d7 03       	nop
80005df0:	ea 0c 11 20 	rsub	r12,r5,32
80005df4:	40 3a       	lddsp	r10,sp[0xc]
80005df6:	f4 0c 09 4c 	lsl	r12,r10,r12
80005dfa:	e0 a0 14 24 	rcall	80008642 <__avr32_u32_to_f64>
80005dfe:	fc 18 fe 10 	movh	r8,0xfe10
80005e02:	30 19       	mov	r9,1
80005e04:	ea c5 04 33 	sub	r5,r5,1075
80005e08:	f0 0b 00 0b 	add	r11,r8,r11
80005e0c:	51 79       	stdsp	sp[0x5c],r9
80005e0e:	30 08       	mov	r8,0
80005e10:	fc 19 3f f8 	movh	r9,0x3ff8
80005e14:	e0 a0 12 ac 	rcall	8000836c <__avr32_f64_sub>
80005e18:	e0 68 43 61 	mov	r8,17249
80005e1c:	ea 18 63 6f 	orh	r8,0x636f
80005e20:	e0 69 87 a7 	mov	r9,34727
80005e24:	ea 19 3f d2 	orh	r9,0x3fd2
80005e28:	e0 a0 11 b6 	rcall	80008194 <__avr32_f64_mul>
80005e2c:	e0 68 c8 b3 	mov	r8,51379
80005e30:	ea 18 8b 60 	orh	r8,0x8b60
80005e34:	e0 69 8a 28 	mov	r9,35368
80005e38:	ea 19 3f c6 	orh	r9,0x3fc6
80005e3c:	e0 a0 13 66 	rcall	80008508 <__avr32_f64_add>
80005e40:	0a 9c       	mov	r12,r5
80005e42:	14 90       	mov	r0,r10
80005e44:	16 91       	mov	r1,r11
80005e46:	e0 a0 14 02 	rcall	8000864a <__avr32_s32_to_f64>
80005e4a:	e0 68 79 fb 	mov	r8,31227
80005e4e:	ea 18 50 9f 	orh	r8,0x509f
80005e52:	e0 69 44 13 	mov	r9,17427
80005e56:	ea 19 3f d3 	orh	r9,0x3fd3
80005e5a:	e0 a0 11 9d 	rcall	80008194 <__avr32_f64_mul>
80005e5e:	14 98       	mov	r8,r10
80005e60:	16 99       	mov	r9,r11
80005e62:	00 9a       	mov	r10,r0
80005e64:	02 9b       	mov	r11,r1
80005e66:	e0 a0 13 51 	rcall	80008508 <__avr32_f64_add>
80005e6a:	14 90       	mov	r0,r10
80005e6c:	16 91       	mov	r1,r11
80005e6e:	e0 a0 13 d7 	rcall	8000861c <__avr32_f64_to_s32>
80005e72:	30 08       	mov	r8,0
80005e74:	18 96       	mov	r6,r12
80005e76:	30 09       	mov	r9,0
80005e78:	00 9a       	mov	r10,r0
80005e7a:	02 9b       	mov	r11,r1
80005e7c:	e0 a0 14 9e 	rcall	800087b8 <__avr32_f64_cmp_lt>
80005e80:	c0 c0       	breq	80005e98 <_dtoa_r+0x1f4>
80005e82:	0c 9c       	mov	r12,r6
80005e84:	e0 a0 13 e3 	rcall	8000864a <__avr32_s32_to_f64>
80005e88:	14 98       	mov	r8,r10
80005e8a:	16 99       	mov	r9,r11
80005e8c:	00 9a       	mov	r10,r0
80005e8e:	02 9b       	mov	r11,r1
80005e90:	e0 a0 14 4d 	rcall	8000872a <__avr32_f64_cmp_eq>
80005e94:	f7 b6 00 01 	subeq	r6,1
80005e98:	59 66       	cp.w	r6,22
80005e9a:	e0 88 00 05 	brls	80005ea4 <_dtoa_r+0x200>
80005e9e:	30 18       	mov	r8,1
80005ea0:	51 48       	stdsp	sp[0x50],r8
80005ea2:	c1 38       	rjmp	80005ec8 <_dtoa_r+0x224>
80005ea4:	fe c8 c6 00 	sub	r8,pc,-14848
80005ea8:	fa ea 00 3c 	ld.d	r10,sp[60]
80005eac:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005eb0:	e0 a0 14 84 	rcall	800087b8 <__avr32_f64_cmp_lt>
80005eb4:	f9 b4 00 00 	moveq	r4,0
80005eb8:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005ebc:	f7 b6 01 01 	subne	r6,1
80005ec0:	f9 bc 01 00 	movne	r12,0
80005ec4:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005ec8:	41 90       	lddsp	r0,sp[0x64]
80005eca:	20 10       	sub	r0,1
80005ecc:	0a 10       	sub	r0,r5
80005ece:	c0 46       	brmi	80005ed6 <_dtoa_r+0x232>
80005ed0:	50 40       	stdsp	sp[0x10],r0
80005ed2:	30 00       	mov	r0,0
80005ed4:	c0 48       	rjmp	80005edc <_dtoa_r+0x238>
80005ed6:	30 0b       	mov	r11,0
80005ed8:	5c 30       	neg	r0
80005eda:	50 4b       	stdsp	sp[0x10],r11
80005edc:	ec 02 11 00 	rsub	r2,r6,0
80005ee0:	58 06       	cp.w	r6,0
80005ee2:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005ee6:	f5 d6 e4 0a 	addge	r10,r10,r6
80005eea:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005eee:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005ef2:	f9 b2 04 00 	movge	r2,0
80005ef6:	e1 d6 e5 10 	sublt	r0,r0,r6
80005efa:	f9 b9 05 00 	movlt	r9,0
80005efe:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005f02:	40 c8       	lddsp	r8,sp[0x30]
80005f04:	58 98       	cp.w	r8,9
80005f06:	e0 8b 00 20 	brhi	80005f46 <_dtoa_r+0x2a2>
80005f0a:	58 58       	cp.w	r8,5
80005f0c:	f9 b4 0a 01 	movle	r4,1
80005f10:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005f14:	f7 b5 09 04 	subgt	r5,4
80005f18:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005f1c:	f9 b4 09 00 	movgt	r4,0
80005f20:	40 cc       	lddsp	r12,sp[0x30]
80005f22:	58 3c       	cp.w	r12,3
80005f24:	c2 d0       	breq	80005f7e <_dtoa_r+0x2da>
80005f26:	e0 89 00 05 	brgt	80005f30 <_dtoa_r+0x28c>
80005f2a:	58 2c       	cp.w	r12,2
80005f2c:	c1 01       	brne	80005f4c <_dtoa_r+0x2a8>
80005f2e:	c1 88       	rjmp	80005f5e <_dtoa_r+0x2ba>
80005f30:	40 cb       	lddsp	r11,sp[0x30]
80005f32:	58 4b       	cp.w	r11,4
80005f34:	c0 60       	breq	80005f40 <_dtoa_r+0x29c>
80005f36:	58 5b       	cp.w	r11,5
80005f38:	c0 a1       	brne	80005f4c <_dtoa_r+0x2a8>
80005f3a:	30 1a       	mov	r10,1
80005f3c:	50 da       	stdsp	sp[0x34],r10
80005f3e:	c2 28       	rjmp	80005f82 <_dtoa_r+0x2de>
80005f40:	30 19       	mov	r9,1
80005f42:	50 d9       	stdsp	sp[0x34],r9
80005f44:	c0 f8       	rjmp	80005f62 <_dtoa_r+0x2be>
80005f46:	30 08       	mov	r8,0
80005f48:	30 14       	mov	r4,1
80005f4a:	50 c8       	stdsp	sp[0x30],r8
80005f4c:	3f f5       	mov	r5,-1
80005f4e:	30 1c       	mov	r12,1
80005f50:	30 0b       	mov	r11,0
80005f52:	50 95       	stdsp	sp[0x24],r5
80005f54:	50 dc       	stdsp	sp[0x34],r12
80005f56:	0a 91       	mov	r1,r5
80005f58:	31 28       	mov	r8,18
80005f5a:	50 eb       	stdsp	sp[0x38],r11
80005f5c:	c2 08       	rjmp	80005f9c <_dtoa_r+0x2f8>
80005f5e:	30 0a       	mov	r10,0
80005f60:	50 da       	stdsp	sp[0x34],r10
80005f62:	40 e9       	lddsp	r9,sp[0x38]
80005f64:	58 09       	cp.w	r9,0
80005f66:	e0 89 00 07 	brgt	80005f74 <_dtoa_r+0x2d0>
80005f6a:	30 18       	mov	r8,1
80005f6c:	50 98       	stdsp	sp[0x24],r8
80005f6e:	10 91       	mov	r1,r8
80005f70:	50 e8       	stdsp	sp[0x38],r8
80005f72:	c1 58       	rjmp	80005f9c <_dtoa_r+0x2f8>
80005f74:	40 e5       	lddsp	r5,sp[0x38]
80005f76:	50 95       	stdsp	sp[0x24],r5
80005f78:	0a 91       	mov	r1,r5
80005f7a:	0a 98       	mov	r8,r5
80005f7c:	c1 08       	rjmp	80005f9c <_dtoa_r+0x2f8>
80005f7e:	30 0c       	mov	r12,0
80005f80:	50 dc       	stdsp	sp[0x34],r12
80005f82:	40 eb       	lddsp	r11,sp[0x38]
80005f84:	ec 0b 00 0b 	add	r11,r6,r11
80005f88:	50 9b       	stdsp	sp[0x24],r11
80005f8a:	16 98       	mov	r8,r11
80005f8c:	2f f8       	sub	r8,-1
80005f8e:	58 08       	cp.w	r8,0
80005f90:	e0 89 00 05 	brgt	80005f9a <_dtoa_r+0x2f6>
80005f94:	10 91       	mov	r1,r8
80005f96:	30 18       	mov	r8,1
80005f98:	c0 28       	rjmp	80005f9c <_dtoa_r+0x2f8>
80005f9a:	10 91       	mov	r1,r8
80005f9c:	30 09       	mov	r9,0
80005f9e:	6e 9a       	ld.w	r10,r7[0x24]
80005fa0:	95 19       	st.w	r10[0x4],r9
80005fa2:	30 49       	mov	r9,4
80005fa4:	c0 68       	rjmp	80005fb0 <_dtoa_r+0x30c>
80005fa6:	d7 03       	nop
80005fa8:	6a 1a       	ld.w	r10,r5[0x4]
80005faa:	a1 79       	lsl	r9,0x1
80005fac:	2f fa       	sub	r10,-1
80005fae:	8b 1a       	st.w	r5[0x4],r10
80005fb0:	6e 95       	ld.w	r5,r7[0x24]
80005fb2:	f2 ca ff ec 	sub	r10,r9,-20
80005fb6:	10 3a       	cp.w	r10,r8
80005fb8:	fe 98 ff f8 	brls	80005fa8 <_dtoa_r+0x304>
80005fbc:	6a 1b       	ld.w	r11,r5[0x4]
80005fbe:	0e 9c       	mov	r12,r7
80005fc0:	e0 a0 0b 66 	rcall	8000768c <_Balloc>
80005fc4:	58 e1       	cp.w	r1,14
80005fc6:	5f 88       	srls	r8
80005fc8:	8b 0c       	st.w	r5[0x0],r12
80005fca:	f1 e4 00 04 	and	r4,r8,r4
80005fce:	6e 98       	ld.w	r8,r7[0x24]
80005fd0:	70 08       	ld.w	r8,r8[0x0]
80005fd2:	50 88       	stdsp	sp[0x20],r8
80005fd4:	e0 80 01 82 	breq	800062d8 <_dtoa_r+0x634>
80005fd8:	58 06       	cp.w	r6,0
80005fda:	e0 8a 00 43 	brle	80006060 <_dtoa_r+0x3bc>
80005fde:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005fe2:	fe c8 c7 3e 	sub	r8,pc,-14530
80005fe6:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005fea:	fa e5 00 18 	st.d	sp[24],r4
80005fee:	ec 04 14 04 	asr	r4,r6,0x4
80005ff2:	ed b4 00 04 	bld	r4,0x4
80005ff6:	c0 30       	breq	80005ffc <_dtoa_r+0x358>
80005ff8:	30 25       	mov	r5,2
80005ffa:	c1 08       	rjmp	8000601a <_dtoa_r+0x376>
80005ffc:	fe c8 c6 90 	sub	r8,pc,-14704
80006000:	f0 e8 00 20 	ld.d	r8,r8[32]
80006004:	fa ea 00 3c 	ld.d	r10,sp[60]
80006008:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000600c:	e0 a0 14 0a 	rcall	80008820 <__avr32_f64_div>
80006010:	30 35       	mov	r5,3
80006012:	14 98       	mov	r8,r10
80006014:	16 99       	mov	r9,r11
80006016:	fa e9 00 08 	st.d	sp[8],r8
8000601a:	fe cc c6 ae 	sub	r12,pc,-14674
8000601e:	50 a3       	stdsp	sp[0x28],r3
80006020:	0c 93       	mov	r3,r6
80006022:	18 96       	mov	r6,r12
80006024:	c0 f8       	rjmp	80006042 <_dtoa_r+0x39e>
80006026:	fa ea 00 18 	ld.d	r10,sp[24]
8000602a:	ed b4 00 00 	bld	r4,0x0
8000602e:	c0 81       	brne	8000603e <_dtoa_r+0x39a>
80006030:	ec e8 00 00 	ld.d	r8,r6[0]
80006034:	2f f5       	sub	r5,-1
80006036:	e0 a0 10 af 	rcall	80008194 <__avr32_f64_mul>
8000603a:	fa eb 00 18 	st.d	sp[24],r10
8000603e:	a1 54       	asr	r4,0x1
80006040:	2f 86       	sub	r6,-8
80006042:	58 04       	cp.w	r4,0
80006044:	cf 11       	brne	80006026 <_dtoa_r+0x382>
80006046:	fa e8 00 18 	ld.d	r8,sp[24]
8000604a:	fa ea 00 08 	ld.d	r10,sp[8]
8000604e:	06 96       	mov	r6,r3
80006050:	e0 a0 13 e8 	rcall	80008820 <__avr32_f64_div>
80006054:	40 a3       	lddsp	r3,sp[0x28]
80006056:	14 98       	mov	r8,r10
80006058:	16 99       	mov	r9,r11
8000605a:	fa e9 00 08 	st.d	sp[8],r8
8000605e:	c2 f8       	rjmp	800060bc <_dtoa_r+0x418>
80006060:	ec 08 11 00 	rsub	r8,r6,0
80006064:	c0 31       	brne	8000606a <_dtoa_r+0x3c6>
80006066:	30 25       	mov	r5,2
80006068:	c2 a8       	rjmp	800060bc <_dtoa_r+0x418>
8000606a:	fe cc c6 fe 	sub	r12,pc,-14594
8000606e:	f0 04 14 04 	asr	r4,r8,0x4
80006072:	50 1c       	stdsp	sp[0x4],r12
80006074:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006078:	fe c9 c7 d4 	sub	r9,pc,-14380
8000607c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006080:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006084:	e0 a0 10 88 	rcall	80008194 <__avr32_f64_mul>
80006088:	40 1c       	lddsp	r12,sp[0x4]
8000608a:	50 63       	stdsp	sp[0x18],r3
8000608c:	30 25       	mov	r5,2
8000608e:	0c 93       	mov	r3,r6
80006090:	fa eb 00 08 	st.d	sp[8],r10
80006094:	18 96       	mov	r6,r12
80006096:	c0 f8       	rjmp	800060b4 <_dtoa_r+0x410>
80006098:	fa ea 00 08 	ld.d	r10,sp[8]
8000609c:	ed b4 00 00 	bld	r4,0x0
800060a0:	c0 81       	brne	800060b0 <_dtoa_r+0x40c>
800060a2:	ec e8 00 00 	ld.d	r8,r6[0]
800060a6:	2f f5       	sub	r5,-1
800060a8:	e0 a0 10 76 	rcall	80008194 <__avr32_f64_mul>
800060ac:	fa eb 00 08 	st.d	sp[8],r10
800060b0:	a1 54       	asr	r4,0x1
800060b2:	2f 86       	sub	r6,-8
800060b4:	58 04       	cp.w	r4,0
800060b6:	cf 11       	brne	80006098 <_dtoa_r+0x3f4>
800060b8:	06 96       	mov	r6,r3
800060ba:	40 63       	lddsp	r3,sp[0x18]
800060bc:	41 4a       	lddsp	r10,sp[0x50]
800060be:	58 0a       	cp.w	r10,0
800060c0:	c2 a0       	breq	80006114 <_dtoa_r+0x470>
800060c2:	fa e8 00 08 	ld.d	r8,sp[8]
800060c6:	58 01       	cp.w	r1,0
800060c8:	5f 94       	srgt	r4
800060ca:	fa e9 00 18 	st.d	sp[24],r8
800060ce:	30 08       	mov	r8,0
800060d0:	fc 19 3f f0 	movh	r9,0x3ff0
800060d4:	fa ea 00 18 	ld.d	r10,sp[24]
800060d8:	e0 a0 13 70 	rcall	800087b8 <__avr32_f64_cmp_lt>
800060dc:	f9 bc 00 00 	moveq	r12,0
800060e0:	f9 bc 01 01 	movne	r12,1
800060e4:	e9 ec 00 0c 	and	r12,r4,r12
800060e8:	c1 60       	breq	80006114 <_dtoa_r+0x470>
800060ea:	40 98       	lddsp	r8,sp[0x24]
800060ec:	58 08       	cp.w	r8,0
800060ee:	e0 8a 00 f1 	brle	800062d0 <_dtoa_r+0x62c>
800060f2:	30 08       	mov	r8,0
800060f4:	fc 19 40 24 	movh	r9,0x4024
800060f8:	ec c4 00 01 	sub	r4,r6,1
800060fc:	fa ea 00 18 	ld.d	r10,sp[24]
80006100:	2f f5       	sub	r5,-1
80006102:	50 64       	stdsp	sp[0x18],r4
80006104:	e0 a0 10 48 	rcall	80008194 <__avr32_f64_mul>
80006108:	40 94       	lddsp	r4,sp[0x24]
8000610a:	14 98       	mov	r8,r10
8000610c:	16 99       	mov	r9,r11
8000610e:	fa e9 00 08 	st.d	sp[8],r8
80006112:	c0 38       	rjmp	80006118 <_dtoa_r+0x474>
80006114:	50 66       	stdsp	sp[0x18],r6
80006116:	02 94       	mov	r4,r1
80006118:	0a 9c       	mov	r12,r5
8000611a:	e0 a0 12 98 	rcall	8000864a <__avr32_s32_to_f64>
8000611e:	fa e8 00 08 	ld.d	r8,sp[8]
80006122:	e0 a0 10 39 	rcall	80008194 <__avr32_f64_mul>
80006126:	30 08       	mov	r8,0
80006128:	fc 19 40 1c 	movh	r9,0x401c
8000612c:	e0 a0 11 ee 	rcall	80008508 <__avr32_f64_add>
80006130:	14 98       	mov	r8,r10
80006132:	16 99       	mov	r9,r11
80006134:	fa e9 00 28 	st.d	sp[40],r8
80006138:	fc 18 fc c0 	movh	r8,0xfcc0
8000613c:	40 a5       	lddsp	r5,sp[0x28]
8000613e:	10 05       	add	r5,r8
80006140:	50 a5       	stdsp	sp[0x28],r5
80006142:	58 04       	cp.w	r4,0
80006144:	c2 11       	brne	80006186 <_dtoa_r+0x4e2>
80006146:	fa ea 00 08 	ld.d	r10,sp[8]
8000614a:	30 08       	mov	r8,0
8000614c:	fc 19 40 14 	movh	r9,0x4014
80006150:	e0 a0 11 0e 	rcall	8000836c <__avr32_f64_sub>
80006154:	40 bc       	lddsp	r12,sp[0x2c]
80006156:	fa eb 00 08 	st.d	sp[8],r10
8000615a:	14 98       	mov	r8,r10
8000615c:	16 99       	mov	r9,r11
8000615e:	18 9a       	mov	r10,r12
80006160:	0a 9b       	mov	r11,r5
80006162:	e0 a0 13 2b 	rcall	800087b8 <__avr32_f64_cmp_lt>
80006166:	e0 81 02 54 	brne	8000660e <_dtoa_r+0x96a>
8000616a:	0a 98       	mov	r8,r5
8000616c:	40 b9       	lddsp	r9,sp[0x2c]
8000616e:	ee 18 80 00 	eorh	r8,0x8000
80006172:	fa ea 00 08 	ld.d	r10,sp[8]
80006176:	10 95       	mov	r5,r8
80006178:	12 98       	mov	r8,r9
8000617a:	0a 99       	mov	r9,r5
8000617c:	e0 a0 13 1e 	rcall	800087b8 <__avr32_f64_cmp_lt>
80006180:	e0 81 02 3e 	brne	800065fc <_dtoa_r+0x958>
80006184:	ca 68       	rjmp	800062d0 <_dtoa_r+0x62c>
80006186:	fe c9 c8 e2 	sub	r9,pc,-14110
8000618a:	e8 c8 00 01 	sub	r8,r4,1
8000618e:	40 d5       	lddsp	r5,sp[0x34]
80006190:	58 05       	cp.w	r5,0
80006192:	c4 f0       	breq	80006230 <_dtoa_r+0x58c>
80006194:	30 0c       	mov	r12,0
80006196:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000619a:	51 3c       	stdsp	sp[0x4c],r12
8000619c:	30 0a       	mov	r10,0
8000619e:	fc 1b 3f e0 	movh	r11,0x3fe0
800061a2:	e0 a0 13 3f 	rcall	80008820 <__avr32_f64_div>
800061a6:	fa e8 00 28 	ld.d	r8,sp[40]
800061aa:	40 85       	lddsp	r5,sp[0x20]
800061ac:	e0 a0 10 e0 	rcall	8000836c <__avr32_f64_sub>
800061b0:	fa eb 00 28 	st.d	sp[40],r10
800061b4:	fa ea 00 08 	ld.d	r10,sp[8]
800061b8:	e0 a0 12 32 	rcall	8000861c <__avr32_f64_to_s32>
800061bc:	51 6c       	stdsp	sp[0x58],r12
800061be:	e0 a0 12 46 	rcall	8000864a <__avr32_s32_to_f64>
800061c2:	14 98       	mov	r8,r10
800061c4:	16 99       	mov	r9,r11
800061c6:	fa ea 00 08 	ld.d	r10,sp[8]
800061ca:	e0 a0 10 d1 	rcall	8000836c <__avr32_f64_sub>
800061ce:	fa eb 00 08 	st.d	sp[8],r10
800061d2:	41 68       	lddsp	r8,sp[0x58]
800061d4:	2d 08       	sub	r8,-48
800061d6:	0a c8       	st.b	r5++,r8
800061d8:	41 39       	lddsp	r9,sp[0x4c]
800061da:	2f f9       	sub	r9,-1
800061dc:	51 39       	stdsp	sp[0x4c],r9
800061de:	fa e8 00 28 	ld.d	r8,sp[40]
800061e2:	e0 a0 12 eb 	rcall	800087b8 <__avr32_f64_cmp_lt>
800061e6:	e0 81 03 39 	brne	80006858 <_dtoa_r+0xbb4>
800061ea:	fa e8 00 08 	ld.d	r8,sp[8]
800061ee:	30 0a       	mov	r10,0
800061f0:	fc 1b 3f f0 	movh	r11,0x3ff0
800061f4:	e0 a0 10 bc 	rcall	8000836c <__avr32_f64_sub>
800061f8:	fa e8 00 28 	ld.d	r8,sp[40]
800061fc:	e0 a0 12 de 	rcall	800087b8 <__avr32_f64_cmp_lt>
80006200:	fa ea 00 28 	ld.d	r10,sp[40]
80006204:	30 08       	mov	r8,0
80006206:	fc 19 40 24 	movh	r9,0x4024
8000620a:	e0 81 00 da 	brne	800063be <_dtoa_r+0x71a>
8000620e:	41 3c       	lddsp	r12,sp[0x4c]
80006210:	08 3c       	cp.w	r12,r4
80006212:	c5 f4       	brge	800062d0 <_dtoa_r+0x62c>
80006214:	e0 a0 0f c0 	rcall	80008194 <__avr32_f64_mul>
80006218:	30 08       	mov	r8,0
8000621a:	fa eb 00 28 	st.d	sp[40],r10
8000621e:	fc 19 40 24 	movh	r9,0x4024
80006222:	fa ea 00 08 	ld.d	r10,sp[8]
80006226:	e0 a0 0f b7 	rcall	80008194 <__avr32_f64_mul>
8000622a:	fa eb 00 08 	st.d	sp[8],r10
8000622e:	cc 3b       	rjmp	800061b4 <_dtoa_r+0x510>
80006230:	40 85       	lddsp	r5,sp[0x20]
80006232:	08 05       	add	r5,r4
80006234:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006238:	51 35       	stdsp	sp[0x4c],r5
8000623a:	fa e8 00 28 	ld.d	r8,sp[40]
8000623e:	40 85       	lddsp	r5,sp[0x20]
80006240:	e0 a0 0f aa 	rcall	80008194 <__avr32_f64_mul>
80006244:	fa eb 00 28 	st.d	sp[40],r10
80006248:	fa ea 00 08 	ld.d	r10,sp[8]
8000624c:	e0 a0 11 e8 	rcall	8000861c <__avr32_f64_to_s32>
80006250:	51 6c       	stdsp	sp[0x58],r12
80006252:	e0 a0 11 fc 	rcall	8000864a <__avr32_s32_to_f64>
80006256:	14 98       	mov	r8,r10
80006258:	16 99       	mov	r9,r11
8000625a:	fa ea 00 08 	ld.d	r10,sp[8]
8000625e:	e0 a0 10 87 	rcall	8000836c <__avr32_f64_sub>
80006262:	fa eb 00 08 	st.d	sp[8],r10
80006266:	41 68       	lddsp	r8,sp[0x58]
80006268:	2d 08       	sub	r8,-48
8000626a:	0a c8       	st.b	r5++,r8
8000626c:	41 3c       	lddsp	r12,sp[0x4c]
8000626e:	18 35       	cp.w	r5,r12
80006270:	c2 81       	brne	800062c0 <_dtoa_r+0x61c>
80006272:	30 08       	mov	r8,0
80006274:	fc 19 3f e0 	movh	r9,0x3fe0
80006278:	fa ea 00 28 	ld.d	r10,sp[40]
8000627c:	e0 a0 11 46 	rcall	80008508 <__avr32_f64_add>
80006280:	40 85       	lddsp	r5,sp[0x20]
80006282:	fa e8 00 08 	ld.d	r8,sp[8]
80006286:	08 05       	add	r5,r4
80006288:	e0 a0 12 98 	rcall	800087b8 <__avr32_f64_cmp_lt>
8000628c:	e0 81 00 99 	brne	800063be <_dtoa_r+0x71a>
80006290:	fa e8 00 28 	ld.d	r8,sp[40]
80006294:	30 0a       	mov	r10,0
80006296:	fc 1b 3f e0 	movh	r11,0x3fe0
8000629a:	e0 a0 10 69 	rcall	8000836c <__avr32_f64_sub>
8000629e:	14 98       	mov	r8,r10
800062a0:	16 99       	mov	r9,r11
800062a2:	fa ea 00 08 	ld.d	r10,sp[8]
800062a6:	e0 a0 12 89 	rcall	800087b8 <__avr32_f64_cmp_lt>
800062aa:	c1 30       	breq	800062d0 <_dtoa_r+0x62c>
800062ac:	33 09       	mov	r9,48
800062ae:	0a 98       	mov	r8,r5
800062b0:	11 7a       	ld.ub	r10,--r8
800062b2:	f2 0a 18 00 	cp.b	r10,r9
800062b6:	e0 81 02 d1 	brne	80006858 <_dtoa_r+0xbb4>
800062ba:	10 95       	mov	r5,r8
800062bc:	cf 9b       	rjmp	800062ae <_dtoa_r+0x60a>
800062be:	d7 03       	nop
800062c0:	30 08       	mov	r8,0
800062c2:	fc 19 40 24 	movh	r9,0x4024
800062c6:	e0 a0 0f 67 	rcall	80008194 <__avr32_f64_mul>
800062ca:	fa eb 00 08 	st.d	sp[8],r10
800062ce:	cb db       	rjmp	80006248 <_dtoa_r+0x5a4>
800062d0:	fa ea 00 3c 	ld.d	r10,sp[60]
800062d4:	fa eb 00 08 	st.d	sp[8],r10
800062d8:	58 e6       	cp.w	r6,14
800062da:	5f ab       	srle	r11
800062dc:	41 8a       	lddsp	r10,sp[0x60]
800062de:	30 08       	mov	r8,0
800062e0:	f4 09 11 ff 	rsub	r9,r10,-1
800062e4:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800062e8:	f0 09 18 00 	cp.b	r9,r8
800062ec:	e0 80 00 82 	breq	800063f0 <_dtoa_r+0x74c>
800062f0:	40 ea       	lddsp	r10,sp[0x38]
800062f2:	58 01       	cp.w	r1,0
800062f4:	5f a9       	srle	r9
800062f6:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800062fa:	fe ca ca 56 	sub	r10,pc,-13738
800062fe:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006302:	fa e5 00 10 	st.d	sp[16],r4
80006306:	f0 09 18 00 	cp.b	r9,r8
8000630a:	c1 40       	breq	80006332 <_dtoa_r+0x68e>
8000630c:	58 01       	cp.w	r1,0
8000630e:	e0 81 01 77 	brne	800065fc <_dtoa_r+0x958>
80006312:	30 08       	mov	r8,0
80006314:	fc 19 40 14 	movh	r9,0x4014
80006318:	08 9a       	mov	r10,r4
8000631a:	0a 9b       	mov	r11,r5
8000631c:	e0 a0 0f 3c 	rcall	80008194 <__avr32_f64_mul>
80006320:	fa e8 00 08 	ld.d	r8,sp[8]
80006324:	e0 a0 12 16 	rcall	80008750 <__avr32_f64_cmp_ge>
80006328:	e0 81 01 6a 	brne	800065fc <_dtoa_r+0x958>
8000632c:	02 92       	mov	r2,r1
8000632e:	e0 8f 01 72 	bral	80006612 <_dtoa_r+0x96e>
80006332:	40 85       	lddsp	r5,sp[0x20]
80006334:	30 14       	mov	r4,1
80006336:	fa e8 00 10 	ld.d	r8,sp[16]
8000633a:	fa ea 00 08 	ld.d	r10,sp[8]
8000633e:	e0 a0 12 71 	rcall	80008820 <__avr32_f64_div>
80006342:	e0 a0 11 6d 	rcall	8000861c <__avr32_f64_to_s32>
80006346:	18 92       	mov	r2,r12
80006348:	e0 a0 11 81 	rcall	8000864a <__avr32_s32_to_f64>
8000634c:	fa e8 00 10 	ld.d	r8,sp[16]
80006350:	e0 a0 0f 22 	rcall	80008194 <__avr32_f64_mul>
80006354:	14 98       	mov	r8,r10
80006356:	16 99       	mov	r9,r11
80006358:	fa ea 00 08 	ld.d	r10,sp[8]
8000635c:	e0 a0 10 08 	rcall	8000836c <__avr32_f64_sub>
80006360:	fa eb 00 08 	st.d	sp[8],r10
80006364:	e4 c8 ff d0 	sub	r8,r2,-48
80006368:	0a c8       	st.b	r5++,r8
8000636a:	fc 19 40 24 	movh	r9,0x4024
8000636e:	30 08       	mov	r8,0
80006370:	02 34       	cp.w	r4,r1
80006372:	c3 31       	brne	800063d8 <_dtoa_r+0x734>
80006374:	fa e8 00 08 	ld.d	r8,sp[8]
80006378:	e0 a0 10 c8 	rcall	80008508 <__avr32_f64_add>
8000637c:	16 91       	mov	r1,r11
8000637e:	14 90       	mov	r0,r10
80006380:	14 98       	mov	r8,r10
80006382:	02 99       	mov	r9,r1
80006384:	fa ea 00 10 	ld.d	r10,sp[16]
80006388:	e0 a0 12 18 	rcall	800087b8 <__avr32_f64_cmp_lt>
8000638c:	c1 a1       	brne	800063c0 <_dtoa_r+0x71c>
8000638e:	fa e8 00 10 	ld.d	r8,sp[16]
80006392:	00 9a       	mov	r10,r0
80006394:	02 9b       	mov	r11,r1
80006396:	e0 a0 11 ca 	rcall	8000872a <__avr32_f64_cmp_eq>
8000639a:	e0 80 02 5e 	breq	80006856 <_dtoa_r+0xbb2>
8000639e:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800063a2:	c0 f1       	brne	800063c0 <_dtoa_r+0x71c>
800063a4:	e0 8f 02 59 	bral	80006856 <_dtoa_r+0xbb2>
800063a8:	40 8a       	lddsp	r10,sp[0x20]
800063aa:	14 38       	cp.w	r8,r10
800063ac:	c0 30       	breq	800063b2 <_dtoa_r+0x70e>
800063ae:	10 95       	mov	r5,r8
800063b0:	c0 98       	rjmp	800063c2 <_dtoa_r+0x71e>
800063b2:	33 08       	mov	r8,48
800063b4:	40 89       	lddsp	r9,sp[0x20]
800063b6:	2f f6       	sub	r6,-1
800063b8:	b2 88       	st.b	r9[0x0],r8
800063ba:	40 88       	lddsp	r8,sp[0x20]
800063bc:	c0 88       	rjmp	800063cc <_dtoa_r+0x728>
800063be:	40 66       	lddsp	r6,sp[0x18]
800063c0:	33 99       	mov	r9,57
800063c2:	0a 98       	mov	r8,r5
800063c4:	11 7a       	ld.ub	r10,--r8
800063c6:	f2 0a 18 00 	cp.b	r10,r9
800063ca:	ce f0       	breq	800063a8 <_dtoa_r+0x704>
800063cc:	50 66       	stdsp	sp[0x18],r6
800063ce:	11 89       	ld.ub	r9,r8[0x0]
800063d0:	2f f9       	sub	r9,-1
800063d2:	b0 89       	st.b	r8[0x0],r9
800063d4:	e0 8f 02 42 	bral	80006858 <_dtoa_r+0xbb4>
800063d8:	e0 a0 0e de 	rcall	80008194 <__avr32_f64_mul>
800063dc:	2f f4       	sub	r4,-1
800063de:	fa eb 00 08 	st.d	sp[8],r10
800063e2:	30 08       	mov	r8,0
800063e4:	30 09       	mov	r9,0
800063e6:	e0 a0 11 a2 	rcall	8000872a <__avr32_f64_cmp_eq>
800063ea:	ca 60       	breq	80006336 <_dtoa_r+0x692>
800063ec:	e0 8f 02 35 	bral	80006856 <_dtoa_r+0xbb2>
800063f0:	40 d8       	lddsp	r8,sp[0x34]
800063f2:	58 08       	cp.w	r8,0
800063f4:	c0 51       	brne	800063fe <_dtoa_r+0x75a>
800063f6:	04 98       	mov	r8,r2
800063f8:	00 95       	mov	r5,r0
800063fa:	40 d4       	lddsp	r4,sp[0x34]
800063fc:	c3 78       	rjmp	8000646a <_dtoa_r+0x7c6>
800063fe:	40 c5       	lddsp	r5,sp[0x30]
80006400:	58 15       	cp.w	r5,1
80006402:	e0 89 00 0f 	brgt	80006420 <_dtoa_r+0x77c>
80006406:	41 74       	lddsp	r4,sp[0x5c]
80006408:	58 04       	cp.w	r4,0
8000640a:	c0 40       	breq	80006412 <_dtoa_r+0x76e>
8000640c:	f4 c9 fb cd 	sub	r9,r10,-1075
80006410:	c0 48       	rjmp	80006418 <_dtoa_r+0x774>
80006412:	41 99       	lddsp	r9,sp[0x64]
80006414:	f2 09 11 36 	rsub	r9,r9,54
80006418:	04 98       	mov	r8,r2
8000641a:	00 95       	mov	r5,r0
8000641c:	c1 c8       	rjmp	80006454 <_dtoa_r+0x7b0>
8000641e:	d7 03       	nop
80006420:	e2 c8 00 01 	sub	r8,r1,1
80006424:	58 01       	cp.w	r1,0
80006426:	e0 05 17 40 	movge	r5,r0
8000642a:	e2 09 17 40 	movge	r9,r1
8000642e:	e1 d1 e5 15 	sublt	r5,r0,r1
80006432:	f9 b9 05 00 	movlt	r9,0
80006436:	10 32       	cp.w	r2,r8
80006438:	e5 d8 e4 18 	subge	r8,r2,r8
8000643c:	f1 d2 e5 18 	sublt	r8,r8,r2
80006440:	e5 d8 e5 02 	addlt	r2,r2,r8
80006444:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006448:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000644c:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006450:	f9 b8 05 00 	movlt	r8,0
80006454:	40 4b       	lddsp	r11,sp[0x10]
80006456:	12 0b       	add	r11,r9
80006458:	50 08       	stdsp	sp[0x0],r8
8000645a:	50 4b       	stdsp	sp[0x10],r11
8000645c:	12 00       	add	r0,r9
8000645e:	30 1b       	mov	r11,1
80006460:	0e 9c       	mov	r12,r7
80006462:	e0 a0 0a c9 	rcall	800079f4 <__i2b>
80006466:	40 08       	lddsp	r8,sp[0x0]
80006468:	18 94       	mov	r4,r12
8000646a:	40 4a       	lddsp	r10,sp[0x10]
8000646c:	58 05       	cp.w	r5,0
8000646e:	5f 99       	srgt	r9
80006470:	58 0a       	cp.w	r10,0
80006472:	5f 9a       	srgt	r10
80006474:	f5 e9 00 09 	and	r9,r10,r9
80006478:	c0 80       	breq	80006488 <_dtoa_r+0x7e4>
8000647a:	40 4c       	lddsp	r12,sp[0x10]
8000647c:	f8 05 0d 49 	min	r9,r12,r5
80006480:	12 1c       	sub	r12,r9
80006482:	12 10       	sub	r0,r9
80006484:	50 4c       	stdsp	sp[0x10],r12
80006486:	12 15       	sub	r5,r9
80006488:	58 02       	cp.w	r2,0
8000648a:	e0 8a 00 27 	brle	800064d8 <_dtoa_r+0x834>
8000648e:	40 db       	lddsp	r11,sp[0x34]
80006490:	58 0b       	cp.w	r11,0
80006492:	c1 d0       	breq	800064cc <_dtoa_r+0x828>
80006494:	58 08       	cp.w	r8,0
80006496:	e0 8a 00 17 	brle	800064c4 <_dtoa_r+0x820>
8000649a:	10 9a       	mov	r10,r8
8000649c:	50 08       	stdsp	sp[0x0],r8
8000649e:	08 9b       	mov	r11,r4
800064a0:	0e 9c       	mov	r12,r7
800064a2:	e0 a0 0a ef 	rcall	80007a80 <__pow5mult>
800064a6:	06 9a       	mov	r10,r3
800064a8:	18 9b       	mov	r11,r12
800064aa:	18 94       	mov	r4,r12
800064ac:	0e 9c       	mov	r12,r7
800064ae:	e0 a0 0a 23 	rcall	800078f4 <__multiply>
800064b2:	18 99       	mov	r9,r12
800064b4:	06 9b       	mov	r11,r3
800064b6:	50 19       	stdsp	sp[0x4],r9
800064b8:	0e 9c       	mov	r12,r7
800064ba:	e0 a0 08 cf 	rcall	80007658 <_Bfree>
800064be:	40 19       	lddsp	r9,sp[0x4]
800064c0:	40 08       	lddsp	r8,sp[0x0]
800064c2:	12 93       	mov	r3,r9
800064c4:	e4 08 01 0a 	sub	r10,r2,r8
800064c8:	c0 80       	breq	800064d8 <_dtoa_r+0x834>
800064ca:	c0 28       	rjmp	800064ce <_dtoa_r+0x82a>
800064cc:	04 9a       	mov	r10,r2
800064ce:	06 9b       	mov	r11,r3
800064d0:	0e 9c       	mov	r12,r7
800064d2:	e0 a0 0a d7 	rcall	80007a80 <__pow5mult>
800064d6:	18 93       	mov	r3,r12
800064d8:	30 1b       	mov	r11,1
800064da:	0e 9c       	mov	r12,r7
800064dc:	e0 a0 0a 8c 	rcall	800079f4 <__i2b>
800064e0:	41 1a       	lddsp	r10,sp[0x44]
800064e2:	18 92       	mov	r2,r12
800064e4:	58 0a       	cp.w	r10,0
800064e6:	e0 8a 00 07 	brle	800064f4 <_dtoa_r+0x850>
800064ea:	18 9b       	mov	r11,r12
800064ec:	0e 9c       	mov	r12,r7
800064ee:	e0 a0 0a c9 	rcall	80007a80 <__pow5mult>
800064f2:	18 92       	mov	r2,r12
800064f4:	40 c9       	lddsp	r9,sp[0x30]
800064f6:	58 19       	cp.w	r9,1
800064f8:	e0 89 00 14 	brgt	80006520 <_dtoa_r+0x87c>
800064fc:	40 38       	lddsp	r8,sp[0xc]
800064fe:	58 08       	cp.w	r8,0
80006500:	c1 01       	brne	80006520 <_dtoa_r+0x87c>
80006502:	40 29       	lddsp	r9,sp[0x8]
80006504:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006508:	c0 c1       	brne	80006520 <_dtoa_r+0x87c>
8000650a:	12 98       	mov	r8,r9
8000650c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006510:	c0 80       	breq	80006520 <_dtoa_r+0x87c>
80006512:	40 4c       	lddsp	r12,sp[0x10]
80006514:	30 1b       	mov	r11,1
80006516:	2f fc       	sub	r12,-1
80006518:	2f f0       	sub	r0,-1
8000651a:	50 4c       	stdsp	sp[0x10],r12
8000651c:	50 6b       	stdsp	sp[0x18],r11
8000651e:	c0 38       	rjmp	80006524 <_dtoa_r+0x880>
80006520:	30 0a       	mov	r10,0
80006522:	50 6a       	stdsp	sp[0x18],r10
80006524:	41 19       	lddsp	r9,sp[0x44]
80006526:	58 09       	cp.w	r9,0
80006528:	c0 31       	brne	8000652e <_dtoa_r+0x88a>
8000652a:	30 1c       	mov	r12,1
8000652c:	c0 98       	rjmp	8000653e <_dtoa_r+0x89a>
8000652e:	64 48       	ld.w	r8,r2[0x10]
80006530:	2f c8       	sub	r8,-4
80006532:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006536:	e0 a0 08 01 	rcall	80007538 <__hi0bits>
8000653a:	f8 0c 11 20 	rsub	r12,r12,32
8000653e:	40 4b       	lddsp	r11,sp[0x10]
80006540:	f8 0b 00 08 	add	r8,r12,r11
80006544:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006548:	c0 c0       	breq	80006560 <_dtoa_r+0x8bc>
8000654a:	f0 08 11 20 	rsub	r8,r8,32
8000654e:	58 48       	cp.w	r8,4
80006550:	e0 8a 00 06 	brle	8000655c <_dtoa_r+0x8b8>
80006554:	20 48       	sub	r8,4
80006556:	10 0b       	add	r11,r8
80006558:	50 4b       	stdsp	sp[0x10],r11
8000655a:	c0 78       	rjmp	80006568 <_dtoa_r+0x8c4>
8000655c:	58 48       	cp.w	r8,4
8000655e:	c0 70       	breq	8000656c <_dtoa_r+0x8c8>
80006560:	40 4a       	lddsp	r10,sp[0x10]
80006562:	2e 48       	sub	r8,-28
80006564:	10 0a       	add	r10,r8
80006566:	50 4a       	stdsp	sp[0x10],r10
80006568:	10 00       	add	r0,r8
8000656a:	10 05       	add	r5,r8
8000656c:	58 00       	cp.w	r0,0
8000656e:	e0 8a 00 08 	brle	8000657e <_dtoa_r+0x8da>
80006572:	06 9b       	mov	r11,r3
80006574:	00 9a       	mov	r10,r0
80006576:	0e 9c       	mov	r12,r7
80006578:	e0 a0 09 7a 	rcall	8000786c <__lshift>
8000657c:	18 93       	mov	r3,r12
8000657e:	40 49       	lddsp	r9,sp[0x10]
80006580:	58 09       	cp.w	r9,0
80006582:	e0 8a 00 08 	brle	80006592 <_dtoa_r+0x8ee>
80006586:	04 9b       	mov	r11,r2
80006588:	12 9a       	mov	r10,r9
8000658a:	0e 9c       	mov	r12,r7
8000658c:	e0 a0 09 70 	rcall	8000786c <__lshift>
80006590:	18 92       	mov	r2,r12
80006592:	41 48       	lddsp	r8,sp[0x50]
80006594:	58 08       	cp.w	r8,0
80006596:	c1 b0       	breq	800065cc <_dtoa_r+0x928>
80006598:	04 9b       	mov	r11,r2
8000659a:	06 9c       	mov	r12,r3
8000659c:	e0 a0 08 45 	rcall	80007626 <__mcmp>
800065a0:	c1 64       	brge	800065cc <_dtoa_r+0x928>
800065a2:	06 9b       	mov	r11,r3
800065a4:	30 09       	mov	r9,0
800065a6:	30 aa       	mov	r10,10
800065a8:	0e 9c       	mov	r12,r7
800065aa:	e0 a0 0a 2d 	rcall	80007a04 <__multadd>
800065ae:	20 16       	sub	r6,1
800065b0:	18 93       	mov	r3,r12
800065b2:	40 dc       	lddsp	r12,sp[0x34]
800065b4:	58 0c       	cp.w	r12,0
800065b6:	c0 31       	brne	800065bc <_dtoa_r+0x918>
800065b8:	40 91       	lddsp	r1,sp[0x24]
800065ba:	c0 98       	rjmp	800065cc <_dtoa_r+0x928>
800065bc:	08 9b       	mov	r11,r4
800065be:	40 91       	lddsp	r1,sp[0x24]
800065c0:	30 09       	mov	r9,0
800065c2:	30 aa       	mov	r10,10
800065c4:	0e 9c       	mov	r12,r7
800065c6:	e0 a0 0a 1f 	rcall	80007a04 <__multadd>
800065ca:	18 94       	mov	r4,r12
800065cc:	58 01       	cp.w	r1,0
800065ce:	5f a9       	srle	r9
800065d0:	40 cb       	lddsp	r11,sp[0x30]
800065d2:	58 2b       	cp.w	r11,2
800065d4:	5f 98       	srgt	r8
800065d6:	f3 e8 00 08 	and	r8,r9,r8
800065da:	c2 50       	breq	80006624 <_dtoa_r+0x980>
800065dc:	58 01       	cp.w	r1,0
800065de:	c1 11       	brne	80006600 <_dtoa_r+0x95c>
800065e0:	04 9b       	mov	r11,r2
800065e2:	02 99       	mov	r9,r1
800065e4:	30 5a       	mov	r10,5
800065e6:	0e 9c       	mov	r12,r7
800065e8:	e0 a0 0a 0e 	rcall	80007a04 <__multadd>
800065ec:	18 92       	mov	r2,r12
800065ee:	18 9b       	mov	r11,r12
800065f0:	06 9c       	mov	r12,r3
800065f2:	e0 a0 08 1a 	rcall	80007626 <__mcmp>
800065f6:	e0 89 00 0f 	brgt	80006614 <_dtoa_r+0x970>
800065fa:	c0 38       	rjmp	80006600 <_dtoa_r+0x95c>
800065fc:	30 02       	mov	r2,0
800065fe:	04 94       	mov	r4,r2
80006600:	40 ea       	lddsp	r10,sp[0x38]
80006602:	30 09       	mov	r9,0
80006604:	5c da       	com	r10
80006606:	40 85       	lddsp	r5,sp[0x20]
80006608:	50 6a       	stdsp	sp[0x18],r10
8000660a:	50 49       	stdsp	sp[0x10],r9
8000660c:	c0 f9       	rjmp	8000682a <_dtoa_r+0xb86>
8000660e:	08 92       	mov	r2,r4
80006610:	40 66       	lddsp	r6,sp[0x18]
80006612:	04 94       	mov	r4,r2
80006614:	2f f6       	sub	r6,-1
80006616:	50 66       	stdsp	sp[0x18],r6
80006618:	33 18       	mov	r8,49
8000661a:	40 85       	lddsp	r5,sp[0x20]
8000661c:	0a c8       	st.b	r5++,r8
8000661e:	30 08       	mov	r8,0
80006620:	50 48       	stdsp	sp[0x10],r8
80006622:	c0 49       	rjmp	8000682a <_dtoa_r+0xb86>
80006624:	40 dc       	lddsp	r12,sp[0x34]
80006626:	58 0c       	cp.w	r12,0
80006628:	e0 80 00 b5 	breq	80006792 <_dtoa_r+0xaee>
8000662c:	58 05       	cp.w	r5,0
8000662e:	e0 8a 00 08 	brle	8000663e <_dtoa_r+0x99a>
80006632:	08 9b       	mov	r11,r4
80006634:	0a 9a       	mov	r10,r5
80006636:	0e 9c       	mov	r12,r7
80006638:	e0 a0 09 1a 	rcall	8000786c <__lshift>
8000663c:	18 94       	mov	r4,r12
8000663e:	40 6b       	lddsp	r11,sp[0x18]
80006640:	58 0b       	cp.w	r11,0
80006642:	c0 31       	brne	80006648 <_dtoa_r+0x9a4>
80006644:	08 9c       	mov	r12,r4
80006646:	c1 38       	rjmp	8000666c <_dtoa_r+0x9c8>
80006648:	68 1b       	ld.w	r11,r4[0x4]
8000664a:	0e 9c       	mov	r12,r7
8000664c:	e0 a0 08 20 	rcall	8000768c <_Balloc>
80006650:	68 4a       	ld.w	r10,r4[0x10]
80006652:	18 95       	mov	r5,r12
80006654:	e8 cb ff f4 	sub	r11,r4,-12
80006658:	2f ea       	sub	r10,-2
8000665a:	2f 4c       	sub	r12,-12
8000665c:	a3 6a       	lsl	r10,0x2
8000665e:	fe b0 e8 3a 	rcall	800036d2 <memcpy>
80006662:	0a 9b       	mov	r11,r5
80006664:	30 1a       	mov	r10,1
80006666:	0e 9c       	mov	r12,r7
80006668:	e0 a0 09 02 	rcall	8000786c <__lshift>
8000666c:	50 44       	stdsp	sp[0x10],r4
8000666e:	40 3a       	lddsp	r10,sp[0xc]
80006670:	30 19       	mov	r9,1
80006672:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006676:	18 94       	mov	r4,r12
80006678:	50 da       	stdsp	sp[0x34],r10
8000667a:	40 85       	lddsp	r5,sp[0x20]
8000667c:	50 99       	stdsp	sp[0x24],r9
8000667e:	50 26       	stdsp	sp[0x8],r6
80006680:	50 e1       	stdsp	sp[0x38],r1
80006682:	04 9b       	mov	r11,r2
80006684:	06 9c       	mov	r12,r3
80006686:	fe b0 fa 7f 	rcall	80005b84 <quorem>
8000668a:	40 4b       	lddsp	r11,sp[0x10]
8000668c:	f8 c0 ff d0 	sub	r0,r12,-48
80006690:	06 9c       	mov	r12,r3
80006692:	e0 a0 07 ca 	rcall	80007626 <__mcmp>
80006696:	08 9a       	mov	r10,r4
80006698:	50 6c       	stdsp	sp[0x18],r12
8000669a:	04 9b       	mov	r11,r2
8000669c:	0e 9c       	mov	r12,r7
8000669e:	e0 a0 08 7f 	rcall	8000779c <__mdiff>
800066a2:	18 91       	mov	r1,r12
800066a4:	78 38       	ld.w	r8,r12[0xc]
800066a6:	58 08       	cp.w	r8,0
800066a8:	c0 30       	breq	800066ae <_dtoa_r+0xa0a>
800066aa:	30 16       	mov	r6,1
800066ac:	c0 68       	rjmp	800066b8 <_dtoa_r+0xa14>
800066ae:	18 9b       	mov	r11,r12
800066b0:	06 9c       	mov	r12,r3
800066b2:	e0 a0 07 ba 	rcall	80007626 <__mcmp>
800066b6:	18 96       	mov	r6,r12
800066b8:	0e 9c       	mov	r12,r7
800066ba:	02 9b       	mov	r11,r1
800066bc:	e0 a0 07 ce 	rcall	80007658 <_Bfree>
800066c0:	40 cc       	lddsp	r12,sp[0x30]
800066c2:	ed ec 10 08 	or	r8,r6,r12
800066c6:	c0 d1       	brne	800066e0 <_dtoa_r+0xa3c>
800066c8:	40 db       	lddsp	r11,sp[0x34]
800066ca:	58 0b       	cp.w	r11,0
800066cc:	c0 a1       	brne	800066e0 <_dtoa_r+0xa3c>
800066ce:	40 26       	lddsp	r6,sp[0x8]
800066d0:	e0 40 00 39 	cp.w	r0,57
800066d4:	c3 00       	breq	80006734 <_dtoa_r+0xa90>
800066d6:	40 6a       	lddsp	r10,sp[0x18]
800066d8:	58 0a       	cp.w	r10,0
800066da:	e0 89 00 24 	brgt	80006722 <_dtoa_r+0xa7e>
800066de:	c2 f8       	rjmp	8000673c <_dtoa_r+0xa98>
800066e0:	40 69       	lddsp	r9,sp[0x18]
800066e2:	58 09       	cp.w	r9,0
800066e4:	c0 85       	brlt	800066f4 <_dtoa_r+0xa50>
800066e6:	12 98       	mov	r8,r9
800066e8:	40 cc       	lddsp	r12,sp[0x30]
800066ea:	18 48       	or	r8,r12
800066ec:	c1 d1       	brne	80006726 <_dtoa_r+0xa82>
800066ee:	40 db       	lddsp	r11,sp[0x34]
800066f0:	58 0b       	cp.w	r11,0
800066f2:	c1 a1       	brne	80006726 <_dtoa_r+0xa82>
800066f4:	0c 99       	mov	r9,r6
800066f6:	40 26       	lddsp	r6,sp[0x8]
800066f8:	58 09       	cp.w	r9,0
800066fa:	e0 8a 00 21 	brle	8000673c <_dtoa_r+0xa98>
800066fe:	06 9b       	mov	r11,r3
80006700:	30 1a       	mov	r10,1
80006702:	0e 9c       	mov	r12,r7
80006704:	e0 a0 08 b4 	rcall	8000786c <__lshift>
80006708:	04 9b       	mov	r11,r2
8000670a:	18 93       	mov	r3,r12
8000670c:	e0 a0 07 8d 	rcall	80007626 <__mcmp>
80006710:	e0 89 00 06 	brgt	8000671c <_dtoa_r+0xa78>
80006714:	c1 41       	brne	8000673c <_dtoa_r+0xa98>
80006716:	ed b0 00 00 	bld	r0,0x0
8000671a:	c1 11       	brne	8000673c <_dtoa_r+0xa98>
8000671c:	e0 40 00 39 	cp.w	r0,57
80006720:	c0 a0       	breq	80006734 <_dtoa_r+0xa90>
80006722:	2f f0       	sub	r0,-1
80006724:	c0 c8       	rjmp	8000673c <_dtoa_r+0xa98>
80006726:	58 06       	cp.w	r6,0
80006728:	e0 8a 00 0c 	brle	80006740 <_dtoa_r+0xa9c>
8000672c:	40 26       	lddsp	r6,sp[0x8]
8000672e:	e0 40 00 39 	cp.w	r0,57
80006732:	c0 41       	brne	8000673a <_dtoa_r+0xa96>
80006734:	33 98       	mov	r8,57
80006736:	0a c8       	st.b	r5++,r8
80006738:	c6 78       	rjmp	80006806 <_dtoa_r+0xb62>
8000673a:	2f f0       	sub	r0,-1
8000673c:	0a c0       	st.b	r5++,r0
8000673e:	c7 58       	rjmp	80006828 <_dtoa_r+0xb84>
80006740:	0a c0       	st.b	r5++,r0
80006742:	40 9a       	lddsp	r10,sp[0x24]
80006744:	40 e9       	lddsp	r9,sp[0x38]
80006746:	12 3a       	cp.w	r10,r9
80006748:	c4 30       	breq	800067ce <_dtoa_r+0xb2a>
8000674a:	06 9b       	mov	r11,r3
8000674c:	30 09       	mov	r9,0
8000674e:	30 aa       	mov	r10,10
80006750:	0e 9c       	mov	r12,r7
80006752:	e0 a0 09 59 	rcall	80007a04 <__multadd>
80006756:	40 48       	lddsp	r8,sp[0x10]
80006758:	18 93       	mov	r3,r12
8000675a:	08 38       	cp.w	r8,r4
8000675c:	c0 91       	brne	8000676e <_dtoa_r+0xaca>
8000675e:	10 9b       	mov	r11,r8
80006760:	30 09       	mov	r9,0
80006762:	30 aa       	mov	r10,10
80006764:	0e 9c       	mov	r12,r7
80006766:	e0 a0 09 4f 	rcall	80007a04 <__multadd>
8000676a:	50 4c       	stdsp	sp[0x10],r12
8000676c:	c0 e8       	rjmp	80006788 <_dtoa_r+0xae4>
8000676e:	40 4b       	lddsp	r11,sp[0x10]
80006770:	30 09       	mov	r9,0
80006772:	30 aa       	mov	r10,10
80006774:	0e 9c       	mov	r12,r7
80006776:	e0 a0 09 47 	rcall	80007a04 <__multadd>
8000677a:	08 9b       	mov	r11,r4
8000677c:	50 4c       	stdsp	sp[0x10],r12
8000677e:	30 09       	mov	r9,0
80006780:	30 aa       	mov	r10,10
80006782:	0e 9c       	mov	r12,r7
80006784:	e0 a0 09 40 	rcall	80007a04 <__multadd>
80006788:	18 94       	mov	r4,r12
8000678a:	40 9c       	lddsp	r12,sp[0x24]
8000678c:	2f fc       	sub	r12,-1
8000678e:	50 9c       	stdsp	sp[0x24],r12
80006790:	c7 9b       	rjmp	80006682 <_dtoa_r+0x9de>
80006792:	30 18       	mov	r8,1
80006794:	06 90       	mov	r0,r3
80006796:	40 85       	lddsp	r5,sp[0x20]
80006798:	08 93       	mov	r3,r4
8000679a:	0c 94       	mov	r4,r6
8000679c:	10 96       	mov	r6,r8
8000679e:	04 9b       	mov	r11,r2
800067a0:	00 9c       	mov	r12,r0
800067a2:	fe b0 f9 f1 	rcall	80005b84 <quorem>
800067a6:	2d 0c       	sub	r12,-48
800067a8:	0a cc       	st.b	r5++,r12
800067aa:	02 36       	cp.w	r6,r1
800067ac:	c0 a4       	brge	800067c0 <_dtoa_r+0xb1c>
800067ae:	00 9b       	mov	r11,r0
800067b0:	30 09       	mov	r9,0
800067b2:	30 aa       	mov	r10,10
800067b4:	0e 9c       	mov	r12,r7
800067b6:	2f f6       	sub	r6,-1
800067b8:	e0 a0 09 26 	rcall	80007a04 <__multadd>
800067bc:	18 90       	mov	r0,r12
800067be:	cf 0b       	rjmp	8000679e <_dtoa_r+0xafa>
800067c0:	08 96       	mov	r6,r4
800067c2:	30 0b       	mov	r11,0
800067c4:	06 94       	mov	r4,r3
800067c6:	50 4b       	stdsp	sp[0x10],r11
800067c8:	00 93       	mov	r3,r0
800067ca:	18 90       	mov	r0,r12
800067cc:	c0 28       	rjmp	800067d0 <_dtoa_r+0xb2c>
800067ce:	40 26       	lddsp	r6,sp[0x8]
800067d0:	06 9b       	mov	r11,r3
800067d2:	30 1a       	mov	r10,1
800067d4:	0e 9c       	mov	r12,r7
800067d6:	e0 a0 08 4b 	rcall	8000786c <__lshift>
800067da:	04 9b       	mov	r11,r2
800067dc:	18 93       	mov	r3,r12
800067de:	e0 a0 07 24 	rcall	80007626 <__mcmp>
800067e2:	e0 89 00 12 	brgt	80006806 <_dtoa_r+0xb62>
800067e6:	c1 b1       	brne	8000681c <_dtoa_r+0xb78>
800067e8:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800067ec:	c0 d1       	brne	80006806 <_dtoa_r+0xb62>
800067ee:	c1 78       	rjmp	8000681c <_dtoa_r+0xb78>
800067f0:	40 89       	lddsp	r9,sp[0x20]
800067f2:	12 38       	cp.w	r8,r9
800067f4:	c0 30       	breq	800067fa <_dtoa_r+0xb56>
800067f6:	10 95       	mov	r5,r8
800067f8:	c0 88       	rjmp	80006808 <_dtoa_r+0xb64>
800067fa:	2f f6       	sub	r6,-1
800067fc:	50 66       	stdsp	sp[0x18],r6
800067fe:	33 18       	mov	r8,49
80006800:	40 8c       	lddsp	r12,sp[0x20]
80006802:	b8 88       	st.b	r12[0x0],r8
80006804:	c1 38       	rjmp	8000682a <_dtoa_r+0xb86>
80006806:	33 9a       	mov	r10,57
80006808:	0a 98       	mov	r8,r5
8000680a:	11 79       	ld.ub	r9,--r8
8000680c:	f4 09 18 00 	cp.b	r9,r10
80006810:	cf 00       	breq	800067f0 <_dtoa_r+0xb4c>
80006812:	2f f9       	sub	r9,-1
80006814:	b0 89       	st.b	r8[0x0],r9
80006816:	c0 98       	rjmp	80006828 <_dtoa_r+0xb84>
80006818:	10 95       	mov	r5,r8
8000681a:	c0 28       	rjmp	8000681e <_dtoa_r+0xb7a>
8000681c:	33 09       	mov	r9,48
8000681e:	0a 98       	mov	r8,r5
80006820:	11 7a       	ld.ub	r10,--r8
80006822:	f2 0a 18 00 	cp.b	r10,r9
80006826:	cf 90       	breq	80006818 <_dtoa_r+0xb74>
80006828:	50 66       	stdsp	sp[0x18],r6
8000682a:	04 9b       	mov	r11,r2
8000682c:	0e 9c       	mov	r12,r7
8000682e:	e0 a0 07 15 	rcall	80007658 <_Bfree>
80006832:	58 04       	cp.w	r4,0
80006834:	c1 20       	breq	80006858 <_dtoa_r+0xbb4>
80006836:	40 4b       	lddsp	r11,sp[0x10]
80006838:	08 3b       	cp.w	r11,r4
8000683a:	5f 19       	srne	r9
8000683c:	58 0b       	cp.w	r11,0
8000683e:	5f 18       	srne	r8
80006840:	f3 e8 00 08 	and	r8,r9,r8
80006844:	c0 40       	breq	8000684c <_dtoa_r+0xba8>
80006846:	0e 9c       	mov	r12,r7
80006848:	e0 a0 07 08 	rcall	80007658 <_Bfree>
8000684c:	08 9b       	mov	r11,r4
8000684e:	0e 9c       	mov	r12,r7
80006850:	e0 a0 07 04 	rcall	80007658 <_Bfree>
80006854:	c0 28       	rjmp	80006858 <_dtoa_r+0xbb4>
80006856:	50 66       	stdsp	sp[0x18],r6
80006858:	0e 9c       	mov	r12,r7
8000685a:	06 9b       	mov	r11,r3
8000685c:	e0 a0 06 fe 	rcall	80007658 <_Bfree>
80006860:	30 08       	mov	r8,0
80006862:	aa 88       	st.b	r5[0x0],r8
80006864:	40 68       	lddsp	r8,sp[0x18]
80006866:	41 5a       	lddsp	r10,sp[0x54]
80006868:	2f f8       	sub	r8,-1
8000686a:	41 29       	lddsp	r9,sp[0x48]
8000686c:	95 08       	st.w	r10[0x0],r8
8000686e:	40 8c       	lddsp	r12,sp[0x20]
80006870:	58 09       	cp.w	r9,0
80006872:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006876:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000687a:	2e 6d       	sub	sp,-104
8000687c:	d8 32       	popm	r0-r7,pc
8000687e:	d7 03       	nop

80006880 <_fflush_r>:
80006880:	d4 21       	pushm	r4-r7,lr
80006882:	16 97       	mov	r7,r11
80006884:	18 96       	mov	r6,r12
80006886:	76 48       	ld.w	r8,r11[0x10]
80006888:	58 08       	cp.w	r8,0
8000688a:	c7 f0       	breq	80006988 <_fflush_r+0x108>
8000688c:	58 0c       	cp.w	r12,0
8000688e:	c0 50       	breq	80006898 <_fflush_r+0x18>
80006890:	78 68       	ld.w	r8,r12[0x18]
80006892:	58 08       	cp.w	r8,0
80006894:	c0 21       	brne	80006898 <_fflush_r+0x18>
80006896:	cc dc       	rcall	80006a30 <__sinit>
80006898:	fe c8 d0 a0 	sub	r8,pc,-12128
8000689c:	10 37       	cp.w	r7,r8
8000689e:	c0 31       	brne	800068a4 <_fflush_r+0x24>
800068a0:	6c 07       	ld.w	r7,r6[0x0]
800068a2:	c0 c8       	rjmp	800068ba <_fflush_r+0x3a>
800068a4:	fe c8 d0 8c 	sub	r8,pc,-12148
800068a8:	10 37       	cp.w	r7,r8
800068aa:	c0 31       	brne	800068b0 <_fflush_r+0x30>
800068ac:	6c 17       	ld.w	r7,r6[0x4]
800068ae:	c0 68       	rjmp	800068ba <_fflush_r+0x3a>
800068b0:	fe c8 d0 78 	sub	r8,pc,-12168
800068b4:	10 37       	cp.w	r7,r8
800068b6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800068ba:	8e 6a       	ld.sh	r10,r7[0xc]
800068bc:	14 98       	mov	r8,r10
800068be:	ed ba 00 03 	bld	r10,0x3
800068c2:	c4 20       	breq	80006946 <_fflush_r+0xc6>
800068c4:	ab ba       	sbr	r10,0xb
800068c6:	ae 6a       	st.h	r7[0xc],r10
800068c8:	6e 18       	ld.w	r8,r7[0x4]
800068ca:	58 08       	cp.w	r8,0
800068cc:	e0 89 00 06 	brgt	800068d8 <_fflush_r+0x58>
800068d0:	6f 08       	ld.w	r8,r7[0x40]
800068d2:	58 08       	cp.w	r8,0
800068d4:	e0 8a 00 5a 	brle	80006988 <_fflush_r+0x108>
800068d8:	6e b8       	ld.w	r8,r7[0x2c]
800068da:	58 08       	cp.w	r8,0
800068dc:	c5 60       	breq	80006988 <_fflush_r+0x108>
800068de:	e2 1a 10 00 	andl	r10,0x1000,COH
800068e2:	c0 30       	breq	800068e8 <_fflush_r+0x68>
800068e4:	6f 55       	ld.w	r5,r7[0x54]
800068e6:	c0 f8       	rjmp	80006904 <_fflush_r+0x84>
800068e8:	30 19       	mov	r9,1
800068ea:	6e 8b       	ld.w	r11,r7[0x20]
800068ec:	0c 9c       	mov	r12,r6
800068ee:	5d 18       	icall	r8
800068f0:	18 95       	mov	r5,r12
800068f2:	5b fc       	cp.w	r12,-1
800068f4:	c0 81       	brne	80006904 <_fflush_r+0x84>
800068f6:	6c 38       	ld.w	r8,r6[0xc]
800068f8:	59 d8       	cp.w	r8,29
800068fa:	c4 70       	breq	80006988 <_fflush_r+0x108>
800068fc:	8e 68       	ld.sh	r8,r7[0xc]
800068fe:	a7 a8       	sbr	r8,0x6
80006900:	ae 68       	st.h	r7[0xc],r8
80006902:	d8 22       	popm	r4-r7,pc
80006904:	8e 68       	ld.sh	r8,r7[0xc]
80006906:	ed b8 00 02 	bld	r8,0x2
8000690a:	c0 91       	brne	8000691c <_fflush_r+0x9c>
8000690c:	6e 18       	ld.w	r8,r7[0x4]
8000690e:	10 15       	sub	r5,r8
80006910:	6e d8       	ld.w	r8,r7[0x34]
80006912:	58 08       	cp.w	r8,0
80006914:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006918:	eb d8 e1 15 	subne	r5,r5,r8
8000691c:	6e b8       	ld.w	r8,r7[0x2c]
8000691e:	0c 9c       	mov	r12,r6
80006920:	30 09       	mov	r9,0
80006922:	0a 9a       	mov	r10,r5
80006924:	6e 8b       	ld.w	r11,r7[0x20]
80006926:	5d 18       	icall	r8
80006928:	8e 68       	ld.sh	r8,r7[0xc]
8000692a:	0a 3c       	cp.w	r12,r5
8000692c:	c2 61       	brne	80006978 <_fflush_r+0xf8>
8000692e:	ab d8       	cbr	r8,0xb
80006930:	30 0c       	mov	r12,0
80006932:	6e 49       	ld.w	r9,r7[0x10]
80006934:	ae 68       	st.h	r7[0xc],r8
80006936:	8f 1c       	st.w	r7[0x4],r12
80006938:	8f 09       	st.w	r7[0x0],r9
8000693a:	ed b8 00 0c 	bld	r8,0xc
8000693e:	c2 51       	brne	80006988 <_fflush_r+0x108>
80006940:	ef 45 00 54 	st.w	r7[84],r5
80006944:	d8 22       	popm	r4-r7,pc
80006946:	6e 45       	ld.w	r5,r7[0x10]
80006948:	58 05       	cp.w	r5,0
8000694a:	c1 f0       	breq	80006988 <_fflush_r+0x108>
8000694c:	6e 04       	ld.w	r4,r7[0x0]
8000694e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006952:	8f 05       	st.w	r7[0x0],r5
80006954:	f9 b8 01 00 	movne	r8,0
80006958:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000695c:	0a 14       	sub	r4,r5
8000695e:	8f 28       	st.w	r7[0x8],r8
80006960:	c1 18       	rjmp	80006982 <_fflush_r+0x102>
80006962:	08 99       	mov	r9,r4
80006964:	0a 9a       	mov	r10,r5
80006966:	6e a8       	ld.w	r8,r7[0x28]
80006968:	6e 8b       	ld.w	r11,r7[0x20]
8000696a:	0c 9c       	mov	r12,r6
8000696c:	5d 18       	icall	r8
8000696e:	18 14       	sub	r4,r12
80006970:	58 0c       	cp.w	r12,0
80006972:	e0 89 00 07 	brgt	80006980 <_fflush_r+0x100>
80006976:	8e 68       	ld.sh	r8,r7[0xc]
80006978:	a7 a8       	sbr	r8,0x6
8000697a:	3f fc       	mov	r12,-1
8000697c:	ae 68       	st.h	r7[0xc],r8
8000697e:	d8 22       	popm	r4-r7,pc
80006980:	18 05       	add	r5,r12
80006982:	58 04       	cp.w	r4,0
80006984:	fe 99 ff ef 	brgt	80006962 <_fflush_r+0xe2>
80006988:	d8 2a       	popm	r4-r7,pc,r12=0
8000698a:	d7 03       	nop

8000698c <__sfp_lock_acquire>:
8000698c:	5e fc       	retal	r12

8000698e <__sfp_lock_release>:
8000698e:	5e fc       	retal	r12

80006990 <_cleanup_r>:
80006990:	d4 01       	pushm	lr
80006992:	fe cb e8 7a 	sub	r11,pc,-6022
80006996:	e0 a0 02 fd 	rcall	80006f90 <_fwalk>
8000699a:	d8 02       	popm	pc

8000699c <__sfmoreglue>:
8000699c:	d4 21       	pushm	r4-r7,lr
8000699e:	16 95       	mov	r5,r11
800069a0:	f6 06 10 5c 	mul	r6,r11,92
800069a4:	ec cb ff f4 	sub	r11,r6,-12
800069a8:	e0 a0 03 84 	rcall	800070b0 <_malloc_r>
800069ac:	18 97       	mov	r7,r12
800069ae:	c0 90       	breq	800069c0 <__sfmoreglue+0x24>
800069b0:	99 15       	st.w	r12[0x4],r5
800069b2:	30 0b       	mov	r11,0
800069b4:	2f 4c       	sub	r12,-12
800069b6:	0c 9a       	mov	r10,r6
800069b8:	8f 2c       	st.w	r7[0x8],r12
800069ba:	8f 0b       	st.w	r7[0x0],r11
800069bc:	fe b0 e7 2f 	rcall	8000381a <memset>
800069c0:	0e 9c       	mov	r12,r7
800069c2:	d8 22       	popm	r4-r7,pc

800069c4 <__sfp>:
800069c4:	d4 21       	pushm	r4-r7,lr
800069c6:	fe c8 d5 b6 	sub	r8,pc,-10826
800069ca:	18 96       	mov	r6,r12
800069cc:	70 07       	ld.w	r7,r8[0x0]
800069ce:	6e 68       	ld.w	r8,r7[0x18]
800069d0:	58 08       	cp.w	r8,0
800069d2:	c0 31       	brne	800069d8 <__sfp+0x14>
800069d4:	0e 9c       	mov	r12,r7
800069d6:	c2 dc       	rcall	80006a30 <__sinit>
800069d8:	ee c7 ff 28 	sub	r7,r7,-216
800069dc:	30 05       	mov	r5,0
800069de:	6e 2c       	ld.w	r12,r7[0x8]
800069e0:	6e 18       	ld.w	r8,r7[0x4]
800069e2:	c0 68       	rjmp	800069ee <__sfp+0x2a>
800069e4:	98 69       	ld.sh	r9,r12[0xc]
800069e6:	ea 09 19 00 	cp.h	r9,r5
800069ea:	c1 10       	breq	80006a0c <__sfp+0x48>
800069ec:	2a 4c       	sub	r12,-92
800069ee:	20 18       	sub	r8,1
800069f0:	cf a7       	brpl	800069e4 <__sfp+0x20>
800069f2:	6e 08       	ld.w	r8,r7[0x0]
800069f4:	58 08       	cp.w	r8,0
800069f6:	c0 61       	brne	80006a02 <__sfp+0x3e>
800069f8:	30 4b       	mov	r11,4
800069fa:	0c 9c       	mov	r12,r6
800069fc:	cd 0f       	rcall	8000699c <__sfmoreglue>
800069fe:	8f 0c       	st.w	r7[0x0],r12
80006a00:	c0 30       	breq	80006a06 <__sfp+0x42>
80006a02:	6e 07       	ld.w	r7,r7[0x0]
80006a04:	ce db       	rjmp	800069de <__sfp+0x1a>
80006a06:	30 c8       	mov	r8,12
80006a08:	8d 38       	st.w	r6[0xc],r8
80006a0a:	d8 22       	popm	r4-r7,pc
80006a0c:	30 08       	mov	r8,0
80006a0e:	f9 48 00 4c 	st.w	r12[76],r8
80006a12:	99 08       	st.w	r12[0x0],r8
80006a14:	99 28       	st.w	r12[0x8],r8
80006a16:	99 18       	st.w	r12[0x4],r8
80006a18:	99 48       	st.w	r12[0x10],r8
80006a1a:	99 58       	st.w	r12[0x14],r8
80006a1c:	99 68       	st.w	r12[0x18],r8
80006a1e:	99 d8       	st.w	r12[0x34],r8
80006a20:	99 e8       	st.w	r12[0x38],r8
80006a22:	f9 48 00 48 	st.w	r12[72],r8
80006a26:	3f f8       	mov	r8,-1
80006a28:	b8 78       	st.h	r12[0xe],r8
80006a2a:	30 18       	mov	r8,1
80006a2c:	b8 68       	st.h	r12[0xc],r8
80006a2e:	d8 22       	popm	r4-r7,pc

80006a30 <__sinit>:
80006a30:	d4 21       	pushm	r4-r7,lr
80006a32:	18 96       	mov	r6,r12
80006a34:	78 67       	ld.w	r7,r12[0x18]
80006a36:	58 07       	cp.w	r7,0
80006a38:	c4 91       	brne	80006aca <__sinit+0x9a>
80006a3a:	fe c8 00 aa 	sub	r8,pc,170
80006a3e:	30 15       	mov	r5,1
80006a40:	99 a8       	st.w	r12[0x28],r8
80006a42:	f9 47 00 d8 	st.w	r12[216],r7
80006a46:	f9 47 00 dc 	st.w	r12[220],r7
80006a4a:	f9 47 00 e0 	st.w	r12[224],r7
80006a4e:	99 65       	st.w	r12[0x18],r5
80006a50:	cb af       	rcall	800069c4 <__sfp>
80006a52:	8d 0c       	st.w	r6[0x0],r12
80006a54:	0c 9c       	mov	r12,r6
80006a56:	cb 7f       	rcall	800069c4 <__sfp>
80006a58:	8d 1c       	st.w	r6[0x4],r12
80006a5a:	0c 9c       	mov	r12,r6
80006a5c:	cb 4f       	rcall	800069c4 <__sfp>
80006a5e:	6c 09       	ld.w	r9,r6[0x0]
80006a60:	30 48       	mov	r8,4
80006a62:	93 07       	st.w	r9[0x0],r7
80006a64:	b2 68       	st.h	r9[0xc],r8
80006a66:	93 17       	st.w	r9[0x4],r7
80006a68:	93 27       	st.w	r9[0x8],r7
80006a6a:	6c 18       	ld.w	r8,r6[0x4]
80006a6c:	b2 77       	st.h	r9[0xe],r7
80006a6e:	93 47       	st.w	r9[0x10],r7
80006a70:	93 57       	st.w	r9[0x14],r7
80006a72:	93 67       	st.w	r9[0x18],r7
80006a74:	93 89       	st.w	r9[0x20],r9
80006a76:	91 07       	st.w	r8[0x0],r7
80006a78:	91 17       	st.w	r8[0x4],r7
80006a7a:	91 27       	st.w	r8[0x8],r7
80006a7c:	fe ce eb f4 	sub	lr,pc,-5132
80006a80:	fe cb ec 24 	sub	r11,pc,-5084
80006a84:	93 9e       	st.w	r9[0x24],lr
80006a86:	93 ab       	st.w	r9[0x28],r11
80006a88:	fe ca ec 4c 	sub	r10,pc,-5044
80006a8c:	fe c4 ec 58 	sub	r4,pc,-5032
80006a90:	93 ba       	st.w	r9[0x2c],r10
80006a92:	93 c4       	st.w	r9[0x30],r4
80006a94:	30 99       	mov	r9,9
80006a96:	b0 69       	st.h	r8[0xc],r9
80006a98:	b0 75       	st.h	r8[0xe],r5
80006a9a:	91 c4       	st.w	r8[0x30],r4
80006a9c:	91 47       	st.w	r8[0x10],r7
80006a9e:	91 57       	st.w	r8[0x14],r7
80006aa0:	91 67       	st.w	r8[0x18],r7
80006aa2:	91 88       	st.w	r8[0x20],r8
80006aa4:	91 9e       	st.w	r8[0x24],lr
80006aa6:	91 ab       	st.w	r8[0x28],r11
80006aa8:	91 ba       	st.w	r8[0x2c],r10
80006aaa:	8d 2c       	st.w	r6[0x8],r12
80006aac:	31 28       	mov	r8,18
80006aae:	99 07       	st.w	r12[0x0],r7
80006ab0:	b8 68       	st.h	r12[0xc],r8
80006ab2:	99 17       	st.w	r12[0x4],r7
80006ab4:	99 27       	st.w	r12[0x8],r7
80006ab6:	30 28       	mov	r8,2
80006ab8:	b8 78       	st.h	r12[0xe],r8
80006aba:	99 c4       	st.w	r12[0x30],r4
80006abc:	99 67       	st.w	r12[0x18],r7
80006abe:	99 9e       	st.w	r12[0x24],lr
80006ac0:	99 ab       	st.w	r12[0x28],r11
80006ac2:	99 ba       	st.w	r12[0x2c],r10
80006ac4:	99 47       	st.w	r12[0x10],r7
80006ac6:	99 57       	st.w	r12[0x14],r7
80006ac8:	99 8c       	st.w	r12[0x20],r12
80006aca:	d8 22       	popm	r4-r7,pc

80006acc <_malloc_trim_r>:
80006acc:	d4 21       	pushm	r4-r7,lr
80006ace:	16 95       	mov	r5,r11
80006ad0:	18 97       	mov	r7,r12
80006ad2:	e0 a0 05 31 	rcall	80007534 <__malloc_lock>
80006ad6:	e0 64 01 08 	mov	r4,264
80006ada:	68 28       	ld.w	r8,r4[0x8]
80006adc:	70 16       	ld.w	r6,r8[0x4]
80006ade:	e0 16 ff fc 	andl	r6,0xfffc
80006ae2:	ec c8 ff 91 	sub	r8,r6,-111
80006ae6:	f0 05 01 05 	sub	r5,r8,r5
80006aea:	e0 15 ff 80 	andl	r5,0xff80
80006aee:	ea c5 00 80 	sub	r5,r5,128
80006af2:	e0 45 00 7f 	cp.w	r5,127
80006af6:	e0 8a 00 25 	brle	80006b40 <_malloc_trim_r+0x74>
80006afa:	30 0b       	mov	r11,0
80006afc:	0e 9c       	mov	r12,r7
80006afe:	e0 a0 09 8b 	rcall	80007e14 <_sbrk_r>
80006b02:	68 28       	ld.w	r8,r4[0x8]
80006b04:	0c 08       	add	r8,r6
80006b06:	10 3c       	cp.w	r12,r8
80006b08:	c1 c1       	brne	80006b40 <_malloc_trim_r+0x74>
80006b0a:	ea 0b 11 00 	rsub	r11,r5,0
80006b0e:	0e 9c       	mov	r12,r7
80006b10:	e0 a0 09 82 	rcall	80007e14 <_sbrk_r>
80006b14:	5b fc       	cp.w	r12,-1
80006b16:	c1 91       	brne	80006b48 <_malloc_trim_r+0x7c>
80006b18:	30 0b       	mov	r11,0
80006b1a:	0e 9c       	mov	r12,r7
80006b1c:	e0 a0 09 7c 	rcall	80007e14 <_sbrk_r>
80006b20:	68 28       	ld.w	r8,r4[0x8]
80006b22:	f8 08 01 09 	sub	r9,r12,r8
80006b26:	58 f9       	cp.w	r9,15
80006b28:	e0 8a 00 0c 	brle	80006b40 <_malloc_trim_r+0x74>
80006b2c:	a1 a9       	sbr	r9,0x0
80006b2e:	91 19       	st.w	r8[0x4],r9
80006b30:	e0 68 05 14 	mov	r8,1300
80006b34:	70 09       	ld.w	r9,r8[0x0]
80006b36:	e0 68 06 34 	mov	r8,1588
80006b3a:	f8 09 01 09 	sub	r9,r12,r9
80006b3e:	91 09       	st.w	r8[0x0],r9
80006b40:	0e 9c       	mov	r12,r7
80006b42:	e0 a0 04 fa 	rcall	80007536 <__malloc_unlock>
80006b46:	d8 2a       	popm	r4-r7,pc,r12=0
80006b48:	68 28       	ld.w	r8,r4[0x8]
80006b4a:	0a 16       	sub	r6,r5
80006b4c:	a1 a6       	sbr	r6,0x0
80006b4e:	91 16       	st.w	r8[0x4],r6
80006b50:	e0 68 06 34 	mov	r8,1588
80006b54:	70 09       	ld.w	r9,r8[0x0]
80006b56:	0a 19       	sub	r9,r5
80006b58:	0e 9c       	mov	r12,r7
80006b5a:	91 09       	st.w	r8[0x0],r9
80006b5c:	e0 a0 04 ed 	rcall	80007536 <__malloc_unlock>
80006b60:	da 2a       	popm	r4-r7,pc,r12=1
80006b62:	d7 03       	nop

80006b64 <_free_r>:
80006b64:	d4 21       	pushm	r4-r7,lr
80006b66:	16 96       	mov	r6,r11
80006b68:	18 97       	mov	r7,r12
80006b6a:	58 0b       	cp.w	r11,0
80006b6c:	e0 80 00 c0 	breq	80006cec <_free_r+0x188>
80006b70:	e0 a0 04 e2 	rcall	80007534 <__malloc_lock>
80006b74:	20 86       	sub	r6,8
80006b76:	e0 6a 01 08 	mov	r10,264
80006b7a:	6c 18       	ld.w	r8,r6[0x4]
80006b7c:	74 2e       	ld.w	lr,r10[0x8]
80006b7e:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006b82:	a1 c8       	cbr	r8,0x0
80006b84:	ec 08 00 09 	add	r9,r6,r8
80006b88:	72 1b       	ld.w	r11,r9[0x4]
80006b8a:	e0 1b ff fc 	andl	r11,0xfffc
80006b8e:	1c 39       	cp.w	r9,lr
80006b90:	c1 e1       	brne	80006bcc <_free_r+0x68>
80006b92:	f6 08 00 08 	add	r8,r11,r8
80006b96:	58 0c       	cp.w	r12,0
80006b98:	c0 81       	brne	80006ba8 <_free_r+0x44>
80006b9a:	6c 09       	ld.w	r9,r6[0x0]
80006b9c:	12 16       	sub	r6,r9
80006b9e:	12 08       	add	r8,r9
80006ba0:	6c 3b       	ld.w	r11,r6[0xc]
80006ba2:	6c 29       	ld.w	r9,r6[0x8]
80006ba4:	97 29       	st.w	r11[0x8],r9
80006ba6:	93 3b       	st.w	r9[0xc],r11
80006ba8:	10 99       	mov	r9,r8
80006baa:	95 26       	st.w	r10[0x8],r6
80006bac:	a1 a9       	sbr	r9,0x0
80006bae:	8d 19       	st.w	r6[0x4],r9
80006bb0:	e0 69 05 10 	mov	r9,1296
80006bb4:	72 09       	ld.w	r9,r9[0x0]
80006bb6:	12 38       	cp.w	r8,r9
80006bb8:	c0 63       	brcs	80006bc4 <_free_r+0x60>
80006bba:	e0 68 06 30 	mov	r8,1584
80006bbe:	0e 9c       	mov	r12,r7
80006bc0:	70 0b       	ld.w	r11,r8[0x0]
80006bc2:	c8 5f       	rcall	80006acc <_malloc_trim_r>
80006bc4:	0e 9c       	mov	r12,r7
80006bc6:	e0 a0 04 b8 	rcall	80007536 <__malloc_unlock>
80006bca:	d8 22       	popm	r4-r7,pc
80006bcc:	93 1b       	st.w	r9[0x4],r11
80006bce:	58 0c       	cp.w	r12,0
80006bd0:	c0 30       	breq	80006bd6 <_free_r+0x72>
80006bd2:	30 0c       	mov	r12,0
80006bd4:	c1 08       	rjmp	80006bf4 <_free_r+0x90>
80006bd6:	6c 0e       	ld.w	lr,r6[0x0]
80006bd8:	f4 c5 ff f8 	sub	r5,r10,-8
80006bdc:	1c 16       	sub	r6,lr
80006bde:	1c 08       	add	r8,lr
80006be0:	6c 2e       	ld.w	lr,r6[0x8]
80006be2:	0a 3e       	cp.w	lr,r5
80006be4:	f9 bc 00 01 	moveq	r12,1
80006be8:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006bec:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006bf0:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006bf4:	f2 0b 00 0e 	add	lr,r9,r11
80006bf8:	7c 1e       	ld.w	lr,lr[0x4]
80006bfa:	ed be 00 00 	bld	lr,0x0
80006bfe:	c1 40       	breq	80006c26 <_free_r+0xc2>
80006c00:	16 08       	add	r8,r11
80006c02:	58 0c       	cp.w	r12,0
80006c04:	c0 d1       	brne	80006c1e <_free_r+0xba>
80006c06:	e0 6e 01 08 	mov	lr,264
80006c0a:	72 2b       	ld.w	r11,r9[0x8]
80006c0c:	2f 8e       	sub	lr,-8
80006c0e:	1c 3b       	cp.w	r11,lr
80006c10:	c0 71       	brne	80006c1e <_free_r+0xba>
80006c12:	97 36       	st.w	r11[0xc],r6
80006c14:	97 26       	st.w	r11[0x8],r6
80006c16:	8d 2b       	st.w	r6[0x8],r11
80006c18:	8d 3b       	st.w	r6[0xc],r11
80006c1a:	30 1c       	mov	r12,1
80006c1c:	c0 58       	rjmp	80006c26 <_free_r+0xc2>
80006c1e:	72 2b       	ld.w	r11,r9[0x8]
80006c20:	72 39       	ld.w	r9,r9[0xc]
80006c22:	93 2b       	st.w	r9[0x8],r11
80006c24:	97 39       	st.w	r11[0xc],r9
80006c26:	10 99       	mov	r9,r8
80006c28:	ec 08 09 08 	st.w	r6[r8],r8
80006c2c:	a1 a9       	sbr	r9,0x0
80006c2e:	8d 19       	st.w	r6[0x4],r9
80006c30:	58 0c       	cp.w	r12,0
80006c32:	c5 a1       	brne	80006ce6 <_free_r+0x182>
80006c34:	e0 48 01 ff 	cp.w	r8,511
80006c38:	e0 8b 00 13 	brhi	80006c5e <_free_r+0xfa>
80006c3c:	a3 98       	lsr	r8,0x3
80006c3e:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006c42:	72 2b       	ld.w	r11,r9[0x8]
80006c44:	8d 39       	st.w	r6[0xc],r9
80006c46:	8d 2b       	st.w	r6[0x8],r11
80006c48:	97 36       	st.w	r11[0xc],r6
80006c4a:	93 26       	st.w	r9[0x8],r6
80006c4c:	a3 48       	asr	r8,0x2
80006c4e:	74 19       	ld.w	r9,r10[0x4]
80006c50:	30 1b       	mov	r11,1
80006c52:	f6 08 09 48 	lsl	r8,r11,r8
80006c56:	f3 e8 10 08 	or	r8,r9,r8
80006c5a:	95 18       	st.w	r10[0x4],r8
80006c5c:	c4 58       	rjmp	80006ce6 <_free_r+0x182>
80006c5e:	f0 0b 16 09 	lsr	r11,r8,0x9
80006c62:	58 4b       	cp.w	r11,4
80006c64:	e0 8b 00 06 	brhi	80006c70 <_free_r+0x10c>
80006c68:	f0 0b 16 06 	lsr	r11,r8,0x6
80006c6c:	2c 8b       	sub	r11,-56
80006c6e:	c2 08       	rjmp	80006cae <_free_r+0x14a>
80006c70:	59 4b       	cp.w	r11,20
80006c72:	e0 8b 00 04 	brhi	80006c7a <_free_r+0x116>
80006c76:	2a 5b       	sub	r11,-91
80006c78:	c1 b8       	rjmp	80006cae <_free_r+0x14a>
80006c7a:	e0 4b 00 54 	cp.w	r11,84
80006c7e:	e0 8b 00 06 	brhi	80006c8a <_free_r+0x126>
80006c82:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006c86:	29 2b       	sub	r11,-110
80006c88:	c1 38       	rjmp	80006cae <_free_r+0x14a>
80006c8a:	e0 4b 01 54 	cp.w	r11,340
80006c8e:	e0 8b 00 06 	brhi	80006c9a <_free_r+0x136>
80006c92:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006c96:	28 9b       	sub	r11,-119
80006c98:	c0 b8       	rjmp	80006cae <_free_r+0x14a>
80006c9a:	e0 4b 05 54 	cp.w	r11,1364
80006c9e:	e0 88 00 05 	brls	80006ca8 <_free_r+0x144>
80006ca2:	37 eb       	mov	r11,126
80006ca4:	c0 58       	rjmp	80006cae <_free_r+0x14a>
80006ca6:	d7 03       	nop
80006ca8:	f0 0b 16 12 	lsr	r11,r8,0x12
80006cac:	28 4b       	sub	r11,-124
80006cae:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006cb2:	78 29       	ld.w	r9,r12[0x8]
80006cb4:	18 39       	cp.w	r9,r12
80006cb6:	c0 e1       	brne	80006cd2 <_free_r+0x16e>
80006cb8:	74 18       	ld.w	r8,r10[0x4]
80006cba:	a3 4b       	asr	r11,0x2
80006cbc:	30 1c       	mov	r12,1
80006cbe:	f8 0b 09 4b 	lsl	r11,r12,r11
80006cc2:	f1 eb 10 0b 	or	r11,r8,r11
80006cc6:	12 98       	mov	r8,r9
80006cc8:	95 1b       	st.w	r10[0x4],r11
80006cca:	c0 a8       	rjmp	80006cde <_free_r+0x17a>
80006ccc:	72 29       	ld.w	r9,r9[0x8]
80006cce:	18 39       	cp.w	r9,r12
80006cd0:	c0 60       	breq	80006cdc <_free_r+0x178>
80006cd2:	72 1a       	ld.w	r10,r9[0x4]
80006cd4:	e0 1a ff fc 	andl	r10,0xfffc
80006cd8:	14 38       	cp.w	r8,r10
80006cda:	cf 93       	brcs	80006ccc <_free_r+0x168>
80006cdc:	72 38       	ld.w	r8,r9[0xc]
80006cde:	8d 38       	st.w	r6[0xc],r8
80006ce0:	8d 29       	st.w	r6[0x8],r9
80006ce2:	93 36       	st.w	r9[0xc],r6
80006ce4:	91 26       	st.w	r8[0x8],r6
80006ce6:	0e 9c       	mov	r12,r7
80006ce8:	e0 a0 04 27 	rcall	80007536 <__malloc_unlock>
80006cec:	d8 22       	popm	r4-r7,pc
80006cee:	d7 03       	nop

80006cf0 <__sfvwrite_r>:
80006cf0:	d4 31       	pushm	r0-r7,lr
80006cf2:	20 3d       	sub	sp,12
80006cf4:	14 94       	mov	r4,r10
80006cf6:	18 95       	mov	r5,r12
80006cf8:	16 97       	mov	r7,r11
80006cfa:	74 28       	ld.w	r8,r10[0x8]
80006cfc:	58 08       	cp.w	r8,0
80006cfe:	e0 80 01 45 	breq	80006f88 <__sfvwrite_r+0x298>
80006d02:	96 68       	ld.sh	r8,r11[0xc]
80006d04:	ed b8 00 03 	bld	r8,0x3
80006d08:	c0 41       	brne	80006d10 <__sfvwrite_r+0x20>
80006d0a:	76 48       	ld.w	r8,r11[0x10]
80006d0c:	58 08       	cp.w	r8,0
80006d0e:	c0 c1       	brne	80006d26 <__sfvwrite_r+0x36>
80006d10:	0e 9b       	mov	r11,r7
80006d12:	0a 9c       	mov	r12,r5
80006d14:	fe b0 f6 ca 	rcall	80005aa8 <__swsetup_r>
80006d18:	c0 70       	breq	80006d26 <__sfvwrite_r+0x36>
80006d1a:	8e 68       	ld.sh	r8,r7[0xc]
80006d1c:	a7 a8       	sbr	r8,0x6
80006d1e:	ae 68       	st.h	r7[0xc],r8
80006d20:	30 98       	mov	r8,9
80006d22:	8b 38       	st.w	r5[0xc],r8
80006d24:	c3 09       	rjmp	80006f84 <__sfvwrite_r+0x294>
80006d26:	8e 63       	ld.sh	r3,r7[0xc]
80006d28:	68 00       	ld.w	r0,r4[0x0]
80006d2a:	06 96       	mov	r6,r3
80006d2c:	e2 16 00 02 	andl	r6,0x2,COH
80006d30:	c2 10       	breq	80006d72 <__sfvwrite_r+0x82>
80006d32:	30 03       	mov	r3,0
80006d34:	e0 62 04 00 	mov	r2,1024
80006d38:	06 96       	mov	r6,r3
80006d3a:	c0 48       	rjmp	80006d42 <__sfvwrite_r+0x52>
80006d3c:	60 03       	ld.w	r3,r0[0x0]
80006d3e:	60 16       	ld.w	r6,r0[0x4]
80006d40:	2f 80       	sub	r0,-8
80006d42:	58 06       	cp.w	r6,0
80006d44:	cf c0       	breq	80006d3c <__sfvwrite_r+0x4c>
80006d46:	e0 46 04 00 	cp.w	r6,1024
80006d4a:	ec 09 17 80 	movls	r9,r6
80006d4e:	e4 09 17 b0 	movhi	r9,r2
80006d52:	06 9a       	mov	r10,r3
80006d54:	6e a8       	ld.w	r8,r7[0x28]
80006d56:	6e 8b       	ld.w	r11,r7[0x20]
80006d58:	0a 9c       	mov	r12,r5
80006d5a:	5d 18       	icall	r8
80006d5c:	18 16       	sub	r6,r12
80006d5e:	58 0c       	cp.w	r12,0
80006d60:	e0 8a 01 0f 	brle	80006f7e <__sfvwrite_r+0x28e>
80006d64:	68 28       	ld.w	r8,r4[0x8]
80006d66:	18 18       	sub	r8,r12
80006d68:	89 28       	st.w	r4[0x8],r8
80006d6a:	e0 80 01 0f 	breq	80006f88 <__sfvwrite_r+0x298>
80006d6e:	18 03       	add	r3,r12
80006d70:	ce 9b       	rjmp	80006d42 <__sfvwrite_r+0x52>
80006d72:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006d76:	c0 70       	breq	80006d84 <__sfvwrite_r+0x94>
80006d78:	50 06       	stdsp	sp[0x0],r6
80006d7a:	0c 93       	mov	r3,r6
80006d7c:	0c 91       	mov	r1,r6
80006d7e:	50 15       	stdsp	sp[0x4],r5
80006d80:	08 92       	mov	r2,r4
80006d82:	c9 e8       	rjmp	80006ebe <__sfvwrite_r+0x1ce>
80006d84:	06 96       	mov	r6,r3
80006d86:	08 91       	mov	r1,r4
80006d88:	c0 48       	rjmp	80006d90 <__sfvwrite_r+0xa0>
80006d8a:	60 03       	ld.w	r3,r0[0x0]
80006d8c:	60 16       	ld.w	r6,r0[0x4]
80006d8e:	2f 80       	sub	r0,-8
80006d90:	58 06       	cp.w	r6,0
80006d92:	cf c0       	breq	80006d8a <__sfvwrite_r+0x9a>
80006d94:	8e 68       	ld.sh	r8,r7[0xc]
80006d96:	6e 24       	ld.w	r4,r7[0x8]
80006d98:	10 99       	mov	r9,r8
80006d9a:	e2 19 02 00 	andl	r9,0x200,COH
80006d9e:	c5 50       	breq	80006e48 <__sfvwrite_r+0x158>
80006da0:	08 36       	cp.w	r6,r4
80006da2:	c4 33       	brcs	80006e28 <__sfvwrite_r+0x138>
80006da4:	10 99       	mov	r9,r8
80006da6:	e2 19 04 80 	andl	r9,0x480,COH
80006daa:	c3 f0       	breq	80006e28 <__sfvwrite_r+0x138>
80006dac:	6e 4b       	ld.w	r11,r7[0x10]
80006dae:	6e 09       	ld.w	r9,r7[0x0]
80006db0:	16 19       	sub	r9,r11
80006db2:	50 09       	stdsp	sp[0x0],r9
80006db4:	6e 59       	ld.w	r9,r7[0x14]
80006db6:	10 9c       	mov	r12,r8
80006db8:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006dbc:	30 28       	mov	r8,2
80006dbe:	f4 08 0c 08 	divs	r8,r10,r8
80006dc2:	fa e9 00 04 	st.d	sp[4],r8
80006dc6:	10 94       	mov	r4,r8
80006dc8:	40 09       	lddsp	r9,sp[0x0]
80006dca:	e2 1c 04 00 	andl	r12,0x400,COH
80006dce:	2f f9       	sub	r9,-1
80006dd0:	0c 09       	add	r9,r6
80006dd2:	12 38       	cp.w	r8,r9
80006dd4:	f2 04 17 30 	movlo	r4,r9
80006dd8:	58 0c       	cp.w	r12,0
80006dda:	c1 00       	breq	80006dfa <__sfvwrite_r+0x10a>
80006ddc:	08 9b       	mov	r11,r4
80006dde:	0a 9c       	mov	r12,r5
80006de0:	c6 8d       	rcall	800070b0 <_malloc_r>
80006de2:	18 92       	mov	r2,r12
80006de4:	c1 40       	breq	80006e0c <__sfvwrite_r+0x11c>
80006de6:	40 0a       	lddsp	r10,sp[0x0]
80006de8:	6e 4b       	ld.w	r11,r7[0x10]
80006dea:	fe b0 e4 74 	rcall	800036d2 <memcpy>
80006dee:	8e 68       	ld.sh	r8,r7[0xc]
80006df0:	e0 18 fb 7f 	andl	r8,0xfb7f
80006df4:	a7 b8       	sbr	r8,0x7
80006df6:	ae 68       	st.h	r7[0xc],r8
80006df8:	c0 d8       	rjmp	80006e12 <__sfvwrite_r+0x122>
80006dfa:	08 9a       	mov	r10,r4
80006dfc:	0a 9c       	mov	r12,r5
80006dfe:	e0 a0 06 87 	rcall	80007b0c <_realloc_r>
80006e02:	18 92       	mov	r2,r12
80006e04:	c0 71       	brne	80006e12 <__sfvwrite_r+0x122>
80006e06:	6e 4b       	ld.w	r11,r7[0x10]
80006e08:	0a 9c       	mov	r12,r5
80006e0a:	ca de       	rcall	80006b64 <_free_r>
80006e0c:	30 c8       	mov	r8,12
80006e0e:	8b 38       	st.w	r5[0xc],r8
80006e10:	cb 78       	rjmp	80006f7e <__sfvwrite_r+0x28e>
80006e12:	40 0a       	lddsp	r10,sp[0x0]
80006e14:	40 09       	lddsp	r9,sp[0x0]
80006e16:	e8 0a 01 0a 	sub	r10,r4,r10
80006e1a:	e4 09 00 08 	add	r8,r2,r9
80006e1e:	8f 54       	st.w	r7[0x14],r4
80006e20:	8f 2a       	st.w	r7[0x8],r10
80006e22:	8f 08       	st.w	r7[0x0],r8
80006e24:	8f 42       	st.w	r7[0x10],r2
80006e26:	0c 94       	mov	r4,r6
80006e28:	08 36       	cp.w	r6,r4
80006e2a:	ec 04 17 30 	movlo	r4,r6
80006e2e:	06 9b       	mov	r11,r3
80006e30:	08 9a       	mov	r10,r4
80006e32:	6e 0c       	ld.w	r12,r7[0x0]
80006e34:	e0 a0 03 61 	rcall	800074f6 <memmove>
80006e38:	6e 08       	ld.w	r8,r7[0x0]
80006e3a:	08 08       	add	r8,r4
80006e3c:	8f 08       	st.w	r7[0x0],r8
80006e3e:	6e 28       	ld.w	r8,r7[0x8]
80006e40:	08 18       	sub	r8,r4
80006e42:	0c 94       	mov	r4,r6
80006e44:	8f 28       	st.w	r7[0x8],r8
80006e46:	c3 08       	rjmp	80006ea6 <__sfvwrite_r+0x1b6>
80006e48:	08 36       	cp.w	r6,r4
80006e4a:	5f ba       	srhi	r10
80006e4c:	6e 0c       	ld.w	r12,r7[0x0]
80006e4e:	6e 48       	ld.w	r8,r7[0x10]
80006e50:	10 3c       	cp.w	r12,r8
80006e52:	5f b8       	srhi	r8
80006e54:	f5 e8 00 08 	and	r8,r10,r8
80006e58:	f2 08 18 00 	cp.b	r8,r9
80006e5c:	c0 e0       	breq	80006e78 <__sfvwrite_r+0x188>
80006e5e:	06 9b       	mov	r11,r3
80006e60:	08 9a       	mov	r10,r4
80006e62:	e0 a0 03 4a 	rcall	800074f6 <memmove>
80006e66:	6e 08       	ld.w	r8,r7[0x0]
80006e68:	08 08       	add	r8,r4
80006e6a:	0e 9b       	mov	r11,r7
80006e6c:	8f 08       	st.w	r7[0x0],r8
80006e6e:	0a 9c       	mov	r12,r5
80006e70:	fe b0 fd 08 	rcall	80006880 <_fflush_r>
80006e74:	c1 90       	breq	80006ea6 <__sfvwrite_r+0x1b6>
80006e76:	c8 48       	rjmp	80006f7e <__sfvwrite_r+0x28e>
80006e78:	6e 59       	ld.w	r9,r7[0x14]
80006e7a:	12 36       	cp.w	r6,r9
80006e7c:	c0 a3       	brcs	80006e90 <__sfvwrite_r+0x1a0>
80006e7e:	6e a8       	ld.w	r8,r7[0x28]
80006e80:	06 9a       	mov	r10,r3
80006e82:	6e 8b       	ld.w	r11,r7[0x20]
80006e84:	0a 9c       	mov	r12,r5
80006e86:	5d 18       	icall	r8
80006e88:	18 94       	mov	r4,r12
80006e8a:	e0 89 00 0e 	brgt	80006ea6 <__sfvwrite_r+0x1b6>
80006e8e:	c7 88       	rjmp	80006f7e <__sfvwrite_r+0x28e>
80006e90:	0c 9a       	mov	r10,r6
80006e92:	06 9b       	mov	r11,r3
80006e94:	e0 a0 03 31 	rcall	800074f6 <memmove>
80006e98:	6e 08       	ld.w	r8,r7[0x0]
80006e9a:	0c 08       	add	r8,r6
80006e9c:	0c 94       	mov	r4,r6
80006e9e:	8f 08       	st.w	r7[0x0],r8
80006ea0:	6e 28       	ld.w	r8,r7[0x8]
80006ea2:	0c 18       	sub	r8,r6
80006ea4:	8f 28       	st.w	r7[0x8],r8
80006ea6:	62 28       	ld.w	r8,r1[0x8]
80006ea8:	08 18       	sub	r8,r4
80006eaa:	83 28       	st.w	r1[0x8],r8
80006eac:	c6 e0       	breq	80006f88 <__sfvwrite_r+0x298>
80006eae:	08 16       	sub	r6,r4
80006eb0:	08 03       	add	r3,r4
80006eb2:	c6 fb       	rjmp	80006d90 <__sfvwrite_r+0xa0>
80006eb4:	60 03       	ld.w	r3,r0[0x0]
80006eb6:	60 11       	ld.w	r1,r0[0x4]
80006eb8:	30 08       	mov	r8,0
80006eba:	2f 80       	sub	r0,-8
80006ebc:	50 08       	stdsp	sp[0x0],r8
80006ebe:	58 01       	cp.w	r1,0
80006ec0:	cf a0       	breq	80006eb4 <__sfvwrite_r+0x1c4>
80006ec2:	40 0a       	lddsp	r10,sp[0x0]
80006ec4:	58 0a       	cp.w	r10,0
80006ec6:	c1 51       	brne	80006ef0 <__sfvwrite_r+0x200>
80006ec8:	e2 c6 ff ff 	sub	r6,r1,-1
80006ecc:	02 9a       	mov	r10,r1
80006ece:	30 ab       	mov	r11,10
80006ed0:	06 9c       	mov	r12,r3
80006ed2:	e0 a0 03 07 	rcall	800074e0 <memchr>
80006ed6:	f8 c8 ff ff 	sub	r8,r12,-1
80006eda:	58 0c       	cp.w	r12,0
80006edc:	f1 d3 e1 16 	subne	r6,r8,r3
80006ee0:	f9 b9 01 01 	movne	r9,1
80006ee4:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006ee8:	f9 b8 00 01 	moveq	r8,1
80006eec:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006ef0:	02 36       	cp.w	r6,r1
80006ef2:	ec 04 17 80 	movls	r4,r6
80006ef6:	e2 04 17 b0 	movhi	r4,r1
80006efa:	6e 59       	ld.w	r9,r7[0x14]
80006efc:	6e 25       	ld.w	r5,r7[0x8]
80006efe:	f2 05 00 05 	add	r5,r9,r5
80006f02:	0a 34       	cp.w	r4,r5
80006f04:	5f 9a       	srgt	r10
80006f06:	6e 0c       	ld.w	r12,r7[0x0]
80006f08:	6e 48       	ld.w	r8,r7[0x10]
80006f0a:	10 3c       	cp.w	r12,r8
80006f0c:	5f b8       	srhi	r8
80006f0e:	f5 e8 00 08 	and	r8,r10,r8
80006f12:	30 0a       	mov	r10,0
80006f14:	f4 08 18 00 	cp.b	r8,r10
80006f18:	c0 e0       	breq	80006f34 <__sfvwrite_r+0x244>
80006f1a:	06 9b       	mov	r11,r3
80006f1c:	0a 9a       	mov	r10,r5
80006f1e:	e0 a0 02 ec 	rcall	800074f6 <memmove>
80006f22:	6e 08       	ld.w	r8,r7[0x0]
80006f24:	0a 08       	add	r8,r5
80006f26:	0e 9b       	mov	r11,r7
80006f28:	8f 08       	st.w	r7[0x0],r8
80006f2a:	40 1c       	lddsp	r12,sp[0x4]
80006f2c:	fe b0 fc aa 	rcall	80006880 <_fflush_r>
80006f30:	c1 80       	breq	80006f60 <__sfvwrite_r+0x270>
80006f32:	c2 68       	rjmp	80006f7e <__sfvwrite_r+0x28e>
80006f34:	12 34       	cp.w	r4,r9
80006f36:	c0 a5       	brlt	80006f4a <__sfvwrite_r+0x25a>
80006f38:	6e a8       	ld.w	r8,r7[0x28]
80006f3a:	06 9a       	mov	r10,r3
80006f3c:	6e 8b       	ld.w	r11,r7[0x20]
80006f3e:	40 1c       	lddsp	r12,sp[0x4]
80006f40:	5d 18       	icall	r8
80006f42:	18 95       	mov	r5,r12
80006f44:	e0 89 00 0e 	brgt	80006f60 <__sfvwrite_r+0x270>
80006f48:	c1 b8       	rjmp	80006f7e <__sfvwrite_r+0x28e>
80006f4a:	08 9a       	mov	r10,r4
80006f4c:	06 9b       	mov	r11,r3
80006f4e:	e0 a0 02 d4 	rcall	800074f6 <memmove>
80006f52:	6e 08       	ld.w	r8,r7[0x0]
80006f54:	08 08       	add	r8,r4
80006f56:	08 95       	mov	r5,r4
80006f58:	8f 08       	st.w	r7[0x0],r8
80006f5a:	6e 28       	ld.w	r8,r7[0x8]
80006f5c:	08 18       	sub	r8,r4
80006f5e:	8f 28       	st.w	r7[0x8],r8
80006f60:	0a 16       	sub	r6,r5
80006f62:	c0 71       	brne	80006f70 <__sfvwrite_r+0x280>
80006f64:	0e 9b       	mov	r11,r7
80006f66:	40 1c       	lddsp	r12,sp[0x4]
80006f68:	fe b0 fc 8c 	rcall	80006880 <_fflush_r>
80006f6c:	c0 91       	brne	80006f7e <__sfvwrite_r+0x28e>
80006f6e:	50 06       	stdsp	sp[0x0],r6
80006f70:	64 28       	ld.w	r8,r2[0x8]
80006f72:	0a 18       	sub	r8,r5
80006f74:	85 28       	st.w	r2[0x8],r8
80006f76:	c0 90       	breq	80006f88 <__sfvwrite_r+0x298>
80006f78:	0a 11       	sub	r1,r5
80006f7a:	0a 03       	add	r3,r5
80006f7c:	ca 1b       	rjmp	80006ebe <__sfvwrite_r+0x1ce>
80006f7e:	8e 68       	ld.sh	r8,r7[0xc]
80006f80:	a7 a8       	sbr	r8,0x6
80006f82:	ae 68       	st.h	r7[0xc],r8
80006f84:	3f fc       	mov	r12,-1
80006f86:	c0 28       	rjmp	80006f8a <__sfvwrite_r+0x29a>
80006f88:	30 0c       	mov	r12,0
80006f8a:	2f dd       	sub	sp,-12
80006f8c:	d8 32       	popm	r0-r7,pc
80006f8e:	d7 03       	nop

80006f90 <_fwalk>:
80006f90:	d4 31       	pushm	r0-r7,lr
80006f92:	30 05       	mov	r5,0
80006f94:	16 91       	mov	r1,r11
80006f96:	f8 c7 ff 28 	sub	r7,r12,-216
80006f9a:	0a 92       	mov	r2,r5
80006f9c:	fe b0 fc f8 	rcall	8000698c <__sfp_lock_acquire>
80006fa0:	3f f3       	mov	r3,-1
80006fa2:	c1 68       	rjmp	80006fce <_fwalk+0x3e>
80006fa4:	6e 26       	ld.w	r6,r7[0x8]
80006fa6:	6e 14       	ld.w	r4,r7[0x4]
80006fa8:	2f 46       	sub	r6,-12
80006faa:	c0 c8       	rjmp	80006fc2 <_fwalk+0x32>
80006fac:	8c 08       	ld.sh	r8,r6[0x0]
80006fae:	e4 08 19 00 	cp.h	r8,r2
80006fb2:	c0 70       	breq	80006fc0 <_fwalk+0x30>
80006fb4:	8c 18       	ld.sh	r8,r6[0x2]
80006fb6:	e6 08 19 00 	cp.h	r8,r3
80006fba:	c0 30       	breq	80006fc0 <_fwalk+0x30>
80006fbc:	5d 11       	icall	r1
80006fbe:	18 45       	or	r5,r12
80006fc0:	2a 46       	sub	r6,-92
80006fc2:	20 14       	sub	r4,1
80006fc4:	ec cc 00 0c 	sub	r12,r6,12
80006fc8:	58 04       	cp.w	r4,0
80006fca:	cf 14       	brge	80006fac <_fwalk+0x1c>
80006fcc:	6e 07       	ld.w	r7,r7[0x0]
80006fce:	58 07       	cp.w	r7,0
80006fd0:	ce a1       	brne	80006fa4 <_fwalk+0x14>
80006fd2:	fe b0 fc de 	rcall	8000698e <__sfp_lock_release>
80006fd6:	0a 9c       	mov	r12,r5
80006fd8:	d8 32       	popm	r0-r7,pc
80006fda:	d7 03       	nop

80006fdc <_localeconv_r>:
80006fdc:	fe cc d7 84 	sub	r12,pc,-10364
80006fe0:	5e fc       	retal	r12
80006fe2:	d7 03       	nop

80006fe4 <__smakebuf_r>:
80006fe4:	d4 21       	pushm	r4-r7,lr
80006fe6:	20 fd       	sub	sp,60
80006fe8:	96 68       	ld.sh	r8,r11[0xc]
80006fea:	16 97       	mov	r7,r11
80006fec:	18 96       	mov	r6,r12
80006fee:	e2 18 00 02 	andl	r8,0x2,COH
80006ff2:	c3 c1       	brne	8000706a <__smakebuf_r+0x86>
80006ff4:	96 7b       	ld.sh	r11,r11[0xe]
80006ff6:	f0 0b 19 00 	cp.h	r11,r8
80006ffa:	c0 55       	brlt	80007004 <__smakebuf_r+0x20>
80006ffc:	1a 9a       	mov	r10,sp
80006ffe:	e0 a0 08 95 	rcall	80008128 <_fstat_r>
80007002:	c0 f4       	brge	80007020 <__smakebuf_r+0x3c>
80007004:	8e 65       	ld.sh	r5,r7[0xc]
80007006:	0a 98       	mov	r8,r5
80007008:	ab b8       	sbr	r8,0xb
8000700a:	e2 15 00 80 	andl	r5,0x80,COH
8000700e:	ae 68       	st.h	r7[0xc],r8
80007010:	30 04       	mov	r4,0
80007012:	e0 68 04 00 	mov	r8,1024
80007016:	f9 b5 01 40 	movne	r5,64
8000701a:	f0 05 17 00 	moveq	r5,r8
8000701e:	c1 c8       	rjmp	80007056 <__smakebuf_r+0x72>
80007020:	40 18       	lddsp	r8,sp[0x4]
80007022:	e2 18 f0 00 	andl	r8,0xf000,COH
80007026:	e0 48 20 00 	cp.w	r8,8192
8000702a:	5f 04       	sreq	r4
8000702c:	e0 48 80 00 	cp.w	r8,32768
80007030:	c0 e1       	brne	8000704c <__smakebuf_r+0x68>
80007032:	6e b9       	ld.w	r9,r7[0x2c]
80007034:	fe c8 f1 f8 	sub	r8,pc,-3592
80007038:	10 39       	cp.w	r9,r8
8000703a:	c0 91       	brne	8000704c <__smakebuf_r+0x68>
8000703c:	8e 68       	ld.sh	r8,r7[0xc]
8000703e:	e0 65 04 00 	mov	r5,1024
80007042:	ab a8       	sbr	r8,0xa
80007044:	ef 45 00 50 	st.w	r7[80],r5
80007048:	ae 68       	st.h	r7[0xc],r8
8000704a:	c0 68       	rjmp	80007056 <__smakebuf_r+0x72>
8000704c:	8e 68       	ld.sh	r8,r7[0xc]
8000704e:	e0 65 04 00 	mov	r5,1024
80007052:	ab b8       	sbr	r8,0xb
80007054:	ae 68       	st.h	r7[0xc],r8
80007056:	0a 9b       	mov	r11,r5
80007058:	0c 9c       	mov	r12,r6
8000705a:	c2 bc       	rcall	800070b0 <_malloc_r>
8000705c:	8e 68       	ld.sh	r8,r7[0xc]
8000705e:	c0 d1       	brne	80007078 <__smakebuf_r+0x94>
80007060:	ed b8 00 09 	bld	r8,0x9
80007064:	c1 b0       	breq	8000709a <__smakebuf_r+0xb6>
80007066:	a1 b8       	sbr	r8,0x1
80007068:	ae 68       	st.h	r7[0xc],r8
8000706a:	ee c8 ff b9 	sub	r8,r7,-71
8000706e:	8f 48       	st.w	r7[0x10],r8
80007070:	8f 08       	st.w	r7[0x0],r8
80007072:	30 18       	mov	r8,1
80007074:	8f 58       	st.w	r7[0x14],r8
80007076:	c1 28       	rjmp	8000709a <__smakebuf_r+0xb6>
80007078:	a7 b8       	sbr	r8,0x7
8000707a:	8f 4c       	st.w	r7[0x10],r12
8000707c:	ae 68       	st.h	r7[0xc],r8
8000707e:	8f 55       	st.w	r7[0x14],r5
80007080:	fe c8 06 f0 	sub	r8,pc,1776
80007084:	8f 0c       	st.w	r7[0x0],r12
80007086:	8d a8       	st.w	r6[0x28],r8
80007088:	58 04       	cp.w	r4,0
8000708a:	c0 80       	breq	8000709a <__smakebuf_r+0xb6>
8000708c:	8e 7c       	ld.sh	r12,r7[0xe]
8000708e:	e0 a0 07 3f 	rcall	80007f0c <isatty>
80007092:	c0 40       	breq	8000709a <__smakebuf_r+0xb6>
80007094:	8e 68       	ld.sh	r8,r7[0xc]
80007096:	a1 a8       	sbr	r8,0x0
80007098:	ae 68       	st.h	r7[0xc],r8
8000709a:	2f 1d       	sub	sp,-60
8000709c:	d8 22       	popm	r4-r7,pc
8000709e:	d7 03       	nop

800070a0 <malloc>:
800070a0:	d4 01       	pushm	lr
800070a2:	e0 68 01 04 	mov	r8,260
800070a6:	18 9b       	mov	r11,r12
800070a8:	70 0c       	ld.w	r12,r8[0x0]
800070aa:	c0 3c       	rcall	800070b0 <_malloc_r>
800070ac:	d8 02       	popm	pc
800070ae:	d7 03       	nop

800070b0 <_malloc_r>:
800070b0:	d4 31       	pushm	r0-r7,lr
800070b2:	f6 c8 ff f5 	sub	r8,r11,-11
800070b6:	18 95       	mov	r5,r12
800070b8:	10 97       	mov	r7,r8
800070ba:	e0 17 ff f8 	andl	r7,0xfff8
800070be:	59 68       	cp.w	r8,22
800070c0:	f9 b7 08 10 	movls	r7,16
800070c4:	16 37       	cp.w	r7,r11
800070c6:	5f 38       	srlo	r8
800070c8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800070cc:	c0 50       	breq	800070d6 <_malloc_r+0x26>
800070ce:	30 c8       	mov	r8,12
800070d0:	99 38       	st.w	r12[0xc],r8
800070d2:	e0 8f 01 f7 	bral	800074c0 <_malloc_r+0x410>
800070d6:	e0 a0 02 2f 	rcall	80007534 <__malloc_lock>
800070da:	e0 47 01 f7 	cp.w	r7,503
800070de:	e0 8b 00 1d 	brhi	80007118 <_malloc_r+0x68>
800070e2:	ee 03 16 03 	lsr	r3,r7,0x3
800070e6:	e0 68 01 08 	mov	r8,264
800070ea:	f0 03 00 38 	add	r8,r8,r3<<0x3
800070ee:	70 36       	ld.w	r6,r8[0xc]
800070f0:	10 36       	cp.w	r6,r8
800070f2:	c0 61       	brne	800070fe <_malloc_r+0x4e>
800070f4:	ec c8 ff f8 	sub	r8,r6,-8
800070f8:	70 36       	ld.w	r6,r8[0xc]
800070fa:	10 36       	cp.w	r6,r8
800070fc:	c0 c0       	breq	80007114 <_malloc_r+0x64>
800070fe:	6c 18       	ld.w	r8,r6[0x4]
80007100:	e0 18 ff fc 	andl	r8,0xfffc
80007104:	6c 3a       	ld.w	r10,r6[0xc]
80007106:	ec 08 00 09 	add	r9,r6,r8
8000710a:	0a 9c       	mov	r12,r5
8000710c:	6c 28       	ld.w	r8,r6[0x8]
8000710e:	95 28       	st.w	r10[0x8],r8
80007110:	91 3a       	st.w	r8[0xc],r10
80007112:	c4 78       	rjmp	800071a0 <_malloc_r+0xf0>
80007114:	2f e3       	sub	r3,-2
80007116:	c4 d8       	rjmp	800071b0 <_malloc_r+0x100>
80007118:	ee 03 16 09 	lsr	r3,r7,0x9
8000711c:	c0 41       	brne	80007124 <_malloc_r+0x74>
8000711e:	ee 03 16 03 	lsr	r3,r7,0x3
80007122:	c2 68       	rjmp	8000716e <_malloc_r+0xbe>
80007124:	58 43       	cp.w	r3,4
80007126:	e0 8b 00 06 	brhi	80007132 <_malloc_r+0x82>
8000712a:	ee 03 16 06 	lsr	r3,r7,0x6
8000712e:	2c 83       	sub	r3,-56
80007130:	c1 f8       	rjmp	8000716e <_malloc_r+0xbe>
80007132:	59 43       	cp.w	r3,20
80007134:	e0 8b 00 04 	brhi	8000713c <_malloc_r+0x8c>
80007138:	2a 53       	sub	r3,-91
8000713a:	c1 a8       	rjmp	8000716e <_malloc_r+0xbe>
8000713c:	e0 43 00 54 	cp.w	r3,84
80007140:	e0 8b 00 06 	brhi	8000714c <_malloc_r+0x9c>
80007144:	ee 03 16 0c 	lsr	r3,r7,0xc
80007148:	29 23       	sub	r3,-110
8000714a:	c1 28       	rjmp	8000716e <_malloc_r+0xbe>
8000714c:	e0 43 01 54 	cp.w	r3,340
80007150:	e0 8b 00 06 	brhi	8000715c <_malloc_r+0xac>
80007154:	ee 03 16 0f 	lsr	r3,r7,0xf
80007158:	28 93       	sub	r3,-119
8000715a:	c0 a8       	rjmp	8000716e <_malloc_r+0xbe>
8000715c:	e0 43 05 54 	cp.w	r3,1364
80007160:	e0 88 00 04 	brls	80007168 <_malloc_r+0xb8>
80007164:	37 e3       	mov	r3,126
80007166:	c0 48       	rjmp	8000716e <_malloc_r+0xbe>
80007168:	ee 03 16 12 	lsr	r3,r7,0x12
8000716c:	28 43       	sub	r3,-124
8000716e:	e0 6a 01 08 	mov	r10,264
80007172:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007176:	74 36       	ld.w	r6,r10[0xc]
80007178:	c1 98       	rjmp	800071aa <_malloc_r+0xfa>
8000717a:	6c 19       	ld.w	r9,r6[0x4]
8000717c:	e0 19 ff fc 	andl	r9,0xfffc
80007180:	f2 07 01 0b 	sub	r11,r9,r7
80007184:	58 fb       	cp.w	r11,15
80007186:	e0 8a 00 04 	brle	8000718e <_malloc_r+0xde>
8000718a:	20 13       	sub	r3,1
8000718c:	c1 18       	rjmp	800071ae <_malloc_r+0xfe>
8000718e:	6c 38       	ld.w	r8,r6[0xc]
80007190:	58 0b       	cp.w	r11,0
80007192:	c0 b5       	brlt	800071a8 <_malloc_r+0xf8>
80007194:	6c 2a       	ld.w	r10,r6[0x8]
80007196:	ec 09 00 09 	add	r9,r6,r9
8000719a:	0a 9c       	mov	r12,r5
8000719c:	91 2a       	st.w	r8[0x8],r10
8000719e:	95 38       	st.w	r10[0xc],r8
800071a0:	72 18       	ld.w	r8,r9[0x4]
800071a2:	a1 a8       	sbr	r8,0x0
800071a4:	93 18       	st.w	r9[0x4],r8
800071a6:	cb c8       	rjmp	8000731e <_malloc_r+0x26e>
800071a8:	10 96       	mov	r6,r8
800071aa:	14 36       	cp.w	r6,r10
800071ac:	ce 71       	brne	8000717a <_malloc_r+0xca>
800071ae:	2f f3       	sub	r3,-1
800071b0:	e0 6a 01 08 	mov	r10,264
800071b4:	f4 cc ff f8 	sub	r12,r10,-8
800071b8:	78 26       	ld.w	r6,r12[0x8]
800071ba:	18 36       	cp.w	r6,r12
800071bc:	c6 c0       	breq	80007294 <_malloc_r+0x1e4>
800071be:	6c 19       	ld.w	r9,r6[0x4]
800071c0:	e0 19 ff fc 	andl	r9,0xfffc
800071c4:	f2 07 01 08 	sub	r8,r9,r7
800071c8:	58 f8       	cp.w	r8,15
800071ca:	e0 89 00 8f 	brgt	800072e8 <_malloc_r+0x238>
800071ce:	99 3c       	st.w	r12[0xc],r12
800071d0:	99 2c       	st.w	r12[0x8],r12
800071d2:	58 08       	cp.w	r8,0
800071d4:	c0 55       	brlt	800071de <_malloc_r+0x12e>
800071d6:	ec 09 00 09 	add	r9,r6,r9
800071da:	0a 9c       	mov	r12,r5
800071dc:	ce 2b       	rjmp	800071a0 <_malloc_r+0xf0>
800071de:	e0 49 01 ff 	cp.w	r9,511
800071e2:	e0 8b 00 13 	brhi	80007208 <_malloc_r+0x158>
800071e6:	a3 99       	lsr	r9,0x3
800071e8:	f4 09 00 38 	add	r8,r10,r9<<0x3
800071ec:	70 2b       	ld.w	r11,r8[0x8]
800071ee:	8d 38       	st.w	r6[0xc],r8
800071f0:	8d 2b       	st.w	r6[0x8],r11
800071f2:	97 36       	st.w	r11[0xc],r6
800071f4:	91 26       	st.w	r8[0x8],r6
800071f6:	a3 49       	asr	r9,0x2
800071f8:	74 18       	ld.w	r8,r10[0x4]
800071fa:	30 1b       	mov	r11,1
800071fc:	f6 09 09 49 	lsl	r9,r11,r9
80007200:	f1 e9 10 09 	or	r9,r8,r9
80007204:	95 19       	st.w	r10[0x4],r9
80007206:	c4 78       	rjmp	80007294 <_malloc_r+0x1e4>
80007208:	f2 0a 16 09 	lsr	r10,r9,0x9
8000720c:	58 4a       	cp.w	r10,4
8000720e:	e0 8b 00 07 	brhi	8000721c <_malloc_r+0x16c>
80007212:	f2 0a 16 06 	lsr	r10,r9,0x6
80007216:	2c 8a       	sub	r10,-56
80007218:	c2 08       	rjmp	80007258 <_malloc_r+0x1a8>
8000721a:	d7 03       	nop
8000721c:	59 4a       	cp.w	r10,20
8000721e:	e0 8b 00 04 	brhi	80007226 <_malloc_r+0x176>
80007222:	2a 5a       	sub	r10,-91
80007224:	c1 a8       	rjmp	80007258 <_malloc_r+0x1a8>
80007226:	e0 4a 00 54 	cp.w	r10,84
8000722a:	e0 8b 00 06 	brhi	80007236 <_malloc_r+0x186>
8000722e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007232:	29 2a       	sub	r10,-110
80007234:	c1 28       	rjmp	80007258 <_malloc_r+0x1a8>
80007236:	e0 4a 01 54 	cp.w	r10,340
8000723a:	e0 8b 00 06 	brhi	80007246 <_malloc_r+0x196>
8000723e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007242:	28 9a       	sub	r10,-119
80007244:	c0 a8       	rjmp	80007258 <_malloc_r+0x1a8>
80007246:	e0 4a 05 54 	cp.w	r10,1364
8000724a:	e0 88 00 04 	brls	80007252 <_malloc_r+0x1a2>
8000724e:	37 ea       	mov	r10,126
80007250:	c0 48       	rjmp	80007258 <_malloc_r+0x1a8>
80007252:	f2 0a 16 12 	lsr	r10,r9,0x12
80007256:	28 4a       	sub	r10,-124
80007258:	e0 6b 01 08 	mov	r11,264
8000725c:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007260:	68 28       	ld.w	r8,r4[0x8]
80007262:	08 38       	cp.w	r8,r4
80007264:	c0 e1       	brne	80007280 <_malloc_r+0x1d0>
80007266:	76 19       	ld.w	r9,r11[0x4]
80007268:	a3 4a       	asr	r10,0x2
8000726a:	30 1e       	mov	lr,1
8000726c:	fc 0a 09 4a 	lsl	r10,lr,r10
80007270:	f3 ea 10 0a 	or	r10,r9,r10
80007274:	10 99       	mov	r9,r8
80007276:	97 1a       	st.w	r11[0x4],r10
80007278:	c0 a8       	rjmp	8000728c <_malloc_r+0x1dc>
8000727a:	70 28       	ld.w	r8,r8[0x8]
8000727c:	08 38       	cp.w	r8,r4
8000727e:	c0 60       	breq	8000728a <_malloc_r+0x1da>
80007280:	70 1a       	ld.w	r10,r8[0x4]
80007282:	e0 1a ff fc 	andl	r10,0xfffc
80007286:	14 39       	cp.w	r9,r10
80007288:	cf 93       	brcs	8000727a <_malloc_r+0x1ca>
8000728a:	70 39       	ld.w	r9,r8[0xc]
8000728c:	8d 39       	st.w	r6[0xc],r9
8000728e:	8d 28       	st.w	r6[0x8],r8
80007290:	91 36       	st.w	r8[0xc],r6
80007292:	93 26       	st.w	r9[0x8],r6
80007294:	e6 08 14 02 	asr	r8,r3,0x2
80007298:	30 1b       	mov	r11,1
8000729a:	e0 64 01 08 	mov	r4,264
8000729e:	f6 08 09 4b 	lsl	r11,r11,r8
800072a2:	68 18       	ld.w	r8,r4[0x4]
800072a4:	10 3b       	cp.w	r11,r8
800072a6:	e0 8b 00 69 	brhi	80007378 <_malloc_r+0x2c8>
800072aa:	f7 e8 00 09 	and	r9,r11,r8
800072ae:	c0 b1       	brne	800072c4 <_malloc_r+0x214>
800072b0:	e0 13 ff fc 	andl	r3,0xfffc
800072b4:	a1 7b       	lsl	r11,0x1
800072b6:	2f c3       	sub	r3,-4
800072b8:	c0 38       	rjmp	800072be <_malloc_r+0x20e>
800072ba:	2f c3       	sub	r3,-4
800072bc:	a1 7b       	lsl	r11,0x1
800072be:	f7 e8 00 09 	and	r9,r11,r8
800072c2:	cf c0       	breq	800072ba <_malloc_r+0x20a>
800072c4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800072c8:	06 92       	mov	r2,r3
800072ca:	1c 91       	mov	r1,lr
800072cc:	62 36       	ld.w	r6,r1[0xc]
800072ce:	c2 d8       	rjmp	80007328 <_malloc_r+0x278>
800072d0:	6c 1a       	ld.w	r10,r6[0x4]
800072d2:	e0 1a ff fc 	andl	r10,0xfffc
800072d6:	f4 07 01 08 	sub	r8,r10,r7
800072da:	58 f8       	cp.w	r8,15
800072dc:	e0 8a 00 15 	brle	80007306 <_malloc_r+0x256>
800072e0:	6c 3a       	ld.w	r10,r6[0xc]
800072e2:	6c 29       	ld.w	r9,r6[0x8]
800072e4:	95 29       	st.w	r10[0x8],r9
800072e6:	93 3a       	st.w	r9[0xc],r10
800072e8:	0e 99       	mov	r9,r7
800072ea:	ec 07 00 07 	add	r7,r6,r7
800072ee:	a1 a9       	sbr	r9,0x0
800072f0:	99 37       	st.w	r12[0xc],r7
800072f2:	99 27       	st.w	r12[0x8],r7
800072f4:	8d 19       	st.w	r6[0x4],r9
800072f6:	ee 08 09 08 	st.w	r7[r8],r8
800072fa:	8f 2c       	st.w	r7[0x8],r12
800072fc:	8f 3c       	st.w	r7[0xc],r12
800072fe:	a1 a8       	sbr	r8,0x0
80007300:	0a 9c       	mov	r12,r5
80007302:	8f 18       	st.w	r7[0x4],r8
80007304:	c0 d8       	rjmp	8000731e <_malloc_r+0x26e>
80007306:	6c 39       	ld.w	r9,r6[0xc]
80007308:	58 08       	cp.w	r8,0
8000730a:	c0 e5       	brlt	80007326 <_malloc_r+0x276>
8000730c:	ec 0a 00 0a 	add	r10,r6,r10
80007310:	74 18       	ld.w	r8,r10[0x4]
80007312:	a1 a8       	sbr	r8,0x0
80007314:	0a 9c       	mov	r12,r5
80007316:	95 18       	st.w	r10[0x4],r8
80007318:	6c 28       	ld.w	r8,r6[0x8]
8000731a:	93 28       	st.w	r9[0x8],r8
8000731c:	91 39       	st.w	r8[0xc],r9
8000731e:	c0 cd       	rcall	80007536 <__malloc_unlock>
80007320:	ec cc ff f8 	sub	r12,r6,-8
80007324:	d8 32       	popm	r0-r7,pc
80007326:	12 96       	mov	r6,r9
80007328:	02 36       	cp.w	r6,r1
8000732a:	cd 31       	brne	800072d0 <_malloc_r+0x220>
8000732c:	2f f2       	sub	r2,-1
8000732e:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007332:	c0 30       	breq	80007338 <_malloc_r+0x288>
80007334:	2f 81       	sub	r1,-8
80007336:	cc bb       	rjmp	800072cc <_malloc_r+0x21c>
80007338:	1c 98       	mov	r8,lr
8000733a:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000733e:	c0 81       	brne	8000734e <_malloc_r+0x29e>
80007340:	68 19       	ld.w	r9,r4[0x4]
80007342:	f6 08 11 ff 	rsub	r8,r11,-1
80007346:	f3 e8 00 08 	and	r8,r9,r8
8000734a:	89 18       	st.w	r4[0x4],r8
8000734c:	c0 78       	rjmp	8000735a <_malloc_r+0x2aa>
8000734e:	f0 c9 00 08 	sub	r9,r8,8
80007352:	20 13       	sub	r3,1
80007354:	70 08       	ld.w	r8,r8[0x0]
80007356:	12 38       	cp.w	r8,r9
80007358:	cf 10       	breq	8000733a <_malloc_r+0x28a>
8000735a:	a1 7b       	lsl	r11,0x1
8000735c:	68 18       	ld.w	r8,r4[0x4]
8000735e:	10 3b       	cp.w	r11,r8
80007360:	e0 8b 00 0c 	brhi	80007378 <_malloc_r+0x2c8>
80007364:	58 0b       	cp.w	r11,0
80007366:	c0 90       	breq	80007378 <_malloc_r+0x2c8>
80007368:	04 93       	mov	r3,r2
8000736a:	c0 38       	rjmp	80007370 <_malloc_r+0x2c0>
8000736c:	2f c3       	sub	r3,-4
8000736e:	a1 7b       	lsl	r11,0x1
80007370:	f7 e8 00 09 	and	r9,r11,r8
80007374:	ca 81       	brne	800072c4 <_malloc_r+0x214>
80007376:	cf bb       	rjmp	8000736c <_malloc_r+0x2bc>
80007378:	68 23       	ld.w	r3,r4[0x8]
8000737a:	66 12       	ld.w	r2,r3[0x4]
8000737c:	e0 12 ff fc 	andl	r2,0xfffc
80007380:	0e 32       	cp.w	r2,r7
80007382:	5f 39       	srlo	r9
80007384:	e4 07 01 08 	sub	r8,r2,r7
80007388:	58 f8       	cp.w	r8,15
8000738a:	5f aa       	srle	r10
8000738c:	f5 e9 10 09 	or	r9,r10,r9
80007390:	e0 80 00 9a 	breq	800074c4 <_malloc_r+0x414>
80007394:	e0 68 06 30 	mov	r8,1584
80007398:	70 01       	ld.w	r1,r8[0x0]
8000739a:	e0 68 05 14 	mov	r8,1300
8000739e:	2f 01       	sub	r1,-16
800073a0:	70 08       	ld.w	r8,r8[0x0]
800073a2:	0e 01       	add	r1,r7
800073a4:	5b f8       	cp.w	r8,-1
800073a6:	c0 40       	breq	800073ae <_malloc_r+0x2fe>
800073a8:	28 11       	sub	r1,-127
800073aa:	e0 11 ff 80 	andl	r1,0xff80
800073ae:	02 9b       	mov	r11,r1
800073b0:	0a 9c       	mov	r12,r5
800073b2:	e0 a0 05 31 	rcall	80007e14 <_sbrk_r>
800073b6:	18 96       	mov	r6,r12
800073b8:	5b fc       	cp.w	r12,-1
800073ba:	c7 50       	breq	800074a4 <_malloc_r+0x3f4>
800073bc:	e6 02 00 08 	add	r8,r3,r2
800073c0:	10 3c       	cp.w	r12,r8
800073c2:	c0 32       	brcc	800073c8 <_malloc_r+0x318>
800073c4:	08 33       	cp.w	r3,r4
800073c6:	c6 f1       	brne	800074a4 <_malloc_r+0x3f4>
800073c8:	e0 6a 06 34 	mov	r10,1588
800073cc:	74 09       	ld.w	r9,r10[0x0]
800073ce:	e2 09 00 09 	add	r9,r1,r9
800073d2:	95 09       	st.w	r10[0x0],r9
800073d4:	10 36       	cp.w	r6,r8
800073d6:	c0 a1       	brne	800073ea <_malloc_r+0x33a>
800073d8:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800073dc:	c0 71       	brne	800073ea <_malloc_r+0x33a>
800073de:	e2 02 00 02 	add	r2,r1,r2
800073e2:	68 28       	ld.w	r8,r4[0x8]
800073e4:	a1 a2       	sbr	r2,0x0
800073e6:	91 12       	st.w	r8[0x4],r2
800073e8:	c4 f8       	rjmp	80007486 <_malloc_r+0x3d6>
800073ea:	e0 6a 05 14 	mov	r10,1300
800073ee:	74 0b       	ld.w	r11,r10[0x0]
800073f0:	5b fb       	cp.w	r11,-1
800073f2:	c0 31       	brne	800073f8 <_malloc_r+0x348>
800073f4:	95 06       	st.w	r10[0x0],r6
800073f6:	c0 78       	rjmp	80007404 <_malloc_r+0x354>
800073f8:	ec 09 00 09 	add	r9,r6,r9
800073fc:	e0 6a 06 34 	mov	r10,1588
80007400:	10 19       	sub	r9,r8
80007402:	95 09       	st.w	r10[0x0],r9
80007404:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007408:	f0 09 11 08 	rsub	r9,r8,8
8000740c:	58 08       	cp.w	r8,0
8000740e:	f2 08 17 10 	movne	r8,r9
80007412:	ed d8 e1 06 	addne	r6,r6,r8
80007416:	28 08       	sub	r8,-128
80007418:	ec 01 00 01 	add	r1,r6,r1
8000741c:	0a 9c       	mov	r12,r5
8000741e:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007422:	f0 01 01 01 	sub	r1,r8,r1
80007426:	02 9b       	mov	r11,r1
80007428:	e0 a0 04 f6 	rcall	80007e14 <_sbrk_r>
8000742c:	e0 68 06 34 	mov	r8,1588
80007430:	5b fc       	cp.w	r12,-1
80007432:	ec 0c 17 00 	moveq	r12,r6
80007436:	f9 b1 00 00 	moveq	r1,0
8000743a:	70 09       	ld.w	r9,r8[0x0]
8000743c:	0c 1c       	sub	r12,r6
8000743e:	89 26       	st.w	r4[0x8],r6
80007440:	02 0c       	add	r12,r1
80007442:	12 01       	add	r1,r9
80007444:	a1 ac       	sbr	r12,0x0
80007446:	91 01       	st.w	r8[0x0],r1
80007448:	8d 1c       	st.w	r6[0x4],r12
8000744a:	08 33       	cp.w	r3,r4
8000744c:	c1 d0       	breq	80007486 <_malloc_r+0x3d6>
8000744e:	58 f2       	cp.w	r2,15
80007450:	e0 8b 00 05 	brhi	8000745a <_malloc_r+0x3aa>
80007454:	30 18       	mov	r8,1
80007456:	8d 18       	st.w	r6[0x4],r8
80007458:	c2 68       	rjmp	800074a4 <_malloc_r+0x3f4>
8000745a:	30 59       	mov	r9,5
8000745c:	20 c2       	sub	r2,12
8000745e:	e0 12 ff f8 	andl	r2,0xfff8
80007462:	e6 02 00 08 	add	r8,r3,r2
80007466:	91 29       	st.w	r8[0x8],r9
80007468:	91 19       	st.w	r8[0x4],r9
8000746a:	66 18       	ld.w	r8,r3[0x4]
8000746c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007470:	e5 e8 10 08 	or	r8,r2,r8
80007474:	87 18       	st.w	r3[0x4],r8
80007476:	58 f2       	cp.w	r2,15
80007478:	e0 88 00 07 	brls	80007486 <_malloc_r+0x3d6>
8000747c:	e6 cb ff f8 	sub	r11,r3,-8
80007480:	0a 9c       	mov	r12,r5
80007482:	fe b0 fb 71 	rcall	80006b64 <_free_r>
80007486:	e0 69 06 2c 	mov	r9,1580
8000748a:	72 0a       	ld.w	r10,r9[0x0]
8000748c:	e0 68 06 34 	mov	r8,1588
80007490:	70 08       	ld.w	r8,r8[0x0]
80007492:	14 38       	cp.w	r8,r10
80007494:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007498:	e0 69 06 28 	mov	r9,1576
8000749c:	72 0a       	ld.w	r10,r9[0x0]
8000749e:	14 38       	cp.w	r8,r10
800074a0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800074a4:	68 28       	ld.w	r8,r4[0x8]
800074a6:	70 18       	ld.w	r8,r8[0x4]
800074a8:	e0 18 ff fc 	andl	r8,0xfffc
800074ac:	0e 38       	cp.w	r8,r7
800074ae:	5f 39       	srlo	r9
800074b0:	0e 18       	sub	r8,r7
800074b2:	58 f8       	cp.w	r8,15
800074b4:	5f aa       	srle	r10
800074b6:	f5 e9 10 09 	or	r9,r10,r9
800074ba:	c0 50       	breq	800074c4 <_malloc_r+0x414>
800074bc:	0a 9c       	mov	r12,r5
800074be:	c3 cc       	rcall	80007536 <__malloc_unlock>
800074c0:	d8 3a       	popm	r0-r7,pc,r12=0
800074c2:	d7 03       	nop
800074c4:	68 26       	ld.w	r6,r4[0x8]
800074c6:	a1 a8       	sbr	r8,0x0
800074c8:	0e 99       	mov	r9,r7
800074ca:	a1 a9       	sbr	r9,0x0
800074cc:	8d 19       	st.w	r6[0x4],r9
800074ce:	ec 07 00 07 	add	r7,r6,r7
800074d2:	0a 9c       	mov	r12,r5
800074d4:	89 27       	st.w	r4[0x8],r7
800074d6:	8f 18       	st.w	r7[0x4],r8
800074d8:	c2 fc       	rcall	80007536 <__malloc_unlock>
800074da:	ec cc ff f8 	sub	r12,r6,-8
800074de:	d8 32       	popm	r0-r7,pc

800074e0 <memchr>:
800074e0:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800074e4:	c0 68       	rjmp	800074f0 <memchr+0x10>
800074e6:	20 1a       	sub	r10,1
800074e8:	19 88       	ld.ub	r8,r12[0x0]
800074ea:	16 38       	cp.w	r8,r11
800074ec:	5e 0c       	reteq	r12
800074ee:	2f fc       	sub	r12,-1
800074f0:	58 0a       	cp.w	r10,0
800074f2:	cf a1       	brne	800074e6 <memchr+0x6>
800074f4:	5e fa       	retal	r10

800074f6 <memmove>:
800074f6:	d4 01       	pushm	lr
800074f8:	18 3b       	cp.w	r11,r12
800074fa:	c1 92       	brcc	8000752c <memmove+0x36>
800074fc:	f6 0a 00 09 	add	r9,r11,r10
80007500:	12 3c       	cp.w	r12,r9
80007502:	c1 52       	brcc	8000752c <memmove+0x36>
80007504:	f8 0a 00 0b 	add	r11,r12,r10
80007508:	30 08       	mov	r8,0
8000750a:	c0 68       	rjmp	80007516 <memmove+0x20>
8000750c:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007510:	20 1a       	sub	r10,1
80007512:	f6 08 0b 0e 	st.b	r11[r8],lr
80007516:	20 18       	sub	r8,1
80007518:	58 0a       	cp.w	r10,0
8000751a:	cf 91       	brne	8000750c <memmove+0x16>
8000751c:	d8 02       	popm	pc
8000751e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007522:	20 1a       	sub	r10,1
80007524:	f8 08 0b 09 	st.b	r12[r8],r9
80007528:	2f f8       	sub	r8,-1
8000752a:	c0 28       	rjmp	8000752e <memmove+0x38>
8000752c:	30 08       	mov	r8,0
8000752e:	58 0a       	cp.w	r10,0
80007530:	cf 71       	brne	8000751e <memmove+0x28>
80007532:	d8 02       	popm	pc

80007534 <__malloc_lock>:
80007534:	5e fc       	retal	r12

80007536 <__malloc_unlock>:
80007536:	5e fc       	retal	r12

80007538 <__hi0bits>:
80007538:	18 98       	mov	r8,r12
8000753a:	e0 1c 00 00 	andl	r12,0x0
8000753e:	f0 09 15 10 	lsl	r9,r8,0x10
80007542:	58 0c       	cp.w	r12,0
80007544:	f2 08 17 00 	moveq	r8,r9
80007548:	f9 bc 00 10 	moveq	r12,16
8000754c:	f9 bc 01 00 	movne	r12,0
80007550:	10 9a       	mov	r10,r8
80007552:	f0 09 15 08 	lsl	r9,r8,0x8
80007556:	e6 1a ff 00 	andh	r10,0xff00,COH
8000755a:	f7 bc 00 f8 	subeq	r12,-8
8000755e:	f2 08 17 00 	moveq	r8,r9
80007562:	10 9a       	mov	r10,r8
80007564:	f0 09 15 04 	lsl	r9,r8,0x4
80007568:	e6 1a f0 00 	andh	r10,0xf000,COH
8000756c:	f7 bc 00 fc 	subeq	r12,-4
80007570:	f2 08 17 00 	moveq	r8,r9
80007574:	10 9a       	mov	r10,r8
80007576:	f0 09 15 02 	lsl	r9,r8,0x2
8000757a:	e6 1a c0 00 	andh	r10,0xc000,COH
8000757e:	f7 bc 00 fe 	subeq	r12,-2
80007582:	f2 08 17 00 	moveq	r8,r9
80007586:	58 08       	cp.w	r8,0
80007588:	5e 5c       	retlt	r12
8000758a:	ed b8 00 1e 	bld	r8,0x1e
8000758e:	f9 bc 01 20 	movne	r12,32
80007592:	f7 bc 00 ff 	subeq	r12,-1
80007596:	5e fc       	retal	r12

80007598 <__lo0bits>:
80007598:	18 99       	mov	r9,r12
8000759a:	78 08       	ld.w	r8,r12[0x0]
8000759c:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800075a0:	c1 50       	breq	800075ca <__lo0bits+0x32>
800075a2:	ed b8 00 00 	bld	r8,0x0
800075a6:	c0 21       	brne	800075aa <__lo0bits+0x12>
800075a8:	5e fd       	retal	0
800075aa:	10 9b       	mov	r11,r8
800075ac:	f0 0a 16 01 	lsr	r10,r8,0x1
800075b0:	e2 1b 00 02 	andl	r11,0x2,COH
800075b4:	a3 88       	lsr	r8,0x2
800075b6:	58 0b       	cp.w	r11,0
800075b8:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800075bc:	f9 bc 01 01 	movne	r12,1
800075c0:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800075c4:	f9 bc 00 02 	moveq	r12,2
800075c8:	5e fc       	retal	r12
800075ca:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800075ce:	f0 0b 16 10 	lsr	r11,r8,0x10
800075d2:	58 0a       	cp.w	r10,0
800075d4:	f6 08 17 00 	moveq	r8,r11
800075d8:	f9 bc 00 10 	moveq	r12,16
800075dc:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800075e0:	f0 0a 16 08 	lsr	r10,r8,0x8
800075e4:	58 0b       	cp.w	r11,0
800075e6:	f7 bc 00 f8 	subeq	r12,-8
800075ea:	f4 08 17 00 	moveq	r8,r10
800075ee:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800075f2:	f0 0a 16 04 	lsr	r10,r8,0x4
800075f6:	58 0b       	cp.w	r11,0
800075f8:	f7 bc 00 fc 	subeq	r12,-4
800075fc:	f4 08 17 00 	moveq	r8,r10
80007600:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007604:	f0 0a 16 02 	lsr	r10,r8,0x2
80007608:	58 0b       	cp.w	r11,0
8000760a:	f7 bc 00 fe 	subeq	r12,-2
8000760e:	f4 08 17 00 	moveq	r8,r10
80007612:	ed b8 00 00 	bld	r8,0x0
80007616:	c0 60       	breq	80007622 <__lo0bits+0x8a>
80007618:	a1 98       	lsr	r8,0x1
8000761a:	c0 31       	brne	80007620 <__lo0bits+0x88>
8000761c:	32 0c       	mov	r12,32
8000761e:	5e fc       	retal	r12
80007620:	2f fc       	sub	r12,-1
80007622:	93 08       	st.w	r9[0x0],r8
80007624:	5e fc       	retal	r12

80007626 <__mcmp>:
80007626:	d4 01       	pushm	lr
80007628:	18 98       	mov	r8,r12
8000762a:	76 49       	ld.w	r9,r11[0x10]
8000762c:	78 4c       	ld.w	r12,r12[0x10]
8000762e:	12 1c       	sub	r12,r9
80007630:	c1 31       	brne	80007656 <__mcmp+0x30>
80007632:	2f b9       	sub	r9,-5
80007634:	a3 69       	lsl	r9,0x2
80007636:	12 0b       	add	r11,r9
80007638:	f0 09 00 09 	add	r9,r8,r9
8000763c:	2e c8       	sub	r8,-20
8000763e:	13 4e       	ld.w	lr,--r9
80007640:	17 4a       	ld.w	r10,--r11
80007642:	14 3e       	cp.w	lr,r10
80007644:	c0 60       	breq	80007650 <__mcmp+0x2a>
80007646:	f9 bc 03 ff 	movlo	r12,-1
8000764a:	f9 bc 02 01 	movhs	r12,1
8000764e:	d8 02       	popm	pc
80007650:	10 39       	cp.w	r9,r8
80007652:	fe 9b ff f6 	brhi	8000763e <__mcmp+0x18>
80007656:	d8 02       	popm	pc

80007658 <_Bfree>:
80007658:	d4 21       	pushm	r4-r7,lr
8000765a:	18 97       	mov	r7,r12
8000765c:	16 95       	mov	r5,r11
8000765e:	78 96       	ld.w	r6,r12[0x24]
80007660:	58 06       	cp.w	r6,0
80007662:	c0 91       	brne	80007674 <_Bfree+0x1c>
80007664:	31 0c       	mov	r12,16
80007666:	fe b0 fd 1d 	rcall	800070a0 <malloc>
8000766a:	99 36       	st.w	r12[0xc],r6
8000766c:	8f 9c       	st.w	r7[0x24],r12
8000766e:	99 16       	st.w	r12[0x4],r6
80007670:	99 26       	st.w	r12[0x8],r6
80007672:	99 06       	st.w	r12[0x0],r6
80007674:	58 05       	cp.w	r5,0
80007676:	c0 90       	breq	80007688 <_Bfree+0x30>
80007678:	6a 19       	ld.w	r9,r5[0x4]
8000767a:	6e 98       	ld.w	r8,r7[0x24]
8000767c:	70 38       	ld.w	r8,r8[0xc]
8000767e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007682:	8b 0a       	st.w	r5[0x0],r10
80007684:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007688:	d8 22       	popm	r4-r7,pc
8000768a:	d7 03       	nop

8000768c <_Balloc>:
8000768c:	d4 21       	pushm	r4-r7,lr
8000768e:	18 97       	mov	r7,r12
80007690:	16 96       	mov	r6,r11
80007692:	78 95       	ld.w	r5,r12[0x24]
80007694:	58 05       	cp.w	r5,0
80007696:	c0 91       	brne	800076a8 <_Balloc+0x1c>
80007698:	31 0c       	mov	r12,16
8000769a:	fe b0 fd 03 	rcall	800070a0 <malloc>
8000769e:	99 35       	st.w	r12[0xc],r5
800076a0:	8f 9c       	st.w	r7[0x24],r12
800076a2:	99 15       	st.w	r12[0x4],r5
800076a4:	99 25       	st.w	r12[0x8],r5
800076a6:	99 05       	st.w	r12[0x0],r5
800076a8:	6e 95       	ld.w	r5,r7[0x24]
800076aa:	6a 38       	ld.w	r8,r5[0xc]
800076ac:	58 08       	cp.w	r8,0
800076ae:	c0 b1       	brne	800076c4 <_Balloc+0x38>
800076b0:	31 0a       	mov	r10,16
800076b2:	30 4b       	mov	r11,4
800076b4:	0e 9c       	mov	r12,r7
800076b6:	e0 a0 04 93 	rcall	80007fdc <_calloc_r>
800076ba:	8b 3c       	st.w	r5[0xc],r12
800076bc:	6e 98       	ld.w	r8,r7[0x24]
800076be:	70 3c       	ld.w	r12,r8[0xc]
800076c0:	58 0c       	cp.w	r12,0
800076c2:	c1 b0       	breq	800076f8 <_Balloc+0x6c>
800076c4:	6e 98       	ld.w	r8,r7[0x24]
800076c6:	70 38       	ld.w	r8,r8[0xc]
800076c8:	f0 06 00 28 	add	r8,r8,r6<<0x2
800076cc:	70 0c       	ld.w	r12,r8[0x0]
800076ce:	58 0c       	cp.w	r12,0
800076d0:	c0 40       	breq	800076d8 <_Balloc+0x4c>
800076d2:	78 09       	ld.w	r9,r12[0x0]
800076d4:	91 09       	st.w	r8[0x0],r9
800076d6:	c0 e8       	rjmp	800076f2 <_Balloc+0x66>
800076d8:	0e 9c       	mov	r12,r7
800076da:	30 17       	mov	r7,1
800076dc:	0e 9b       	mov	r11,r7
800076de:	ee 06 09 47 	lsl	r7,r7,r6
800076e2:	ee ca ff fb 	sub	r10,r7,-5
800076e6:	a3 6a       	lsl	r10,0x2
800076e8:	e0 a0 04 7a 	rcall	80007fdc <_calloc_r>
800076ec:	c0 60       	breq	800076f8 <_Balloc+0x6c>
800076ee:	99 16       	st.w	r12[0x4],r6
800076f0:	99 27       	st.w	r12[0x8],r7
800076f2:	30 08       	mov	r8,0
800076f4:	99 38       	st.w	r12[0xc],r8
800076f6:	99 48       	st.w	r12[0x10],r8
800076f8:	d8 22       	popm	r4-r7,pc
800076fa:	d7 03       	nop

800076fc <__d2b>:
800076fc:	d4 31       	pushm	r0-r7,lr
800076fe:	20 2d       	sub	sp,8
80007700:	16 93       	mov	r3,r11
80007702:	12 96       	mov	r6,r9
80007704:	10 95       	mov	r5,r8
80007706:	14 92       	mov	r2,r10
80007708:	30 1b       	mov	r11,1
8000770a:	cc 1f       	rcall	8000768c <_Balloc>
8000770c:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007710:	50 09       	stdsp	sp[0x0],r9
80007712:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007716:	b5 a9       	sbr	r9,0x14
80007718:	f0 01 16 14 	lsr	r1,r8,0x14
8000771c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007720:	18 94       	mov	r4,r12
80007722:	58 02       	cp.w	r2,0
80007724:	c1 d0       	breq	8000775e <__d2b+0x62>
80007726:	fa cc ff f8 	sub	r12,sp,-8
8000772a:	18 d2       	st.w	--r12,r2
8000772c:	c3 6f       	rcall	80007598 <__lo0bits>
8000772e:	40 18       	lddsp	r8,sp[0x4]
80007730:	c0 d0       	breq	8000774a <__d2b+0x4e>
80007732:	40 09       	lddsp	r9,sp[0x0]
80007734:	f8 0a 11 20 	rsub	r10,r12,32
80007738:	f2 0a 09 4a 	lsl	r10,r9,r10
8000773c:	f5 e8 10 08 	or	r8,r10,r8
80007740:	89 58       	st.w	r4[0x14],r8
80007742:	f2 0c 0a 49 	lsr	r9,r9,r12
80007746:	50 09       	stdsp	sp[0x0],r9
80007748:	c0 28       	rjmp	8000774c <__d2b+0x50>
8000774a:	89 58       	st.w	r4[0x14],r8
8000774c:	40 08       	lddsp	r8,sp[0x0]
8000774e:	58 08       	cp.w	r8,0
80007750:	f9 b3 01 02 	movne	r3,2
80007754:	f9 b3 00 01 	moveq	r3,1
80007758:	89 68       	st.w	r4[0x18],r8
8000775a:	89 43       	st.w	r4[0x10],r3
8000775c:	c0 88       	rjmp	8000776c <__d2b+0x70>
8000775e:	1a 9c       	mov	r12,sp
80007760:	c1 cf       	rcall	80007598 <__lo0bits>
80007762:	30 13       	mov	r3,1
80007764:	40 08       	lddsp	r8,sp[0x0]
80007766:	2e 0c       	sub	r12,-32
80007768:	89 43       	st.w	r4[0x10],r3
8000776a:	89 58       	st.w	r4[0x14],r8
8000776c:	58 01       	cp.w	r1,0
8000776e:	c0 90       	breq	80007780 <__d2b+0x84>
80007770:	e2 c1 04 33 	sub	r1,r1,1075
80007774:	18 01       	add	r1,r12
80007776:	8d 01       	st.w	r6[0x0],r1
80007778:	f8 0c 11 35 	rsub	r12,r12,53
8000777c:	8b 0c       	st.w	r5[0x0],r12
8000777e:	c0 c8       	rjmp	80007796 <__d2b+0x9a>
80007780:	e6 c8 ff fc 	sub	r8,r3,-4
80007784:	f8 cc 04 32 	sub	r12,r12,1074
80007788:	a5 73       	lsl	r3,0x5
8000778a:	8d 0c       	st.w	r6[0x0],r12
8000778c:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007790:	cd 4e       	rcall	80007538 <__hi0bits>
80007792:	18 13       	sub	r3,r12
80007794:	8b 03       	st.w	r5[0x0],r3
80007796:	08 9c       	mov	r12,r4
80007798:	2f ed       	sub	sp,-8
8000779a:	d8 32       	popm	r0-r7,pc

8000779c <__mdiff>:
8000779c:	d4 31       	pushm	r0-r7,lr
8000779e:	74 48       	ld.w	r8,r10[0x10]
800077a0:	76 45       	ld.w	r5,r11[0x10]
800077a2:	16 97       	mov	r7,r11
800077a4:	14 96       	mov	r6,r10
800077a6:	10 15       	sub	r5,r8
800077a8:	c1 31       	brne	800077ce <__mdiff+0x32>
800077aa:	2f b8       	sub	r8,-5
800077ac:	ee ce ff ec 	sub	lr,r7,-20
800077b0:	a3 68       	lsl	r8,0x2
800077b2:	f4 08 00 0b 	add	r11,r10,r8
800077b6:	ee 08 00 08 	add	r8,r7,r8
800077ba:	11 4a       	ld.w	r10,--r8
800077bc:	17 49       	ld.w	r9,--r11
800077be:	12 3a       	cp.w	r10,r9
800077c0:	c0 30       	breq	800077c6 <__mdiff+0x2a>
800077c2:	c0 e2       	brcc	800077de <__mdiff+0x42>
800077c4:	c0 78       	rjmp	800077d2 <__mdiff+0x36>
800077c6:	1c 38       	cp.w	r8,lr
800077c8:	fe 9b ff f9 	brhi	800077ba <__mdiff+0x1e>
800077cc:	c4 98       	rjmp	8000785e <__mdiff+0xc2>
800077ce:	58 05       	cp.w	r5,0
800077d0:	c0 64       	brge	800077dc <__mdiff+0x40>
800077d2:	0e 98       	mov	r8,r7
800077d4:	30 15       	mov	r5,1
800077d6:	0c 97       	mov	r7,r6
800077d8:	10 96       	mov	r6,r8
800077da:	c0 28       	rjmp	800077de <__mdiff+0x42>
800077dc:	30 05       	mov	r5,0
800077de:	6e 1b       	ld.w	r11,r7[0x4]
800077e0:	c5 6f       	rcall	8000768c <_Balloc>
800077e2:	6e 49       	ld.w	r9,r7[0x10]
800077e4:	6c 44       	ld.w	r4,r6[0x10]
800077e6:	99 35       	st.w	r12[0xc],r5
800077e8:	2f b4       	sub	r4,-5
800077ea:	f2 c5 ff fb 	sub	r5,r9,-5
800077ee:	ec 04 00 24 	add	r4,r6,r4<<0x2
800077f2:	ee 05 00 25 	add	r5,r7,r5<<0x2
800077f6:	2e c6       	sub	r6,-20
800077f8:	2e c7       	sub	r7,-20
800077fa:	f8 c8 ff ec 	sub	r8,r12,-20
800077fe:	30 0a       	mov	r10,0
80007800:	0f 0e       	ld.w	lr,r7++
80007802:	0d 0b       	ld.w	r11,r6++
80007804:	fc 02 16 10 	lsr	r2,lr,0x10
80007808:	f6 03 16 10 	lsr	r3,r11,0x10
8000780c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007810:	e4 03 01 03 	sub	r3,r2,r3
80007814:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007818:	fc 0b 01 0b 	sub	r11,lr,r11
8000781c:	f6 0a 00 0a 	add	r10,r11,r10
80007820:	b0 1a       	st.h	r8[0x2],r10
80007822:	b1 4a       	asr	r10,0x10
80007824:	e6 0a 00 0a 	add	r10,r3,r10
80007828:	b0 0a       	st.h	r8[0x0],r10
8000782a:	2f c8       	sub	r8,-4
8000782c:	b1 4a       	asr	r10,0x10
8000782e:	08 36       	cp.w	r6,r4
80007830:	ce 83       	brcs	80007800 <__mdiff+0x64>
80007832:	c0 d8       	rjmp	8000784c <__mdiff+0xb0>
80007834:	0f 0b       	ld.w	r11,r7++
80007836:	f6 0e 16 10 	lsr	lr,r11,0x10
8000783a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000783e:	16 0a       	add	r10,r11
80007840:	b0 1a       	st.h	r8[0x2],r10
80007842:	b1 4a       	asr	r10,0x10
80007844:	1c 0a       	add	r10,lr
80007846:	b0 0a       	st.h	r8[0x0],r10
80007848:	2f c8       	sub	r8,-4
8000784a:	b1 4a       	asr	r10,0x10
8000784c:	0a 37       	cp.w	r7,r5
8000784e:	cf 33       	brcs	80007834 <__mdiff+0x98>
80007850:	c0 28       	rjmp	80007854 <__mdiff+0xb8>
80007852:	20 19       	sub	r9,1
80007854:	11 4a       	ld.w	r10,--r8
80007856:	58 0a       	cp.w	r10,0
80007858:	cf d0       	breq	80007852 <__mdiff+0xb6>
8000785a:	99 49       	st.w	r12[0x10],r9
8000785c:	d8 32       	popm	r0-r7,pc
8000785e:	30 0b       	mov	r11,0
80007860:	c1 6f       	rcall	8000768c <_Balloc>
80007862:	30 18       	mov	r8,1
80007864:	99 48       	st.w	r12[0x10],r8
80007866:	30 08       	mov	r8,0
80007868:	99 58       	st.w	r12[0x14],r8
8000786a:	d8 32       	popm	r0-r7,pc

8000786c <__lshift>:
8000786c:	d4 31       	pushm	r0-r7,lr
8000786e:	16 97       	mov	r7,r11
80007870:	76 46       	ld.w	r6,r11[0x10]
80007872:	f4 02 14 05 	asr	r2,r10,0x5
80007876:	2f f6       	sub	r6,-1
80007878:	14 93       	mov	r3,r10
8000787a:	18 94       	mov	r4,r12
8000787c:	04 06       	add	r6,r2
8000787e:	76 1b       	ld.w	r11,r11[0x4]
80007880:	6e 28       	ld.w	r8,r7[0x8]
80007882:	c0 38       	rjmp	80007888 <__lshift+0x1c>
80007884:	2f fb       	sub	r11,-1
80007886:	a1 78       	lsl	r8,0x1
80007888:	10 36       	cp.w	r6,r8
8000788a:	fe 99 ff fd 	brgt	80007884 <__lshift+0x18>
8000788e:	08 9c       	mov	r12,r4
80007890:	cf ee       	rcall	8000768c <_Balloc>
80007892:	30 09       	mov	r9,0
80007894:	18 95       	mov	r5,r12
80007896:	f8 c8 ff ec 	sub	r8,r12,-20
8000789a:	12 9a       	mov	r10,r9
8000789c:	c0 38       	rjmp	800078a2 <__lshift+0x36>
8000789e:	10 aa       	st.w	r8++,r10
800078a0:	2f f9       	sub	r9,-1
800078a2:	04 39       	cp.w	r9,r2
800078a4:	cf d5       	brlt	8000789e <__lshift+0x32>
800078a6:	6e 4b       	ld.w	r11,r7[0x10]
800078a8:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800078ac:	2f bb       	sub	r11,-5
800078ae:	ee c9 ff ec 	sub	r9,r7,-20
800078b2:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800078b6:	58 03       	cp.w	r3,0
800078b8:	c1 30       	breq	800078de <__lshift+0x72>
800078ba:	e6 0c 11 20 	rsub	r12,r3,32
800078be:	30 0a       	mov	r10,0
800078c0:	72 02       	ld.w	r2,r9[0x0]
800078c2:	e4 03 09 42 	lsl	r2,r2,r3
800078c6:	04 4a       	or	r10,r2
800078c8:	10 aa       	st.w	r8++,r10
800078ca:	13 0a       	ld.w	r10,r9++
800078cc:	f4 0c 0a 4a 	lsr	r10,r10,r12
800078d0:	16 39       	cp.w	r9,r11
800078d2:	cf 73       	brcs	800078c0 <__lshift+0x54>
800078d4:	91 0a       	st.w	r8[0x0],r10
800078d6:	58 0a       	cp.w	r10,0
800078d8:	c0 70       	breq	800078e6 <__lshift+0x7a>
800078da:	2f f6       	sub	r6,-1
800078dc:	c0 58       	rjmp	800078e6 <__lshift+0x7a>
800078de:	13 0a       	ld.w	r10,r9++
800078e0:	10 aa       	st.w	r8++,r10
800078e2:	16 39       	cp.w	r9,r11
800078e4:	cf d3       	brcs	800078de <__lshift+0x72>
800078e6:	08 9c       	mov	r12,r4
800078e8:	20 16       	sub	r6,1
800078ea:	0e 9b       	mov	r11,r7
800078ec:	8b 46       	st.w	r5[0x10],r6
800078ee:	cb 5e       	rcall	80007658 <_Bfree>
800078f0:	0a 9c       	mov	r12,r5
800078f2:	d8 32       	popm	r0-r7,pc

800078f4 <__multiply>:
800078f4:	d4 31       	pushm	r0-r7,lr
800078f6:	20 2d       	sub	sp,8
800078f8:	76 49       	ld.w	r9,r11[0x10]
800078fa:	74 48       	ld.w	r8,r10[0x10]
800078fc:	16 96       	mov	r6,r11
800078fe:	14 95       	mov	r5,r10
80007900:	10 39       	cp.w	r9,r8
80007902:	ec 08 17 50 	movlt	r8,r6
80007906:	ea 06 17 50 	movlt	r6,r5
8000790a:	f0 05 17 50 	movlt	r5,r8
8000790e:	6c 28       	ld.w	r8,r6[0x8]
80007910:	76 43       	ld.w	r3,r11[0x10]
80007912:	74 42       	ld.w	r2,r10[0x10]
80007914:	76 1b       	ld.w	r11,r11[0x4]
80007916:	e4 03 00 07 	add	r7,r2,r3
8000791a:	10 37       	cp.w	r7,r8
8000791c:	f7 bb 09 ff 	subgt	r11,-1
80007920:	cb 6e       	rcall	8000768c <_Balloc>
80007922:	ee c4 ff fb 	sub	r4,r7,-5
80007926:	f8 c9 ff ec 	sub	r9,r12,-20
8000792a:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000792e:	30 0a       	mov	r10,0
80007930:	12 98       	mov	r8,r9
80007932:	c0 28       	rjmp	80007936 <__multiply+0x42>
80007934:	10 aa       	st.w	r8++,r10
80007936:	08 38       	cp.w	r8,r4
80007938:	cf e3       	brcs	80007934 <__multiply+0x40>
8000793a:	2f b3       	sub	r3,-5
8000793c:	2f b2       	sub	r2,-5
8000793e:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007942:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007946:	ec cb ff ec 	sub	r11,r6,-20
8000794a:	50 12       	stdsp	sp[0x4],r2
8000794c:	ea ca ff ec 	sub	r10,r5,-20
80007950:	c4 48       	rjmp	800079d8 <__multiply+0xe4>
80007952:	94 95       	ld.uh	r5,r10[0x2]
80007954:	58 05       	cp.w	r5,0
80007956:	c2 00       	breq	80007996 <__multiply+0xa2>
80007958:	12 98       	mov	r8,r9
8000795a:	16 96       	mov	r6,r11
8000795c:	30 0e       	mov	lr,0
8000795e:	50 09       	stdsp	sp[0x0],r9
80007960:	0d 02       	ld.w	r2,r6++
80007962:	e4 00 16 10 	lsr	r0,r2,0x10
80007966:	70 01       	ld.w	r1,r8[0x0]
80007968:	70 09       	ld.w	r9,r8[0x0]
8000796a:	b1 81       	lsr	r1,0x10
8000796c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007970:	e0 05 03 41 	mac	r1,r0,r5
80007974:	ab 32       	mul	r2,r5
80007976:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000797a:	00 02       	add	r2,r0
8000797c:	e4 0e 00 0e 	add	lr,r2,lr
80007980:	b0 1e       	st.h	r8[0x2],lr
80007982:	b1 8e       	lsr	lr,0x10
80007984:	1c 01       	add	r1,lr
80007986:	b0 01       	st.h	r8[0x0],r1
80007988:	e2 0e 16 10 	lsr	lr,r1,0x10
8000798c:	2f c8       	sub	r8,-4
8000798e:	06 36       	cp.w	r6,r3
80007990:	ce 83       	brcs	80007960 <__multiply+0x6c>
80007992:	40 09       	lddsp	r9,sp[0x0]
80007994:	91 0e       	st.w	r8[0x0],lr
80007996:	94 86       	ld.uh	r6,r10[0x0]
80007998:	58 06       	cp.w	r6,0
8000799a:	c1 d0       	breq	800079d4 <__multiply+0xe0>
8000799c:	72 02       	ld.w	r2,r9[0x0]
8000799e:	12 98       	mov	r8,r9
800079a0:	16 9e       	mov	lr,r11
800079a2:	30 05       	mov	r5,0
800079a4:	b0 12       	st.h	r8[0x2],r2
800079a6:	1d 01       	ld.w	r1,lr++
800079a8:	90 82       	ld.uh	r2,r8[0x0]
800079aa:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800079ae:	ad 30       	mul	r0,r6
800079b0:	e0 02 00 02 	add	r2,r0,r2
800079b4:	e4 05 00 05 	add	r5,r2,r5
800079b8:	b0 05       	st.h	r8[0x0],r5
800079ba:	b1 85       	lsr	r5,0x10
800079bc:	b1 81       	lsr	r1,0x10
800079be:	2f c8       	sub	r8,-4
800079c0:	ad 31       	mul	r1,r6
800079c2:	90 92       	ld.uh	r2,r8[0x2]
800079c4:	e2 02 00 02 	add	r2,r1,r2
800079c8:	0a 02       	add	r2,r5
800079ca:	e4 05 16 10 	lsr	r5,r2,0x10
800079ce:	06 3e       	cp.w	lr,r3
800079d0:	ce a3       	brcs	800079a4 <__multiply+0xb0>
800079d2:	91 02       	st.w	r8[0x0],r2
800079d4:	2f ca       	sub	r10,-4
800079d6:	2f c9       	sub	r9,-4
800079d8:	40 18       	lddsp	r8,sp[0x4]
800079da:	10 3a       	cp.w	r10,r8
800079dc:	cb b3       	brcs	80007952 <__multiply+0x5e>
800079de:	c0 28       	rjmp	800079e2 <__multiply+0xee>
800079e0:	20 17       	sub	r7,1
800079e2:	58 07       	cp.w	r7,0
800079e4:	e0 8a 00 05 	brle	800079ee <__multiply+0xfa>
800079e8:	09 48       	ld.w	r8,--r4
800079ea:	58 08       	cp.w	r8,0
800079ec:	cf a0       	breq	800079e0 <__multiply+0xec>
800079ee:	99 47       	st.w	r12[0x10],r7
800079f0:	2f ed       	sub	sp,-8
800079f2:	d8 32       	popm	r0-r7,pc

800079f4 <__i2b>:
800079f4:	d4 21       	pushm	r4-r7,lr
800079f6:	16 97       	mov	r7,r11
800079f8:	30 1b       	mov	r11,1
800079fa:	c4 9e       	rcall	8000768c <_Balloc>
800079fc:	30 19       	mov	r9,1
800079fe:	99 57       	st.w	r12[0x14],r7
80007a00:	99 49       	st.w	r12[0x10],r9
80007a02:	d8 22       	popm	r4-r7,pc

80007a04 <__multadd>:
80007a04:	d4 31       	pushm	r0-r7,lr
80007a06:	30 08       	mov	r8,0
80007a08:	12 95       	mov	r5,r9
80007a0a:	16 97       	mov	r7,r11
80007a0c:	18 96       	mov	r6,r12
80007a0e:	76 44       	ld.w	r4,r11[0x10]
80007a10:	f6 c9 ff ec 	sub	r9,r11,-20
80007a14:	72 0b       	ld.w	r11,r9[0x0]
80007a16:	f6 0c 16 10 	lsr	r12,r11,0x10
80007a1a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007a1e:	f4 0c 02 4c 	mul	r12,r10,r12
80007a22:	f4 0b 03 45 	mac	r5,r10,r11
80007a26:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007a2a:	b1 85       	lsr	r5,0x10
80007a2c:	18 05       	add	r5,r12
80007a2e:	ea 0c 15 10 	lsl	r12,r5,0x10
80007a32:	f8 0b 00 0b 	add	r11,r12,r11
80007a36:	12 ab       	st.w	r9++,r11
80007a38:	2f f8       	sub	r8,-1
80007a3a:	b1 85       	lsr	r5,0x10
80007a3c:	08 38       	cp.w	r8,r4
80007a3e:	ce b5       	brlt	80007a14 <__multadd+0x10>
80007a40:	58 05       	cp.w	r5,0
80007a42:	c1 c0       	breq	80007a7a <__multadd+0x76>
80007a44:	6e 28       	ld.w	r8,r7[0x8]
80007a46:	10 34       	cp.w	r4,r8
80007a48:	c1 35       	brlt	80007a6e <__multadd+0x6a>
80007a4a:	6e 1b       	ld.w	r11,r7[0x4]
80007a4c:	0c 9c       	mov	r12,r6
80007a4e:	2f fb       	sub	r11,-1
80007a50:	c1 ee       	rcall	8000768c <_Balloc>
80007a52:	6e 4a       	ld.w	r10,r7[0x10]
80007a54:	ee cb ff f4 	sub	r11,r7,-12
80007a58:	18 93       	mov	r3,r12
80007a5a:	2f ea       	sub	r10,-2
80007a5c:	2f 4c       	sub	r12,-12
80007a5e:	a3 6a       	lsl	r10,0x2
80007a60:	fe b0 de 39 	rcall	800036d2 <memcpy>
80007a64:	0e 9b       	mov	r11,r7
80007a66:	0c 9c       	mov	r12,r6
80007a68:	fe b0 fd f8 	rcall	80007658 <_Bfree>
80007a6c:	06 97       	mov	r7,r3
80007a6e:	e8 c8 ff ff 	sub	r8,r4,-1
80007a72:	2f b4       	sub	r4,-5
80007a74:	8f 48       	st.w	r7[0x10],r8
80007a76:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007a7a:	0e 9c       	mov	r12,r7
80007a7c:	d8 32       	popm	r0-r7,pc
80007a7e:	d7 03       	nop

80007a80 <__pow5mult>:
80007a80:	d4 31       	pushm	r0-r7,lr
80007a82:	14 96       	mov	r6,r10
80007a84:	18 97       	mov	r7,r12
80007a86:	16 94       	mov	r4,r11
80007a88:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007a8c:	c0 90       	breq	80007a9e <__pow5mult+0x1e>
80007a8e:	20 18       	sub	r8,1
80007a90:	fe c9 e1 f8 	sub	r9,pc,-7688
80007a94:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007a98:	30 09       	mov	r9,0
80007a9a:	cb 5f       	rcall	80007a04 <__multadd>
80007a9c:	18 94       	mov	r4,r12
80007a9e:	a3 46       	asr	r6,0x2
80007aa0:	c3 40       	breq	80007b08 <__pow5mult+0x88>
80007aa2:	6e 95       	ld.w	r5,r7[0x24]
80007aa4:	58 05       	cp.w	r5,0
80007aa6:	c0 91       	brne	80007ab8 <__pow5mult+0x38>
80007aa8:	31 0c       	mov	r12,16
80007aaa:	fe b0 fa fb 	rcall	800070a0 <malloc>
80007aae:	99 35       	st.w	r12[0xc],r5
80007ab0:	8f 9c       	st.w	r7[0x24],r12
80007ab2:	99 15       	st.w	r12[0x4],r5
80007ab4:	99 25       	st.w	r12[0x8],r5
80007ab6:	99 05       	st.w	r12[0x0],r5
80007ab8:	6e 93       	ld.w	r3,r7[0x24]
80007aba:	66 25       	ld.w	r5,r3[0x8]
80007abc:	58 05       	cp.w	r5,0
80007abe:	c0 c1       	brne	80007ad6 <__pow5mult+0x56>
80007ac0:	e0 6b 02 71 	mov	r11,625
80007ac4:	0e 9c       	mov	r12,r7
80007ac6:	c9 7f       	rcall	800079f4 <__i2b>
80007ac8:	87 2c       	st.w	r3[0x8],r12
80007aca:	30 08       	mov	r8,0
80007acc:	18 95       	mov	r5,r12
80007ace:	99 08       	st.w	r12[0x0],r8
80007ad0:	c0 38       	rjmp	80007ad6 <__pow5mult+0x56>
80007ad2:	06 9c       	mov	r12,r3
80007ad4:	18 95       	mov	r5,r12
80007ad6:	ed b6 00 00 	bld	r6,0x0
80007ada:	c0 b1       	brne	80007af0 <__pow5mult+0x70>
80007adc:	08 9b       	mov	r11,r4
80007ade:	0a 9a       	mov	r10,r5
80007ae0:	0e 9c       	mov	r12,r7
80007ae2:	c0 9f       	rcall	800078f4 <__multiply>
80007ae4:	08 9b       	mov	r11,r4
80007ae6:	18 93       	mov	r3,r12
80007ae8:	0e 9c       	mov	r12,r7
80007aea:	06 94       	mov	r4,r3
80007aec:	fe b0 fd b6 	rcall	80007658 <_Bfree>
80007af0:	a1 56       	asr	r6,0x1
80007af2:	c0 b0       	breq	80007b08 <__pow5mult+0x88>
80007af4:	6a 03       	ld.w	r3,r5[0x0]
80007af6:	58 03       	cp.w	r3,0
80007af8:	ce d1       	brne	80007ad2 <__pow5mult+0x52>
80007afa:	0a 9a       	mov	r10,r5
80007afc:	0a 9b       	mov	r11,r5
80007afe:	0e 9c       	mov	r12,r7
80007b00:	cf ae       	rcall	800078f4 <__multiply>
80007b02:	8b 0c       	st.w	r5[0x0],r12
80007b04:	99 03       	st.w	r12[0x0],r3
80007b06:	ce 7b       	rjmp	80007ad4 <__pow5mult+0x54>
80007b08:	08 9c       	mov	r12,r4
80007b0a:	d8 32       	popm	r0-r7,pc

80007b0c <_realloc_r>:
80007b0c:	d4 31       	pushm	r0-r7,lr
80007b0e:	20 1d       	sub	sp,4
80007b10:	16 94       	mov	r4,r11
80007b12:	18 92       	mov	r2,r12
80007b14:	14 9b       	mov	r11,r10
80007b16:	58 04       	cp.w	r4,0
80007b18:	c0 51       	brne	80007b22 <_realloc_r+0x16>
80007b1a:	fe b0 fa cb 	rcall	800070b0 <_malloc_r>
80007b1e:	18 95       	mov	r5,r12
80007b20:	c5 39       	rjmp	80007dc6 <_realloc_r+0x2ba>
80007b22:	50 0a       	stdsp	sp[0x0],r10
80007b24:	fe b0 fd 08 	rcall	80007534 <__malloc_lock>
80007b28:	40 0b       	lddsp	r11,sp[0x0]
80007b2a:	f6 c8 ff f5 	sub	r8,r11,-11
80007b2e:	e8 c1 00 08 	sub	r1,r4,8
80007b32:	10 96       	mov	r6,r8
80007b34:	62 1c       	ld.w	r12,r1[0x4]
80007b36:	e0 16 ff f8 	andl	r6,0xfff8
80007b3a:	59 68       	cp.w	r8,22
80007b3c:	f9 b6 08 10 	movls	r6,16
80007b40:	16 36       	cp.w	r6,r11
80007b42:	5f 38       	srlo	r8
80007b44:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007b48:	c0 50       	breq	80007b52 <_realloc_r+0x46>
80007b4a:	30 c8       	mov	r8,12
80007b4c:	30 05       	mov	r5,0
80007b4e:	85 38       	st.w	r2[0xc],r8
80007b50:	c3 b9       	rjmp	80007dc6 <_realloc_r+0x2ba>
80007b52:	18 90       	mov	r0,r12
80007b54:	e0 10 ff fc 	andl	r0,0xfffc
80007b58:	0c 30       	cp.w	r0,r6
80007b5a:	e0 84 01 0b 	brge	80007d70 <_realloc_r+0x264>
80007b5e:	e0 68 01 08 	mov	r8,264
80007b62:	e2 00 00 09 	add	r9,r1,r0
80007b66:	70 25       	ld.w	r5,r8[0x8]
80007b68:	0a 39       	cp.w	r9,r5
80007b6a:	c0 90       	breq	80007b7c <_realloc_r+0x70>
80007b6c:	72 1a       	ld.w	r10,r9[0x4]
80007b6e:	a1 ca       	cbr	r10,0x0
80007b70:	f2 0a 00 0a 	add	r10,r9,r10
80007b74:	74 1a       	ld.w	r10,r10[0x4]
80007b76:	ed ba 00 00 	bld	r10,0x0
80007b7a:	c2 20       	breq	80007bbe <_realloc_r+0xb2>
80007b7c:	72 1a       	ld.w	r10,r9[0x4]
80007b7e:	e0 1a ff fc 	andl	r10,0xfffc
80007b82:	f4 00 00 03 	add	r3,r10,r0
80007b86:	0a 39       	cp.w	r9,r5
80007b88:	c1 31       	brne	80007bae <_realloc_r+0xa2>
80007b8a:	ec c7 ff f0 	sub	r7,r6,-16
80007b8e:	0e 33       	cp.w	r3,r7
80007b90:	c1 95       	brlt	80007bc2 <_realloc_r+0xb6>
80007b92:	e2 06 00 09 	add	r9,r1,r6
80007b96:	0c 13       	sub	r3,r6
80007b98:	a1 a3       	sbr	r3,0x0
80007b9a:	93 13       	st.w	r9[0x4],r3
80007b9c:	91 29       	st.w	r8[0x8],r9
80007b9e:	04 9c       	mov	r12,r2
80007ba0:	62 18       	ld.w	r8,r1[0x4]
80007ba2:	08 95       	mov	r5,r4
80007ba4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ba8:	10 46       	or	r6,r8
80007baa:	83 16       	st.w	r1[0x4],r6
80007bac:	c0 b9       	rjmp	80007dc2 <_realloc_r+0x2b6>
80007bae:	0c 33       	cp.w	r3,r6
80007bb0:	c0 95       	brlt	80007bc2 <_realloc_r+0xb6>
80007bb2:	72 28       	ld.w	r8,r9[0x8]
80007bb4:	02 97       	mov	r7,r1
80007bb6:	72 39       	ld.w	r9,r9[0xc]
80007bb8:	93 28       	st.w	r9[0x8],r8
80007bba:	91 39       	st.w	r8[0xc],r9
80007bbc:	cd c8       	rjmp	80007d74 <_realloc_r+0x268>
80007bbe:	30 0a       	mov	r10,0
80007bc0:	14 99       	mov	r9,r10
80007bc2:	ed bc 00 00 	bld	r12,0x0
80007bc6:	e0 80 00 95 	breq	80007cf0 <_realloc_r+0x1e4>
80007bca:	62 07       	ld.w	r7,r1[0x0]
80007bcc:	e2 07 01 07 	sub	r7,r1,r7
80007bd0:	6e 1c       	ld.w	r12,r7[0x4]
80007bd2:	e0 1c ff fc 	andl	r12,0xfffc
80007bd6:	58 09       	cp.w	r9,0
80007bd8:	c5 60       	breq	80007c84 <_realloc_r+0x178>
80007bda:	f8 00 00 03 	add	r3,r12,r0
80007bde:	0a 39       	cp.w	r9,r5
80007be0:	c4 81       	brne	80007c70 <_realloc_r+0x164>
80007be2:	14 03       	add	r3,r10
80007be4:	ec c9 ff f0 	sub	r9,r6,-16
80007be8:	12 33       	cp.w	r3,r9
80007bea:	c4 d5       	brlt	80007c84 <_realloc_r+0x178>
80007bec:	6e 3a       	ld.w	r10,r7[0xc]
80007bee:	6e 29       	ld.w	r9,r7[0x8]
80007bf0:	95 29       	st.w	r10[0x8],r9
80007bf2:	93 3a       	st.w	r9[0xc],r10
80007bf4:	ee c5 ff f8 	sub	r5,r7,-8
80007bf8:	e0 ca 00 04 	sub	r10,r0,4
80007bfc:	e0 4a 00 24 	cp.w	r10,36
80007c00:	e0 8b 00 25 	brhi	80007c4a <_realloc_r+0x13e>
80007c04:	0a 99       	mov	r9,r5
80007c06:	59 3a       	cp.w	r10,19
80007c08:	e0 88 00 1a 	brls	80007c3c <_realloc_r+0x130>
80007c0c:	09 09       	ld.w	r9,r4++
80007c0e:	8b 09       	st.w	r5[0x0],r9
80007c10:	09 09       	ld.w	r9,r4++
80007c12:	8f 39       	st.w	r7[0xc],r9
80007c14:	ee c9 ff f0 	sub	r9,r7,-16
80007c18:	59 ba       	cp.w	r10,27
80007c1a:	e0 88 00 11 	brls	80007c3c <_realloc_r+0x130>
80007c1e:	09 0b       	ld.w	r11,r4++
80007c20:	93 0b       	st.w	r9[0x0],r11
80007c22:	09 09       	ld.w	r9,r4++
80007c24:	8f 59       	st.w	r7[0x14],r9
80007c26:	ee c9 ff e8 	sub	r9,r7,-24
80007c2a:	e0 4a 00 24 	cp.w	r10,36
80007c2e:	c0 71       	brne	80007c3c <_realloc_r+0x130>
80007c30:	09 0a       	ld.w	r10,r4++
80007c32:	93 0a       	st.w	r9[0x0],r10
80007c34:	ee c9 ff e0 	sub	r9,r7,-32
80007c38:	09 0a       	ld.w	r10,r4++
80007c3a:	8f 7a       	st.w	r7[0x1c],r10
80007c3c:	09 0a       	ld.w	r10,r4++
80007c3e:	12 aa       	st.w	r9++,r10
80007c40:	68 0a       	ld.w	r10,r4[0x0]
80007c42:	93 0a       	st.w	r9[0x0],r10
80007c44:	68 1a       	ld.w	r10,r4[0x4]
80007c46:	93 1a       	st.w	r9[0x4],r10
80007c48:	c0 78       	rjmp	80007c56 <_realloc_r+0x14a>
80007c4a:	50 08       	stdsp	sp[0x0],r8
80007c4c:	08 9b       	mov	r11,r4
80007c4e:	0a 9c       	mov	r12,r5
80007c50:	fe b0 fc 53 	rcall	800074f6 <memmove>
80007c54:	40 08       	lddsp	r8,sp[0x0]
80007c56:	ee 06 00 09 	add	r9,r7,r6
80007c5a:	0c 13       	sub	r3,r6
80007c5c:	a1 a3       	sbr	r3,0x0
80007c5e:	93 13       	st.w	r9[0x4],r3
80007c60:	91 29       	st.w	r8[0x8],r9
80007c62:	04 9c       	mov	r12,r2
80007c64:	6e 18       	ld.w	r8,r7[0x4]
80007c66:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007c6a:	10 46       	or	r6,r8
80007c6c:	8f 16       	st.w	r7[0x4],r6
80007c6e:	ca a8       	rjmp	80007dc2 <_realloc_r+0x2b6>
80007c70:	14 03       	add	r3,r10
80007c72:	0c 33       	cp.w	r3,r6
80007c74:	c0 85       	brlt	80007c84 <_realloc_r+0x178>
80007c76:	72 28       	ld.w	r8,r9[0x8]
80007c78:	72 39       	ld.w	r9,r9[0xc]
80007c7a:	93 28       	st.w	r9[0x8],r8
80007c7c:	91 39       	st.w	r8[0xc],r9
80007c7e:	6e 28       	ld.w	r8,r7[0x8]
80007c80:	6e 39       	ld.w	r9,r7[0xc]
80007c82:	c0 78       	rjmp	80007c90 <_realloc_r+0x184>
80007c84:	f8 00 00 03 	add	r3,r12,r0
80007c88:	0c 33       	cp.w	r3,r6
80007c8a:	c3 35       	brlt	80007cf0 <_realloc_r+0x1e4>
80007c8c:	6e 39       	ld.w	r9,r7[0xc]
80007c8e:	6e 28       	ld.w	r8,r7[0x8]
80007c90:	93 28       	st.w	r9[0x8],r8
80007c92:	91 39       	st.w	r8[0xc],r9
80007c94:	e0 ca 00 04 	sub	r10,r0,4
80007c98:	ee cc ff f8 	sub	r12,r7,-8
80007c9c:	e0 4a 00 24 	cp.w	r10,36
80007ca0:	e0 8b 00 24 	brhi	80007ce8 <_realloc_r+0x1dc>
80007ca4:	59 3a       	cp.w	r10,19
80007ca6:	e0 88 00 1a 	brls	80007cda <_realloc_r+0x1ce>
80007caa:	09 08       	ld.w	r8,r4++
80007cac:	99 08       	st.w	r12[0x0],r8
80007cae:	09 08       	ld.w	r8,r4++
80007cb0:	8f 38       	st.w	r7[0xc],r8
80007cb2:	ee cc ff f0 	sub	r12,r7,-16
80007cb6:	59 ba       	cp.w	r10,27
80007cb8:	e0 88 00 11 	brls	80007cda <_realloc_r+0x1ce>
80007cbc:	09 08       	ld.w	r8,r4++
80007cbe:	99 08       	st.w	r12[0x0],r8
80007cc0:	09 08       	ld.w	r8,r4++
80007cc2:	8f 58       	st.w	r7[0x14],r8
80007cc4:	ee cc ff e8 	sub	r12,r7,-24
80007cc8:	e0 4a 00 24 	cp.w	r10,36
80007ccc:	c0 71       	brne	80007cda <_realloc_r+0x1ce>
80007cce:	09 08       	ld.w	r8,r4++
80007cd0:	99 08       	st.w	r12[0x0],r8
80007cd2:	ee cc ff e0 	sub	r12,r7,-32
80007cd6:	09 08       	ld.w	r8,r4++
80007cd8:	8f 78       	st.w	r7[0x1c],r8
80007cda:	09 08       	ld.w	r8,r4++
80007cdc:	18 a8       	st.w	r12++,r8
80007cde:	68 08       	ld.w	r8,r4[0x0]
80007ce0:	99 08       	st.w	r12[0x0],r8
80007ce2:	68 18       	ld.w	r8,r4[0x4]
80007ce4:	99 18       	st.w	r12[0x4],r8
80007ce6:	c4 78       	rjmp	80007d74 <_realloc_r+0x268>
80007ce8:	08 9b       	mov	r11,r4
80007cea:	fe b0 fc 06 	rcall	800074f6 <memmove>
80007cee:	c4 38       	rjmp	80007d74 <_realloc_r+0x268>
80007cf0:	04 9c       	mov	r12,r2
80007cf2:	fe b0 f9 df 	rcall	800070b0 <_malloc_r>
80007cf6:	18 95       	mov	r5,r12
80007cf8:	c3 a0       	breq	80007d6c <_realloc_r+0x260>
80007cfa:	62 18       	ld.w	r8,r1[0x4]
80007cfc:	f8 c9 00 08 	sub	r9,r12,8
80007d00:	a1 c8       	cbr	r8,0x0
80007d02:	e2 08 00 08 	add	r8,r1,r8
80007d06:	10 39       	cp.w	r9,r8
80007d08:	c0 71       	brne	80007d16 <_realloc_r+0x20a>
80007d0a:	72 13       	ld.w	r3,r9[0x4]
80007d0c:	02 97       	mov	r7,r1
80007d0e:	e0 13 ff fc 	andl	r3,0xfffc
80007d12:	00 03       	add	r3,r0
80007d14:	c3 08       	rjmp	80007d74 <_realloc_r+0x268>
80007d16:	e0 ca 00 04 	sub	r10,r0,4
80007d1a:	e0 4a 00 24 	cp.w	r10,36
80007d1e:	e0 8b 00 20 	brhi	80007d5e <_realloc_r+0x252>
80007d22:	08 99       	mov	r9,r4
80007d24:	18 98       	mov	r8,r12
80007d26:	59 3a       	cp.w	r10,19
80007d28:	e0 88 00 14 	brls	80007d50 <_realloc_r+0x244>
80007d2c:	13 0b       	ld.w	r11,r9++
80007d2e:	10 ab       	st.w	r8++,r11
80007d30:	13 0b       	ld.w	r11,r9++
80007d32:	10 ab       	st.w	r8++,r11
80007d34:	59 ba       	cp.w	r10,27
80007d36:	e0 88 00 0d 	brls	80007d50 <_realloc_r+0x244>
80007d3a:	13 0b       	ld.w	r11,r9++
80007d3c:	10 ab       	st.w	r8++,r11
80007d3e:	13 0b       	ld.w	r11,r9++
80007d40:	10 ab       	st.w	r8++,r11
80007d42:	e0 4a 00 24 	cp.w	r10,36
80007d46:	c0 51       	brne	80007d50 <_realloc_r+0x244>
80007d48:	13 0a       	ld.w	r10,r9++
80007d4a:	10 aa       	st.w	r8++,r10
80007d4c:	13 0a       	ld.w	r10,r9++
80007d4e:	10 aa       	st.w	r8++,r10
80007d50:	13 0a       	ld.w	r10,r9++
80007d52:	10 aa       	st.w	r8++,r10
80007d54:	72 0a       	ld.w	r10,r9[0x0]
80007d56:	91 0a       	st.w	r8[0x0],r10
80007d58:	72 19       	ld.w	r9,r9[0x4]
80007d5a:	91 19       	st.w	r8[0x4],r9
80007d5c:	c0 48       	rjmp	80007d64 <_realloc_r+0x258>
80007d5e:	08 9b       	mov	r11,r4
80007d60:	fe b0 fb cb 	rcall	800074f6 <memmove>
80007d64:	08 9b       	mov	r11,r4
80007d66:	04 9c       	mov	r12,r2
80007d68:	fe b0 f6 fe 	rcall	80006b64 <_free_r>
80007d6c:	04 9c       	mov	r12,r2
80007d6e:	c2 a8       	rjmp	80007dc2 <_realloc_r+0x2b6>
80007d70:	00 93       	mov	r3,r0
80007d72:	02 97       	mov	r7,r1
80007d74:	e6 06 01 09 	sub	r9,r3,r6
80007d78:	6e 18       	ld.w	r8,r7[0x4]
80007d7a:	58 f9       	cp.w	r9,15
80007d7c:	e0 88 00 16 	brls	80007da8 <_realloc_r+0x29c>
80007d80:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007d84:	ed e8 10 08 	or	r8,r6,r8
80007d88:	8f 18       	st.w	r7[0x4],r8
80007d8a:	12 98       	mov	r8,r9
80007d8c:	a1 a8       	sbr	r8,0x0
80007d8e:	ee 06 00 0b 	add	r11,r7,r6
80007d92:	f6 09 00 09 	add	r9,r11,r9
80007d96:	97 18       	st.w	r11[0x4],r8
80007d98:	72 18       	ld.w	r8,r9[0x4]
80007d9a:	a1 a8       	sbr	r8,0x0
80007d9c:	2f 8b       	sub	r11,-8
80007d9e:	93 18       	st.w	r9[0x4],r8
80007da0:	04 9c       	mov	r12,r2
80007da2:	fe b0 f6 e1 	rcall	80006b64 <_free_r>
80007da6:	c0 b8       	rjmp	80007dbc <_realloc_r+0x2b0>
80007da8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007dac:	e7 e8 10 08 	or	r8,r3,r8
80007db0:	8f 18       	st.w	r7[0x4],r8
80007db2:	ee 03 00 03 	add	r3,r7,r3
80007db6:	66 18       	ld.w	r8,r3[0x4]
80007db8:	a1 a8       	sbr	r8,0x0
80007dba:	87 18       	st.w	r3[0x4],r8
80007dbc:	04 9c       	mov	r12,r2
80007dbe:	ee c5 ff f8 	sub	r5,r7,-8
80007dc2:	fe b0 fb ba 	rcall	80007536 <__malloc_unlock>
80007dc6:	0a 9c       	mov	r12,r5
80007dc8:	2f fd       	sub	sp,-4
80007dca:	d8 32       	popm	r0-r7,pc

80007dcc <__isinfd>:
80007dcc:	14 98       	mov	r8,r10
80007dce:	fc 19 7f f0 	movh	r9,0x7ff0
80007dd2:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007dd6:	f0 0b 11 00 	rsub	r11,r8,0
80007dda:	f7 e8 10 08 	or	r8,r11,r8
80007dde:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007de2:	f2 08 01 08 	sub	r8,r9,r8
80007de6:	f0 0c 11 00 	rsub	r12,r8,0
80007dea:	f9 e8 10 08 	or	r8,r12,r8
80007dee:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007df2:	2f fc       	sub	r12,-1
80007df4:	5e fc       	retal	r12

80007df6 <__isnand>:
80007df6:	14 98       	mov	r8,r10
80007df8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007dfc:	f0 0c 11 00 	rsub	r12,r8,0
80007e00:	10 4c       	or	r12,r8
80007e02:	fc 18 7f f0 	movh	r8,0x7ff0
80007e06:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007e0a:	f0 0c 01 0c 	sub	r12,r8,r12
80007e0e:	bf 9c       	lsr	r12,0x1f
80007e10:	5e fc       	retal	r12
80007e12:	d7 03       	nop

80007e14 <_sbrk_r>:
80007e14:	d4 21       	pushm	r4-r7,lr
80007e16:	30 08       	mov	r8,0
80007e18:	18 97       	mov	r7,r12
80007e1a:	e0 66 06 70 	mov	r6,1648
80007e1e:	16 9c       	mov	r12,r11
80007e20:	8d 08       	st.w	r6[0x0],r8
80007e22:	ca fc       	rcall	80007f80 <_sbrk>
80007e24:	5b fc       	cp.w	r12,-1
80007e26:	c0 51       	brne	80007e30 <_sbrk_r+0x1c>
80007e28:	6c 08       	ld.w	r8,r6[0x0]
80007e2a:	58 08       	cp.w	r8,0
80007e2c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e30:	d8 22       	popm	r4-r7,pc
80007e32:	d7 03       	nop

80007e34 <__sclose>:
80007e34:	d4 01       	pushm	lr
80007e36:	96 7b       	ld.sh	r11,r11[0xe]
80007e38:	cf ec       	rcall	80008034 <_close_r>
80007e3a:	d8 02       	popm	pc

80007e3c <__sseek>:
80007e3c:	d4 21       	pushm	r4-r7,lr
80007e3e:	16 97       	mov	r7,r11
80007e40:	96 7b       	ld.sh	r11,r11[0xe]
80007e42:	c8 5d       	rcall	8000814c <_lseek_r>
80007e44:	8e 68       	ld.sh	r8,r7[0xc]
80007e46:	10 99       	mov	r9,r8
80007e48:	ad c8       	cbr	r8,0xc
80007e4a:	ad a9       	sbr	r9,0xc
80007e4c:	5b fc       	cp.w	r12,-1
80007e4e:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007e52:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007e56:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007e5a:	d8 22       	popm	r4-r7,pc

80007e5c <__swrite>:
80007e5c:	d4 21       	pushm	r4-r7,lr
80007e5e:	96 68       	ld.sh	r8,r11[0xc]
80007e60:	16 97       	mov	r7,r11
80007e62:	14 95       	mov	r5,r10
80007e64:	12 94       	mov	r4,r9
80007e66:	e2 18 01 00 	andl	r8,0x100,COH
80007e6a:	18 96       	mov	r6,r12
80007e6c:	c0 50       	breq	80007e76 <__swrite+0x1a>
80007e6e:	30 29       	mov	r9,2
80007e70:	30 0a       	mov	r10,0
80007e72:	96 7b       	ld.sh	r11,r11[0xe]
80007e74:	c6 cd       	rcall	8000814c <_lseek_r>
80007e76:	8e 68       	ld.sh	r8,r7[0xc]
80007e78:	ad c8       	cbr	r8,0xc
80007e7a:	08 99       	mov	r9,r4
80007e7c:	0a 9a       	mov	r10,r5
80007e7e:	8e 7b       	ld.sh	r11,r7[0xe]
80007e80:	0c 9c       	mov	r12,r6
80007e82:	ae 68       	st.h	r7[0xc],r8
80007e84:	c9 ac       	rcall	80007fb8 <_write_r>
80007e86:	d8 22       	popm	r4-r7,pc

80007e88 <__sread>:
80007e88:	d4 21       	pushm	r4-r7,lr
80007e8a:	16 97       	mov	r7,r11
80007e8c:	96 7b       	ld.sh	r11,r11[0xe]
80007e8e:	c7 1d       	rcall	80008170 <_read_r>
80007e90:	c0 65       	brlt	80007e9c <__sread+0x14>
80007e92:	6f 58       	ld.w	r8,r7[0x54]
80007e94:	18 08       	add	r8,r12
80007e96:	ef 48 00 54 	st.w	r7[84],r8
80007e9a:	d8 22       	popm	r4-r7,pc
80007e9c:	8e 68       	ld.sh	r8,r7[0xc]
80007e9e:	ad c8       	cbr	r8,0xc
80007ea0:	ae 68       	st.h	r7[0xc],r8
80007ea2:	d8 22       	popm	r4-r7,pc

80007ea4 <strlen>:
80007ea4:	30 09       	mov	r9,0
80007ea6:	18 98       	mov	r8,r12
80007ea8:	c0 28       	rjmp	80007eac <strlen+0x8>
80007eaa:	2f f8       	sub	r8,-1
80007eac:	11 8a       	ld.ub	r10,r8[0x0]
80007eae:	f2 0a 18 00 	cp.b	r10,r9
80007eb2:	cf c1       	brne	80007eaa <strlen+0x6>
80007eb4:	f0 0c 01 0c 	sub	r12,r8,r12
80007eb8:	5e fc       	retal	r12
80007eba:	d7 03       	nop

80007ebc <_close>:
80007ebc:	30 28       	mov	r8,2
80007ebe:	d6 73       	breakpoint
80007ec0:	3f fc       	mov	r12,-1
80007ec2:	35 8b       	mov	r11,88
80007ec4:	58 0c       	cp.w	r12,0
80007ec6:	5e 4c       	retge	r12
80007ec8:	e0 6a 06 70 	mov	r10,1648
80007ecc:	95 0b       	st.w	r10[0x0],r11
80007ece:	5e fc       	retal	r12

80007ed0 <_lseek>:
80007ed0:	30 58       	mov	r8,5
80007ed2:	d6 73       	breakpoint
80007ed4:	3f fc       	mov	r12,-1
80007ed6:	35 8b       	mov	r11,88
80007ed8:	58 0c       	cp.w	r12,0
80007eda:	5e 4c       	retge	r12
80007edc:	e0 6a 06 70 	mov	r10,1648
80007ee0:	95 0b       	st.w	r10[0x0],r11
80007ee2:	5e fc       	retal	r12

80007ee4 <_read>:
80007ee4:	30 38       	mov	r8,3
80007ee6:	d6 73       	breakpoint
80007ee8:	3f fc       	mov	r12,-1
80007eea:	35 8b       	mov	r11,88
80007eec:	58 0c       	cp.w	r12,0
80007eee:	5e 4c       	retge	r12
80007ef0:	e0 6a 06 70 	mov	r10,1648
80007ef4:	95 0b       	st.w	r10[0x0],r11
80007ef6:	5e fc       	retal	r12

80007ef8 <_write>:
80007ef8:	30 48       	mov	r8,4
80007efa:	d6 73       	breakpoint
80007efc:	3f fc       	mov	r12,-1
80007efe:	35 8b       	mov	r11,88
80007f00:	58 0c       	cp.w	r12,0
80007f02:	5e 4c       	retge	r12
80007f04:	e0 6a 06 70 	mov	r10,1648
80007f08:	95 0b       	st.w	r10[0x0],r11
80007f0a:	5e fc       	retal	r12

80007f0c <isatty>:
80007f0c:	30 b8       	mov	r8,11
80007f0e:	d6 73       	breakpoint
80007f10:	3f fc       	mov	r12,-1
80007f12:	35 8b       	mov	r11,88
80007f14:	58 0c       	cp.w	r12,0
80007f16:	5e 4c       	retge	r12
80007f18:	e0 6a 06 70 	mov	r10,1648
80007f1c:	95 0b       	st.w	r10[0x0],r11
80007f1e:	5e fc       	retal	r12

80007f20 <_fstat_host>:
80007f20:	30 98       	mov	r8,9
80007f22:	d6 73       	breakpoint
80007f24:	3f fc       	mov	r12,-1
80007f26:	35 8b       	mov	r11,88
80007f28:	58 0c       	cp.w	r12,0
80007f2a:	5e 4c       	retge	r12
80007f2c:	e0 6a 06 70 	mov	r10,1648
80007f30:	95 0b       	st.w	r10[0x0],r11
80007f32:	5e fc       	retal	r12

80007f34 <_fstat>:
80007f34:	d4 21       	pushm	r4-r7,lr
80007f36:	21 0d       	sub	sp,64
80007f38:	16 97       	mov	r7,r11
80007f3a:	1a 9b       	mov	r11,sp
80007f3c:	cf 2f       	rcall	80007f20 <_fstat_host>
80007f3e:	c0 34       	brge	80007f44 <_fstat+0x10>
80007f40:	3f fc       	mov	r12,-1
80007f42:	c1 c8       	rjmp	80007f7a <_fstat+0x46>
80007f44:	40 08       	lddsp	r8,sp[0x0]
80007f46:	ae 08       	st.h	r7[0x0],r8
80007f48:	40 18       	lddsp	r8,sp[0x4]
80007f4a:	ae 18       	st.h	r7[0x2],r8
80007f4c:	40 28       	lddsp	r8,sp[0x8]
80007f4e:	8f 18       	st.w	r7[0x4],r8
80007f50:	40 38       	lddsp	r8,sp[0xc]
80007f52:	ae 48       	st.h	r7[0x8],r8
80007f54:	40 48       	lddsp	r8,sp[0x10]
80007f56:	ae 58       	st.h	r7[0xa],r8
80007f58:	40 58       	lddsp	r8,sp[0x14]
80007f5a:	ae 68       	st.h	r7[0xc],r8
80007f5c:	40 68       	lddsp	r8,sp[0x18]
80007f5e:	ae 78       	st.h	r7[0xe],r8
80007f60:	40 88       	lddsp	r8,sp[0x20]
80007f62:	8f 48       	st.w	r7[0x10],r8
80007f64:	40 a8       	lddsp	r8,sp[0x28]
80007f66:	8f b8       	st.w	r7[0x2c],r8
80007f68:	40 c8       	lddsp	r8,sp[0x30]
80007f6a:	8f c8       	st.w	r7[0x30],r8
80007f6c:	40 d8       	lddsp	r8,sp[0x34]
80007f6e:	8f 58       	st.w	r7[0x14],r8
80007f70:	40 e8       	lddsp	r8,sp[0x38]
80007f72:	30 0c       	mov	r12,0
80007f74:	8f 78       	st.w	r7[0x1c],r8
80007f76:	40 f8       	lddsp	r8,sp[0x3c]
80007f78:	8f 98       	st.w	r7[0x24],r8
80007f7a:	2f 0d       	sub	sp,-64
80007f7c:	d8 22       	popm	r4-r7,pc
80007f7e:	d7 03       	nop

80007f80 <_sbrk>:
80007f80:	d4 01       	pushm	lr
80007f82:	e0 68 06 5c 	mov	r8,1628
80007f86:	70 09       	ld.w	r9,r8[0x0]
80007f88:	58 09       	cp.w	r9,0
80007f8a:	c0 41       	brne	80007f92 <_sbrk+0x12>
80007f8c:	e0 69 06 78 	mov	r9,1656
80007f90:	91 09       	st.w	r8[0x0],r9
80007f92:	e0 69 06 5c 	mov	r9,1628
80007f96:	e0 6a f0 00 	mov	r10,61440
80007f9a:	72 08       	ld.w	r8,r9[0x0]
80007f9c:	f0 0c 00 0c 	add	r12,r8,r12
80007fa0:	14 3c       	cp.w	r12,r10
80007fa2:	e0 8b 00 04 	brhi	80007faa <_sbrk+0x2a>
80007fa6:	93 0c       	st.w	r9[0x0],r12
80007fa8:	c0 58       	rjmp	80007fb2 <_sbrk+0x32>
80007faa:	c5 5c       	rcall	80008054 <__errno>
80007fac:	30 c8       	mov	r8,12
80007fae:	99 08       	st.w	r12[0x0],r8
80007fb0:	3f f8       	mov	r8,-1
80007fb2:	10 9c       	mov	r12,r8
80007fb4:	d8 02       	popm	pc
80007fb6:	d7 03       	nop

80007fb8 <_write_r>:
80007fb8:	d4 21       	pushm	r4-r7,lr
80007fba:	16 98       	mov	r8,r11
80007fbc:	18 97       	mov	r7,r12
80007fbe:	10 9c       	mov	r12,r8
80007fc0:	30 08       	mov	r8,0
80007fc2:	14 9b       	mov	r11,r10
80007fc4:	e0 66 06 70 	mov	r6,1648
80007fc8:	12 9a       	mov	r10,r9
80007fca:	8d 08       	st.w	r6[0x0],r8
80007fcc:	c9 6f       	rcall	80007ef8 <_write>
80007fce:	5b fc       	cp.w	r12,-1
80007fd0:	c0 51       	brne	80007fda <_write_r+0x22>
80007fd2:	6c 08       	ld.w	r8,r6[0x0]
80007fd4:	58 08       	cp.w	r8,0
80007fd6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007fda:	d8 22       	popm	r4-r7,pc

80007fdc <_calloc_r>:
80007fdc:	d4 21       	pushm	r4-r7,lr
80007fde:	f4 0b 02 4b 	mul	r11,r10,r11
80007fe2:	fe b0 f8 67 	rcall	800070b0 <_malloc_r>
80007fe6:	18 97       	mov	r7,r12
80007fe8:	c2 30       	breq	8000802e <_calloc_r+0x52>
80007fea:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007fee:	e0 1a ff fc 	andl	r10,0xfffc
80007ff2:	20 4a       	sub	r10,4
80007ff4:	e0 4a 00 24 	cp.w	r10,36
80007ff8:	e0 8b 00 18 	brhi	80008028 <_calloc_r+0x4c>
80007ffc:	18 98       	mov	r8,r12
80007ffe:	59 3a       	cp.w	r10,19
80008000:	e0 88 00 0f 	brls	8000801e <_calloc_r+0x42>
80008004:	30 09       	mov	r9,0
80008006:	10 a9       	st.w	r8++,r9
80008008:	10 a9       	st.w	r8++,r9
8000800a:	59 ba       	cp.w	r10,27
8000800c:	e0 88 00 09 	brls	8000801e <_calloc_r+0x42>
80008010:	10 a9       	st.w	r8++,r9
80008012:	10 a9       	st.w	r8++,r9
80008014:	e0 4a 00 24 	cp.w	r10,36
80008018:	c0 31       	brne	8000801e <_calloc_r+0x42>
8000801a:	10 a9       	st.w	r8++,r9
8000801c:	10 a9       	st.w	r8++,r9
8000801e:	30 09       	mov	r9,0
80008020:	10 a9       	st.w	r8++,r9
80008022:	91 19       	st.w	r8[0x4],r9
80008024:	91 09       	st.w	r8[0x0],r9
80008026:	c0 48       	rjmp	8000802e <_calloc_r+0x52>
80008028:	30 0b       	mov	r11,0
8000802a:	fe b0 db f8 	rcall	8000381a <memset>
8000802e:	0e 9c       	mov	r12,r7
80008030:	d8 22       	popm	r4-r7,pc
80008032:	d7 03       	nop

80008034 <_close_r>:
80008034:	d4 21       	pushm	r4-r7,lr
80008036:	30 08       	mov	r8,0
80008038:	18 97       	mov	r7,r12
8000803a:	e0 66 06 70 	mov	r6,1648
8000803e:	16 9c       	mov	r12,r11
80008040:	8d 08       	st.w	r6[0x0],r8
80008042:	c3 df       	rcall	80007ebc <_close>
80008044:	5b fc       	cp.w	r12,-1
80008046:	c0 51       	brne	80008050 <_close_r+0x1c>
80008048:	6c 08       	ld.w	r8,r6[0x0]
8000804a:	58 08       	cp.w	r8,0
8000804c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008050:	d8 22       	popm	r4-r7,pc
80008052:	d7 03       	nop

80008054 <__errno>:
80008054:	e0 68 01 04 	mov	r8,260
80008058:	70 0c       	ld.w	r12,r8[0x0]
8000805a:	2f 4c       	sub	r12,-12
8000805c:	5e fc       	retal	r12
8000805e:	d7 03       	nop

80008060 <_fclose_r>:
80008060:	d4 21       	pushm	r4-r7,lr
80008062:	18 96       	mov	r6,r12
80008064:	16 97       	mov	r7,r11
80008066:	58 0b       	cp.w	r11,0
80008068:	c0 31       	brne	8000806e <_fclose_r+0xe>
8000806a:	16 95       	mov	r5,r11
8000806c:	c5 38       	rjmp	80008112 <_fclose_r+0xb2>
8000806e:	fe b0 f4 8f 	rcall	8000698c <__sfp_lock_acquire>
80008072:	58 06       	cp.w	r6,0
80008074:	c0 70       	breq	80008082 <_fclose_r+0x22>
80008076:	6c 68       	ld.w	r8,r6[0x18]
80008078:	58 08       	cp.w	r8,0
8000807a:	c0 41       	brne	80008082 <_fclose_r+0x22>
8000807c:	0c 9c       	mov	r12,r6
8000807e:	fe b0 f4 d9 	rcall	80006a30 <__sinit>
80008082:	fe c8 e8 8a 	sub	r8,pc,-6006
80008086:	10 37       	cp.w	r7,r8
80008088:	c0 31       	brne	8000808e <_fclose_r+0x2e>
8000808a:	6c 07       	ld.w	r7,r6[0x0]
8000808c:	c0 c8       	rjmp	800080a4 <_fclose_r+0x44>
8000808e:	fe c8 e8 76 	sub	r8,pc,-6026
80008092:	10 37       	cp.w	r7,r8
80008094:	c0 31       	brne	8000809a <_fclose_r+0x3a>
80008096:	6c 17       	ld.w	r7,r6[0x4]
80008098:	c0 68       	rjmp	800080a4 <_fclose_r+0x44>
8000809a:	fe c8 e8 62 	sub	r8,pc,-6046
8000809e:	10 37       	cp.w	r7,r8
800080a0:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800080a4:	8e 69       	ld.sh	r9,r7[0xc]
800080a6:	30 08       	mov	r8,0
800080a8:	f0 09 19 00 	cp.h	r9,r8
800080ac:	c0 51       	brne	800080b6 <_fclose_r+0x56>
800080ae:	fe b0 f4 70 	rcall	8000698e <__sfp_lock_release>
800080b2:	30 05       	mov	r5,0
800080b4:	c2 f8       	rjmp	80008112 <_fclose_r+0xb2>
800080b6:	0e 9b       	mov	r11,r7
800080b8:	0c 9c       	mov	r12,r6
800080ba:	fe b0 f3 e3 	rcall	80006880 <_fflush_r>
800080be:	6e c8       	ld.w	r8,r7[0x30]
800080c0:	18 95       	mov	r5,r12
800080c2:	58 08       	cp.w	r8,0
800080c4:	c0 60       	breq	800080d0 <_fclose_r+0x70>
800080c6:	6e 8b       	ld.w	r11,r7[0x20]
800080c8:	0c 9c       	mov	r12,r6
800080ca:	5d 18       	icall	r8
800080cc:	f9 b5 05 ff 	movlt	r5,-1
800080d0:	8e 68       	ld.sh	r8,r7[0xc]
800080d2:	ed b8 00 07 	bld	r8,0x7
800080d6:	c0 51       	brne	800080e0 <_fclose_r+0x80>
800080d8:	6e 4b       	ld.w	r11,r7[0x10]
800080da:	0c 9c       	mov	r12,r6
800080dc:	fe b0 f5 44 	rcall	80006b64 <_free_r>
800080e0:	6e db       	ld.w	r11,r7[0x34]
800080e2:	58 0b       	cp.w	r11,0
800080e4:	c0 a0       	breq	800080f8 <_fclose_r+0x98>
800080e6:	ee c8 ff bc 	sub	r8,r7,-68
800080ea:	10 3b       	cp.w	r11,r8
800080ec:	c0 40       	breq	800080f4 <_fclose_r+0x94>
800080ee:	0c 9c       	mov	r12,r6
800080f0:	fe b0 f5 3a 	rcall	80006b64 <_free_r>
800080f4:	30 08       	mov	r8,0
800080f6:	8f d8       	st.w	r7[0x34],r8
800080f8:	6f 2b       	ld.w	r11,r7[0x48]
800080fa:	58 0b       	cp.w	r11,0
800080fc:	c0 70       	breq	8000810a <_fclose_r+0xaa>
800080fe:	0c 9c       	mov	r12,r6
80008100:	fe b0 f5 32 	rcall	80006b64 <_free_r>
80008104:	30 08       	mov	r8,0
80008106:	ef 48 00 48 	st.w	r7[72],r8
8000810a:	30 08       	mov	r8,0
8000810c:	ae 68       	st.h	r7[0xc],r8
8000810e:	fe b0 f4 40 	rcall	8000698e <__sfp_lock_release>
80008112:	0a 9c       	mov	r12,r5
80008114:	d8 22       	popm	r4-r7,pc
80008116:	d7 03       	nop

80008118 <fclose>:
80008118:	d4 01       	pushm	lr
8000811a:	e0 68 01 04 	mov	r8,260
8000811e:	18 9b       	mov	r11,r12
80008120:	70 0c       	ld.w	r12,r8[0x0]
80008122:	c9 ff       	rcall	80008060 <_fclose_r>
80008124:	d8 02       	popm	pc
80008126:	d7 03       	nop

80008128 <_fstat_r>:
80008128:	d4 21       	pushm	r4-r7,lr
8000812a:	16 98       	mov	r8,r11
8000812c:	18 97       	mov	r7,r12
8000812e:	10 9c       	mov	r12,r8
80008130:	30 08       	mov	r8,0
80008132:	e0 66 06 70 	mov	r6,1648
80008136:	14 9b       	mov	r11,r10
80008138:	8d 08       	st.w	r6[0x0],r8
8000813a:	cf de       	rcall	80007f34 <_fstat>
8000813c:	5b fc       	cp.w	r12,-1
8000813e:	c0 51       	brne	80008148 <_fstat_r+0x20>
80008140:	6c 08       	ld.w	r8,r6[0x0]
80008142:	58 08       	cp.w	r8,0
80008144:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008148:	d8 22       	popm	r4-r7,pc
8000814a:	d7 03       	nop

8000814c <_lseek_r>:
8000814c:	d4 21       	pushm	r4-r7,lr
8000814e:	16 98       	mov	r8,r11
80008150:	18 97       	mov	r7,r12
80008152:	10 9c       	mov	r12,r8
80008154:	30 08       	mov	r8,0
80008156:	14 9b       	mov	r11,r10
80008158:	e0 66 06 70 	mov	r6,1648
8000815c:	12 9a       	mov	r10,r9
8000815e:	8d 08       	st.w	r6[0x0],r8
80008160:	cb 8e       	rcall	80007ed0 <_lseek>
80008162:	5b fc       	cp.w	r12,-1
80008164:	c0 51       	brne	8000816e <_lseek_r+0x22>
80008166:	6c 08       	ld.w	r8,r6[0x0]
80008168:	58 08       	cp.w	r8,0
8000816a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000816e:	d8 22       	popm	r4-r7,pc

80008170 <_read_r>:
80008170:	d4 21       	pushm	r4-r7,lr
80008172:	16 98       	mov	r8,r11
80008174:	18 97       	mov	r7,r12
80008176:	10 9c       	mov	r12,r8
80008178:	30 08       	mov	r8,0
8000817a:	14 9b       	mov	r11,r10
8000817c:	e0 66 06 70 	mov	r6,1648
80008180:	12 9a       	mov	r10,r9
80008182:	8d 08       	st.w	r6[0x0],r8
80008184:	cb 0e       	rcall	80007ee4 <_read>
80008186:	5b fc       	cp.w	r12,-1
80008188:	c0 51       	brne	80008192 <_read_r+0x22>
8000818a:	6c 08       	ld.w	r8,r6[0x0]
8000818c:	58 08       	cp.w	r8,0
8000818e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008192:	d8 22       	popm	r4-r7,pc

80008194 <__avr32_f64_mul>:
80008194:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80008198:	e0 80 00 dc 	breq	80008350 <__avr32_f64_mul_op1_zero>
8000819c:	d4 21       	pushm	r4-r7,lr
8000819e:	f7 e9 20 0e 	eor	lr,r11,r9
800081a2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800081a6:	30 15       	mov	r5,1
800081a8:	c4 30       	breq	8000822e <__avr32_f64_mul_op1_subnormal>
800081aa:	ab 6b       	lsl	r11,0xa
800081ac:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800081b0:	ab 6a       	lsl	r10,0xa
800081b2:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800081b6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800081ba:	c5 c0       	breq	80008272 <__avr32_f64_mul_op2_subnormal>
800081bc:	a1 78       	lsl	r8,0x1
800081be:	5c f9       	rol	r9
800081c0:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800081c4:	e0 47 07 ff 	cp.w	r7,2047
800081c8:	c7 70       	breq	800082b6 <__avr32_f64_mul_op_nan_or_inf>
800081ca:	e0 46 07 ff 	cp.w	r6,2047
800081ce:	c7 40       	breq	800082b6 <__avr32_f64_mul_op_nan_or_inf>
800081d0:	ee 06 00 0c 	add	r12,r7,r6
800081d4:	e0 2c 03 fe 	sub	r12,1022
800081d8:	f6 08 06 44 	mulu.d	r4,r11,r8
800081dc:	f4 09 07 44 	macu.d	r4,r10,r9
800081e0:	f4 08 06 46 	mulu.d	r6,r10,r8
800081e4:	f6 09 06 4a 	mulu.d	r10,r11,r9
800081e8:	08 07       	add	r7,r4
800081ea:	f4 05 00 4a 	adc	r10,r10,r5
800081ee:	5c 0b       	acr	r11
800081f0:	ed bb 00 14 	bld	r11,0x14
800081f4:	c0 50       	breq	800081fe <__avr32_f64_mul+0x6a>
800081f6:	a1 77       	lsl	r7,0x1
800081f8:	5c fa       	rol	r10
800081fa:	5c fb       	rol	r11
800081fc:	20 1c       	sub	r12,1
800081fe:	58 0c       	cp.w	r12,0
80008200:	e0 8a 00 6f 	brle	800082de <__avr32_f64_mul_res_subnormal>
80008204:	e0 4c 07 ff 	cp.w	r12,2047
80008208:	e0 84 00 9c 	brge	80008340 <__avr32_f64_mul_res_inf>
8000820c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008210:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80008214:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008218:	ee 17 80 00 	eorh	r7,0x8000
8000821c:	f1 b7 04 20 	satu	r7,0x1
80008220:	0e 0a       	add	r10,r7
80008222:	5c 0b       	acr	r11
80008224:	ed be 00 1f 	bld	lr,0x1f
80008228:	ef bb 00 1f 	bst	r11,0x1f
8000822c:	d8 22       	popm	r4-r7,pc

8000822e <__avr32_f64_mul_op1_subnormal>:
8000822e:	e4 1b 00 0f 	andh	r11,0xf
80008232:	f4 0c 12 00 	clz	r12,r10
80008236:	f6 06 12 00 	clz	r6,r11
8000823a:	f7 bc 03 e1 	sublo	r12,-31
8000823e:	f8 06 17 30 	movlo	r6,r12
80008242:	f7 b6 02 01 	subhs	r6,1
80008246:	e0 46 00 20 	cp.w	r6,32
8000824a:	c0 d4       	brge	80008264 <__avr32_f64_mul_op1_subnormal+0x36>
8000824c:	ec 0c 11 20 	rsub	r12,r6,32
80008250:	f6 06 09 4b 	lsl	r11,r11,r6
80008254:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008258:	18 4b       	or	r11,r12
8000825a:	f4 06 09 4a 	lsl	r10,r10,r6
8000825e:	20 b6       	sub	r6,11
80008260:	0c 17       	sub	r7,r6
80008262:	ca ab       	rjmp	800081b6 <__avr32_f64_mul+0x22>
80008264:	f4 06 09 4b 	lsl	r11,r10,r6
80008268:	c6 40       	breq	80008330 <__avr32_f64_mul_res_zero>
8000826a:	30 0a       	mov	r10,0
8000826c:	20 b6       	sub	r6,11
8000826e:	0c 17       	sub	r7,r6
80008270:	ca 3b       	rjmp	800081b6 <__avr32_f64_mul+0x22>

80008272 <__avr32_f64_mul_op2_subnormal>:
80008272:	e4 19 00 0f 	andh	r9,0xf
80008276:	f0 0c 12 00 	clz	r12,r8
8000827a:	f2 05 12 00 	clz	r5,r9
8000827e:	f7 bc 03 ea 	sublo	r12,-22
80008282:	f8 05 17 30 	movlo	r5,r12
80008286:	f7 b5 02 0a 	subhs	r5,10
8000828a:	e0 45 00 20 	cp.w	r5,32
8000828e:	c0 d4       	brge	800082a8 <__avr32_f64_mul_op2_subnormal+0x36>
80008290:	ea 0c 11 20 	rsub	r12,r5,32
80008294:	f2 05 09 49 	lsl	r9,r9,r5
80008298:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000829c:	18 49       	or	r9,r12
8000829e:	f0 05 09 48 	lsl	r8,r8,r5
800082a2:	20 25       	sub	r5,2
800082a4:	0a 16       	sub	r6,r5
800082a6:	c8 fb       	rjmp	800081c4 <__avr32_f64_mul+0x30>
800082a8:	f0 05 09 49 	lsl	r9,r8,r5
800082ac:	c4 20       	breq	80008330 <__avr32_f64_mul_res_zero>
800082ae:	30 08       	mov	r8,0
800082b0:	20 25       	sub	r5,2
800082b2:	0a 16       	sub	r6,r5
800082b4:	c8 8b       	rjmp	800081c4 <__avr32_f64_mul+0x30>

800082b6 <__avr32_f64_mul_op_nan_or_inf>:
800082b6:	e4 19 00 0f 	andh	r9,0xf
800082ba:	e4 1b 00 0f 	andh	r11,0xf
800082be:	14 4b       	or	r11,r10
800082c0:	10 49       	or	r9,r8
800082c2:	e0 47 07 ff 	cp.w	r7,2047
800082c6:	c0 91       	brne	800082d8 <__avr32_f64_mul_op1_not_naninf>
800082c8:	58 0b       	cp.w	r11,0
800082ca:	c3 81       	brne	8000833a <__avr32_f64_mul_res_nan>
800082cc:	e0 46 07 ff 	cp.w	r6,2047
800082d0:	c3 81       	brne	80008340 <__avr32_f64_mul_res_inf>
800082d2:	58 09       	cp.w	r9,0
800082d4:	c3 60       	breq	80008340 <__avr32_f64_mul_res_inf>
800082d6:	c3 28       	rjmp	8000833a <__avr32_f64_mul_res_nan>

800082d8 <__avr32_f64_mul_op1_not_naninf>:
800082d8:	58 09       	cp.w	r9,0
800082da:	c3 30       	breq	80008340 <__avr32_f64_mul_res_inf>
800082dc:	c2 f8       	rjmp	8000833a <__avr32_f64_mul_res_nan>

800082de <__avr32_f64_mul_res_subnormal>:
800082de:	5c 3c       	neg	r12
800082e0:	2f fc       	sub	r12,-1
800082e2:	f1 bc 04 c0 	satu	r12,0x6
800082e6:	e0 4c 00 20 	cp.w	r12,32
800082ea:	c1 14       	brge	8000830c <__avr32_f64_mul_res_subnormal+0x2e>
800082ec:	f8 08 11 20 	rsub	r8,r12,32
800082f0:	0e 46       	or	r6,r7
800082f2:	ee 0c 0a 47 	lsr	r7,r7,r12
800082f6:	f4 08 09 49 	lsl	r9,r10,r8
800082fa:	12 47       	or	r7,r9
800082fc:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008300:	f6 08 09 49 	lsl	r9,r11,r8
80008304:	12 4a       	or	r10,r9
80008306:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000830a:	c8 3b       	rjmp	80008210 <__avr32_f64_mul+0x7c>
8000830c:	f8 08 11 20 	rsub	r8,r12,32
80008310:	f9 b9 00 00 	moveq	r9,0
80008314:	c0 30       	breq	8000831a <__avr32_f64_mul_res_subnormal+0x3c>
80008316:	f6 08 09 49 	lsl	r9,r11,r8
8000831a:	0e 46       	or	r6,r7
8000831c:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008320:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008324:	f3 ea 10 07 	or	r7,r9,r10
80008328:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000832c:	30 0b       	mov	r11,0
8000832e:	c7 1b       	rjmp	80008210 <__avr32_f64_mul+0x7c>

80008330 <__avr32_f64_mul_res_zero>:
80008330:	1c 9b       	mov	r11,lr
80008332:	e6 1b 80 00 	andh	r11,0x8000,COH
80008336:	30 0a       	mov	r10,0
80008338:	d8 22       	popm	r4-r7,pc

8000833a <__avr32_f64_mul_res_nan>:
8000833a:	3f fb       	mov	r11,-1
8000833c:	3f fa       	mov	r10,-1
8000833e:	d8 22       	popm	r4-r7,pc

80008340 <__avr32_f64_mul_res_inf>:
80008340:	f0 6b 00 00 	mov	r11,-1048576
80008344:	ed be 00 1f 	bld	lr,0x1f
80008348:	ef bb 00 1f 	bst	r11,0x1f
8000834c:	30 0a       	mov	r10,0
8000834e:	d8 22       	popm	r4-r7,pc

80008350 <__avr32_f64_mul_op1_zero>:
80008350:	f7 e9 20 0b 	eor	r11,r11,r9
80008354:	e6 1b 80 00 	andh	r11,0x8000,COH
80008358:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000835c:	e0 4c 07 ff 	cp.w	r12,2047
80008360:	5e 1c       	retne	r12
80008362:	3f fa       	mov	r10,-1
80008364:	3f fb       	mov	r11,-1
80008366:	5e fc       	retal	r12

80008368 <__avr32_f64_sub_from_add>:
80008368:	ee 19 80 00 	eorh	r9,0x8000

8000836c <__avr32_f64_sub>:
8000836c:	f7 e9 20 0c 	eor	r12,r11,r9
80008370:	e0 86 00 ca 	brmi	80008504 <__avr32_f64_add_from_sub>
80008374:	eb cd 40 e0 	pushm	r5-r7,lr
80008378:	16 9c       	mov	r12,r11
8000837a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000837e:	bf db       	cbr	r11,0x1f
80008380:	bf d9       	cbr	r9,0x1f
80008382:	10 3a       	cp.w	r10,r8
80008384:	f2 0b 13 00 	cpc	r11,r9
80008388:	c0 92       	brcc	8000839a <__avr32_f64_sub+0x2e>
8000838a:	16 97       	mov	r7,r11
8000838c:	12 9b       	mov	r11,r9
8000838e:	0e 99       	mov	r9,r7
80008390:	14 97       	mov	r7,r10
80008392:	10 9a       	mov	r10,r8
80008394:	0e 98       	mov	r8,r7
80008396:	ee 1c 80 00 	eorh	r12,0x8000
8000839a:	f6 07 16 14 	lsr	r7,r11,0x14
8000839e:	ab 7b       	lsl	r11,0xb
800083a0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800083a4:	ab 7a       	lsl	r10,0xb
800083a6:	bf bb       	sbr	r11,0x1f
800083a8:	f2 06 16 14 	lsr	r6,r9,0x14
800083ac:	c4 40       	breq	80008434 <__avr32_f64_sub_opL_subnormal>
800083ae:	ab 79       	lsl	r9,0xb
800083b0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800083b4:	ab 78       	lsl	r8,0xb
800083b6:	bf b9       	sbr	r9,0x1f

800083b8 <__avr32_f64_sub_opL_subnormal_done>:
800083b8:	e0 47 07 ff 	cp.w	r7,2047
800083bc:	c4 f0       	breq	8000845a <__avr32_f64_sub_opH_nan_or_inf>
800083be:	0e 26       	rsub	r6,r7
800083c0:	c1 20       	breq	800083e4 <__avr32_f64_sub_shift_done>
800083c2:	ec 05 11 20 	rsub	r5,r6,32
800083c6:	e0 46 00 20 	cp.w	r6,32
800083ca:	c7 c2       	brcc	800084c2 <__avr32_f64_sub_longshift>
800083cc:	f0 05 09 4e 	lsl	lr,r8,r5
800083d0:	f2 05 09 45 	lsl	r5,r9,r5
800083d4:	f0 06 0a 48 	lsr	r8,r8,r6
800083d8:	f2 06 0a 49 	lsr	r9,r9,r6
800083dc:	0a 48       	or	r8,r5
800083de:	58 0e       	cp.w	lr,0
800083e0:	5f 1e       	srne	lr
800083e2:	1c 48       	or	r8,lr

800083e4 <__avr32_f64_sub_shift_done>:
800083e4:	10 1a       	sub	r10,r8
800083e6:	f6 09 01 4b 	sbc	r11,r11,r9
800083ea:	f6 06 12 00 	clz	r6,r11
800083ee:	c0 e0       	breq	8000840a <__avr32_f64_sub_longnormalize_done>
800083f0:	c7 83       	brcs	800084e0 <__avr32_f64_sub_longnormalize>
800083f2:	ec 0e 11 20 	rsub	lr,r6,32
800083f6:	f6 06 09 4b 	lsl	r11,r11,r6
800083fa:	f4 0e 0a 4e 	lsr	lr,r10,lr
800083fe:	1c 4b       	or	r11,lr
80008400:	f4 06 09 4a 	lsl	r10,r10,r6
80008404:	0c 17       	sub	r7,r6
80008406:	e0 8a 00 39 	brle	80008478 <__avr32_f64_sub_subnormal_result>

8000840a <__avr32_f64_sub_longnormalize_done>:
8000840a:	f4 09 15 15 	lsl	r9,r10,0x15
8000840e:	ab 9a       	lsr	r10,0xb
80008410:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008414:	ab 9b       	lsr	r11,0xb
80008416:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000841a:	18 4b       	or	r11,r12

8000841c <__avr32_f64_sub_round>:
8000841c:	fc 17 80 00 	movh	r7,0x8000
80008420:	ed ba 00 00 	bld	r10,0x0
80008424:	f7 b7 01 ff 	subne	r7,-1
80008428:	0e 39       	cp.w	r9,r7
8000842a:	5f 29       	srhs	r9
8000842c:	12 0a       	add	r10,r9
8000842e:	5c 0b       	acr	r11
80008430:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008434 <__avr32_f64_sub_opL_subnormal>:
80008434:	ab 79       	lsl	r9,0xb
80008436:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000843a:	ab 78       	lsl	r8,0xb
8000843c:	f3 e8 10 0e 	or	lr,r9,r8
80008440:	f9 b6 01 01 	movne	r6,1
80008444:	ee 0e 11 00 	rsub	lr,r7,0
80008448:	f9 b7 00 01 	moveq	r7,1
8000844c:	ef bb 00 1f 	bst	r11,0x1f
80008450:	f7 ea 10 0e 	or	lr,r11,r10
80008454:	f9 b7 00 00 	moveq	r7,0
80008458:	cb 0b       	rjmp	800083b8 <__avr32_f64_sub_opL_subnormal_done>

8000845a <__avr32_f64_sub_opH_nan_or_inf>:
8000845a:	bf db       	cbr	r11,0x1f
8000845c:	f7 ea 10 0e 	or	lr,r11,r10
80008460:	c0 81       	brne	80008470 <__avr32_f64_sub_return_nan>
80008462:	e0 46 07 ff 	cp.w	r6,2047
80008466:	c0 50       	breq	80008470 <__avr32_f64_sub_return_nan>
80008468:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000846c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008470 <__avr32_f64_sub_return_nan>:
80008470:	3f fa       	mov	r10,-1
80008472:	3f fb       	mov	r11,-1
80008474:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008478 <__avr32_f64_sub_subnormal_result>:
80008478:	5c 37       	neg	r7
8000847a:	2f f7       	sub	r7,-1
8000847c:	f1 b7 04 c0 	satu	r7,0x6
80008480:	e0 47 00 20 	cp.w	r7,32
80008484:	c1 14       	brge	800084a6 <__avr32_f64_sub_subnormal_result+0x2e>
80008486:	ee 08 11 20 	rsub	r8,r7,32
8000848a:	f4 08 09 49 	lsl	r9,r10,r8
8000848e:	5f 16       	srne	r6
80008490:	f4 07 0a 4a 	lsr	r10,r10,r7
80008494:	0c 4a       	or	r10,r6
80008496:	f6 08 09 49 	lsl	r9,r11,r8
8000849a:	f5 e9 10 0a 	or	r10,r10,r9
8000849e:	f4 07 0a 4b 	lsr	r11,r10,r7
800084a2:	30 07       	mov	r7,0
800084a4:	cb 3b       	rjmp	8000840a <__avr32_f64_sub_longnormalize_done>
800084a6:	ee 08 11 40 	rsub	r8,r7,64
800084aa:	f6 08 09 49 	lsl	r9,r11,r8
800084ae:	14 49       	or	r9,r10
800084b0:	5f 16       	srne	r6
800084b2:	f6 07 0a 4a 	lsr	r10,r11,r7
800084b6:	0c 4a       	or	r10,r6
800084b8:	30 0b       	mov	r11,0
800084ba:	30 07       	mov	r7,0
800084bc:	ca 7b       	rjmp	8000840a <__avr32_f64_sub_longnormalize_done>
800084be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800084c2 <__avr32_f64_sub_longshift>:
800084c2:	f1 b6 04 c0 	satu	r6,0x6
800084c6:	f0 0e 17 00 	moveq	lr,r8
800084ca:	c0 40       	breq	800084d2 <__avr32_f64_sub_longshift+0x10>
800084cc:	f2 05 09 4e 	lsl	lr,r9,r5
800084d0:	10 4e       	or	lr,r8
800084d2:	f2 06 0a 48 	lsr	r8,r9,r6
800084d6:	30 09       	mov	r9,0
800084d8:	58 0e       	cp.w	lr,0
800084da:	5f 1e       	srne	lr
800084dc:	1c 48       	or	r8,lr
800084de:	c8 3b       	rjmp	800083e4 <__avr32_f64_sub_shift_done>

800084e0 <__avr32_f64_sub_longnormalize>:
800084e0:	f4 06 12 00 	clz	r6,r10
800084e4:	f9 b7 03 00 	movlo	r7,0
800084e8:	f9 b6 03 00 	movlo	r6,0
800084ec:	f9 bc 03 00 	movlo	r12,0
800084f0:	f7 b6 02 e0 	subhs	r6,-32
800084f4:	f4 06 09 4b 	lsl	r11,r10,r6
800084f8:	30 0a       	mov	r10,0
800084fa:	0c 17       	sub	r7,r6
800084fc:	fe 9a ff be 	brle	80008478 <__avr32_f64_sub_subnormal_result>
80008500:	c8 5b       	rjmp	8000840a <__avr32_f64_sub_longnormalize_done>
80008502:	d7 03       	nop

80008504 <__avr32_f64_add_from_sub>:
80008504:	ee 19 80 00 	eorh	r9,0x8000

80008508 <__avr32_f64_add>:
80008508:	f7 e9 20 0c 	eor	r12,r11,r9
8000850c:	fe 96 ff 2e 	brmi	80008368 <__avr32_f64_sub_from_add>
80008510:	eb cd 40 e0 	pushm	r5-r7,lr
80008514:	16 9c       	mov	r12,r11
80008516:	e6 1c 80 00 	andh	r12,0x8000,COH
8000851a:	bf db       	cbr	r11,0x1f
8000851c:	bf d9       	cbr	r9,0x1f
8000851e:	12 3b       	cp.w	r11,r9
80008520:	c0 72       	brcc	8000852e <__avr32_f64_add+0x26>
80008522:	16 97       	mov	r7,r11
80008524:	12 9b       	mov	r11,r9
80008526:	0e 99       	mov	r9,r7
80008528:	14 97       	mov	r7,r10
8000852a:	10 9a       	mov	r10,r8
8000852c:	0e 98       	mov	r8,r7
8000852e:	30 0e       	mov	lr,0
80008530:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008534:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008538:	b5 ab       	sbr	r11,0x14
8000853a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000853e:	c6 20       	breq	80008602 <__avr32_f64_add_op2_subnormal>
80008540:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008544:	b5 a9       	sbr	r9,0x14
80008546:	e0 47 07 ff 	cp.w	r7,2047
8000854a:	c2 80       	breq	8000859a <__avr32_f64_add_opH_nan_or_inf>
8000854c:	0e 26       	rsub	r6,r7
8000854e:	c1 20       	breq	80008572 <__avr32_f64_add_shift_done>
80008550:	e0 46 00 36 	cp.w	r6,54
80008554:	c1 52       	brcc	8000857e <__avr32_f64_add_res_of_done>
80008556:	ec 05 11 20 	rsub	r5,r6,32
8000855a:	e0 46 00 20 	cp.w	r6,32
8000855e:	c3 52       	brcc	800085c8 <__avr32_f64_add_longshift>
80008560:	f0 05 09 4e 	lsl	lr,r8,r5
80008564:	f2 05 09 45 	lsl	r5,r9,r5
80008568:	f0 06 0a 48 	lsr	r8,r8,r6
8000856c:	f2 06 0a 49 	lsr	r9,r9,r6
80008570:	0a 48       	or	r8,r5

80008572 <__avr32_f64_add_shift_done>:
80008572:	10 0a       	add	r10,r8
80008574:	f6 09 00 4b 	adc	r11,r11,r9
80008578:	ed bb 00 15 	bld	r11,0x15
8000857c:	c3 40       	breq	800085e4 <__avr32_f64_add_res_of>

8000857e <__avr32_f64_add_res_of_done>:
8000857e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008582:	18 4b       	or	r11,r12

80008584 <__avr32_f64_add_round>:
80008584:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008588:	18 4e       	or	lr,r12
8000858a:	ee 1e 80 00 	eorh	lr,0x8000
8000858e:	f1 be 04 20 	satu	lr,0x1
80008592:	1c 0a       	add	r10,lr
80008594:	5c 0b       	acr	r11
80008596:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000859a <__avr32_f64_add_opH_nan_or_inf>:
8000859a:	b5 cb       	cbr	r11,0x14
8000859c:	f7 ea 10 0e 	or	lr,r11,r10
800085a0:	c1 01       	brne	800085c0 <__avr32_f64_add_return_nan>
800085a2:	e0 46 07 ff 	cp.w	r6,2047
800085a6:	c0 30       	breq	800085ac <__avr32_f64_add_opL_nan_or_inf>
800085a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085ac <__avr32_f64_add_opL_nan_or_inf>:
800085ac:	b5 c9       	cbr	r9,0x14
800085ae:	f3 e8 10 0e 	or	lr,r9,r8
800085b2:	c0 71       	brne	800085c0 <__avr32_f64_add_return_nan>
800085b4:	30 0a       	mov	r10,0
800085b6:	fc 1b 7f f0 	movh	r11,0x7ff0
800085ba:	18 4b       	or	r11,r12
800085bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085c0 <__avr32_f64_add_return_nan>:
800085c0:	3f fa       	mov	r10,-1
800085c2:	3f fb       	mov	r11,-1
800085c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085c8 <__avr32_f64_add_longshift>:
800085c8:	f1 b6 04 c0 	satu	r6,0x6
800085cc:	f0 0e 17 00 	moveq	lr,r8
800085d0:	c0 60       	breq	800085dc <__avr32_f64_add_longshift+0x14>
800085d2:	f2 05 09 4e 	lsl	lr,r9,r5
800085d6:	58 08       	cp.w	r8,0
800085d8:	5f 18       	srne	r8
800085da:	10 4e       	or	lr,r8
800085dc:	f2 06 0a 48 	lsr	r8,r9,r6
800085e0:	30 09       	mov	r9,0
800085e2:	cc 8b       	rjmp	80008572 <__avr32_f64_add_shift_done>

800085e4 <__avr32_f64_add_res_of>:
800085e4:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800085e8:	a1 9b       	lsr	r11,0x1
800085ea:	5d 0a       	ror	r10
800085ec:	5d 0e       	ror	lr
800085ee:	2f f7       	sub	r7,-1
800085f0:	e0 47 07 ff 	cp.w	r7,2047
800085f4:	f9 ba 00 00 	moveq	r10,0
800085f8:	f9 bb 00 00 	moveq	r11,0
800085fc:	f9 be 00 00 	moveq	lr,0
80008600:	cb fb       	rjmp	8000857e <__avr32_f64_add_res_of_done>

80008602 <__avr32_f64_add_op2_subnormal>:
80008602:	30 16       	mov	r6,1
80008604:	58 07       	cp.w	r7,0
80008606:	ca 01       	brne	80008546 <__avr32_f64_add+0x3e>
80008608:	b5 cb       	cbr	r11,0x14
8000860a:	10 0a       	add	r10,r8
8000860c:	f6 09 00 4b 	adc	r11,r11,r9
80008610:	18 4b       	or	r11,r12
80008612:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008616:	d7 03       	nop

80008618 <__avr32_f64_to_u32>:
80008618:	58 0b       	cp.w	r11,0
8000861a:	5e 6d       	retmi	0

8000861c <__avr32_f64_to_s32>:
8000861c:	f6 0c 15 01 	lsl	r12,r11,0x1
80008620:	b5 9c       	lsr	r12,0x15
80008622:	e0 2c 03 ff 	sub	r12,1023
80008626:	5e 3d       	retlo	0
80008628:	f8 0c 11 1f 	rsub	r12,r12,31
8000862c:	16 99       	mov	r9,r11
8000862e:	ab 7b       	lsl	r11,0xb
80008630:	bf bb       	sbr	r11,0x1f
80008632:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008636:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000863a:	a1 79       	lsl	r9,0x1
8000863c:	5e 2b       	reths	r11
8000863e:	5c 3b       	neg	r11
80008640:	5e fb       	retal	r11

80008642 <__avr32_u32_to_f64>:
80008642:	f8 cb 00 00 	sub	r11,r12,0
80008646:	30 0c       	mov	r12,0
80008648:	c0 38       	rjmp	8000864e <__avr32_s32_to_f64+0x4>

8000864a <__avr32_s32_to_f64>:
8000864a:	18 9b       	mov	r11,r12
8000864c:	5c 4b       	abs	r11
8000864e:	30 0a       	mov	r10,0
80008650:	5e 0b       	reteq	r11
80008652:	d4 01       	pushm	lr
80008654:	e0 69 04 1e 	mov	r9,1054
80008658:	f6 08 12 00 	clz	r8,r11
8000865c:	c1 70       	breq	8000868a <__avr32_s32_to_f64+0x40>
8000865e:	c0 c3       	brcs	80008676 <__avr32_s32_to_f64+0x2c>
80008660:	f0 0e 11 20 	rsub	lr,r8,32
80008664:	f6 08 09 4b 	lsl	r11,r11,r8
80008668:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000866c:	1c 4b       	or	r11,lr
8000866e:	f4 08 09 4a 	lsl	r10,r10,r8
80008672:	10 19       	sub	r9,r8
80008674:	c0 b8       	rjmp	8000868a <__avr32_s32_to_f64+0x40>
80008676:	f4 08 12 00 	clz	r8,r10
8000867a:	f9 b8 03 00 	movlo	r8,0
8000867e:	f7 b8 02 e0 	subhs	r8,-32
80008682:	f4 08 09 4b 	lsl	r11,r10,r8
80008686:	30 0a       	mov	r10,0
80008688:	10 19       	sub	r9,r8
8000868a:	58 09       	cp.w	r9,0
8000868c:	e0 89 00 30 	brgt	800086ec <__avr32_s32_to_f64+0xa2>
80008690:	5c 39       	neg	r9
80008692:	2f f9       	sub	r9,-1
80008694:	e0 49 00 36 	cp.w	r9,54
80008698:	c0 43       	brcs	800086a0 <__avr32_s32_to_f64+0x56>
8000869a:	30 0b       	mov	r11,0
8000869c:	30 0a       	mov	r10,0
8000869e:	c2 68       	rjmp	800086ea <__avr32_s32_to_f64+0xa0>
800086a0:	2f 69       	sub	r9,-10
800086a2:	f2 08 11 20 	rsub	r8,r9,32
800086a6:	e0 49 00 20 	cp.w	r9,32
800086aa:	c0 b2       	brcc	800086c0 <__avr32_s32_to_f64+0x76>
800086ac:	f4 08 09 4e 	lsl	lr,r10,r8
800086b0:	f6 08 09 48 	lsl	r8,r11,r8
800086b4:	f4 09 0a 4a 	lsr	r10,r10,r9
800086b8:	f6 09 0a 4b 	lsr	r11,r11,r9
800086bc:	10 4b       	or	r11,r8
800086be:	c0 88       	rjmp	800086ce <__avr32_s32_to_f64+0x84>
800086c0:	f6 08 09 4e 	lsl	lr,r11,r8
800086c4:	14 4e       	or	lr,r10
800086c6:	16 9a       	mov	r10,r11
800086c8:	30 0b       	mov	r11,0
800086ca:	f4 09 0a 4a 	lsr	r10,r10,r9
800086ce:	ed ba 00 00 	bld	r10,0x0
800086d2:	c0 92       	brcc	800086e4 <__avr32_s32_to_f64+0x9a>
800086d4:	1c 7e       	tst	lr,lr
800086d6:	c0 41       	brne	800086de <__avr32_s32_to_f64+0x94>
800086d8:	ed ba 00 01 	bld	r10,0x1
800086dc:	c0 42       	brcc	800086e4 <__avr32_s32_to_f64+0x9a>
800086de:	2f fa       	sub	r10,-1
800086e0:	f7 bb 02 ff 	subhs	r11,-1
800086e4:	5c fc       	rol	r12
800086e6:	5d 0b       	ror	r11
800086e8:	5d 0a       	ror	r10
800086ea:	d8 02       	popm	pc
800086ec:	e0 68 03 ff 	mov	r8,1023
800086f0:	ed ba 00 0b 	bld	r10,0xb
800086f4:	f7 b8 00 ff 	subeq	r8,-1
800086f8:	10 0a       	add	r10,r8
800086fa:	5c 0b       	acr	r11
800086fc:	f7 b9 03 fe 	sublo	r9,-2
80008700:	e0 49 07 ff 	cp.w	r9,2047
80008704:	c0 55       	brlt	8000870e <__avr32_s32_to_f64+0xc4>
80008706:	30 0a       	mov	r10,0
80008708:	fc 1b ff e0 	movh	r11,0xffe0
8000870c:	c0 c8       	rjmp	80008724 <__floatsidf_return_op1>
8000870e:	ed bb 00 1f 	bld	r11,0x1f
80008712:	f7 b9 01 01 	subne	r9,1
80008716:	ab 9a       	lsr	r10,0xb
80008718:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000871c:	a1 7b       	lsl	r11,0x1
8000871e:	ab 9b       	lsr	r11,0xb
80008720:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80008724 <__floatsidf_return_op1>:
80008724:	a1 7c       	lsl	r12,0x1
80008726:	5d 0b       	ror	r11
80008728:	d8 02       	popm	pc

8000872a <__avr32_f64_cmp_eq>:
8000872a:	10 3a       	cp.w	r10,r8
8000872c:	f2 0b 13 00 	cpc	r11,r9
80008730:	c0 80       	breq	80008740 <__avr32_f64_cmp_eq+0x16>
80008732:	a1 7b       	lsl	r11,0x1
80008734:	a1 79       	lsl	r9,0x1
80008736:	14 4b       	or	r11,r10
80008738:	12 4b       	or	r11,r9
8000873a:	10 4b       	or	r11,r8
8000873c:	5e 0f       	reteq	1
8000873e:	5e fd       	retal	0
80008740:	a1 7b       	lsl	r11,0x1
80008742:	fc 1c ff e0 	movh	r12,0xffe0
80008746:	58 0a       	cp.w	r10,0
80008748:	f8 0b 13 00 	cpc	r11,r12
8000874c:	5e 8f       	retls	1
8000874e:	5e fd       	retal	0

80008750 <__avr32_f64_cmp_ge>:
80008750:	1a de       	st.w	--sp,lr
80008752:	1a d7       	st.w	--sp,r7
80008754:	a1 7b       	lsl	r11,0x1
80008756:	5f 3c       	srlo	r12
80008758:	a1 79       	lsl	r9,0x1
8000875a:	5f 37       	srlo	r7
8000875c:	5c fc       	rol	r12
8000875e:	fc 1e ff e0 	movh	lr,0xffe0
80008762:	58 0a       	cp.w	r10,0
80008764:	fc 0b 13 00 	cpc	r11,lr
80008768:	e0 8b 00 1d 	brhi	800087a2 <__avr32_f64_cmp_ge+0x52>
8000876c:	58 08       	cp.w	r8,0
8000876e:	fc 09 13 00 	cpc	r9,lr
80008772:	e0 8b 00 18 	brhi	800087a2 <__avr32_f64_cmp_ge+0x52>
80008776:	58 0b       	cp.w	r11,0
80008778:	f5 ba 00 00 	subfeq	r10,0
8000877c:	c1 50       	breq	800087a6 <__avr32_f64_cmp_ge+0x56>
8000877e:	1b 07       	ld.w	r7,sp++
80008780:	1b 0e       	ld.w	lr,sp++
80008782:	58 3c       	cp.w	r12,3
80008784:	c0 a0       	breq	80008798 <__avr32_f64_cmp_ge+0x48>
80008786:	58 1c       	cp.w	r12,1
80008788:	c0 33       	brcs	8000878e <__avr32_f64_cmp_ge+0x3e>
8000878a:	5e 0f       	reteq	1
8000878c:	5e 1d       	retne	0
8000878e:	10 3a       	cp.w	r10,r8
80008790:	f2 0b 13 00 	cpc	r11,r9
80008794:	5e 2f       	reths	1
80008796:	5e 3d       	retlo	0
80008798:	14 38       	cp.w	r8,r10
8000879a:	f6 09 13 00 	cpc	r9,r11
8000879e:	5e 2f       	reths	1
800087a0:	5e 3d       	retlo	0
800087a2:	1b 07       	ld.w	r7,sp++
800087a4:	d8 0a       	popm	pc,r12=0
800087a6:	58 17       	cp.w	r7,1
800087a8:	5f 0c       	sreq	r12
800087aa:	58 09       	cp.w	r9,0
800087ac:	f5 b8 00 00 	subfeq	r8,0
800087b0:	1b 07       	ld.w	r7,sp++
800087b2:	1b 0e       	ld.w	lr,sp++
800087b4:	5e 0f       	reteq	1
800087b6:	5e fc       	retal	r12

800087b8 <__avr32_f64_cmp_lt>:
800087b8:	1a de       	st.w	--sp,lr
800087ba:	1a d7       	st.w	--sp,r7
800087bc:	a1 7b       	lsl	r11,0x1
800087be:	5f 3c       	srlo	r12
800087c0:	a1 79       	lsl	r9,0x1
800087c2:	5f 37       	srlo	r7
800087c4:	5c fc       	rol	r12
800087c6:	fc 1e ff e0 	movh	lr,0xffe0
800087ca:	58 0a       	cp.w	r10,0
800087cc:	fc 0b 13 00 	cpc	r11,lr
800087d0:	e0 8b 00 1d 	brhi	8000880a <__avr32_f64_cmp_lt+0x52>
800087d4:	58 08       	cp.w	r8,0
800087d6:	fc 09 13 00 	cpc	r9,lr
800087da:	e0 8b 00 18 	brhi	8000880a <__avr32_f64_cmp_lt+0x52>
800087de:	58 0b       	cp.w	r11,0
800087e0:	f5 ba 00 00 	subfeq	r10,0
800087e4:	c1 50       	breq	8000880e <__avr32_f64_cmp_lt+0x56>
800087e6:	1b 07       	ld.w	r7,sp++
800087e8:	1b 0e       	ld.w	lr,sp++
800087ea:	58 3c       	cp.w	r12,3
800087ec:	c0 a0       	breq	80008800 <__avr32_f64_cmp_lt+0x48>
800087ee:	58 1c       	cp.w	r12,1
800087f0:	c0 33       	brcs	800087f6 <__avr32_f64_cmp_lt+0x3e>
800087f2:	5e 0d       	reteq	0
800087f4:	5e 1f       	retne	1
800087f6:	10 3a       	cp.w	r10,r8
800087f8:	f2 0b 13 00 	cpc	r11,r9
800087fc:	5e 2d       	reths	0
800087fe:	5e 3f       	retlo	1
80008800:	14 38       	cp.w	r8,r10
80008802:	f6 09 13 00 	cpc	r9,r11
80008806:	5e 2d       	reths	0
80008808:	5e 3f       	retlo	1
8000880a:	1b 07       	ld.w	r7,sp++
8000880c:	d8 0a       	popm	pc,r12=0
8000880e:	58 17       	cp.w	r7,1
80008810:	5f 1c       	srne	r12
80008812:	58 09       	cp.w	r9,0
80008814:	f5 b8 00 00 	subfeq	r8,0
80008818:	1b 07       	ld.w	r7,sp++
8000881a:	1b 0e       	ld.w	lr,sp++
8000881c:	5e 0d       	reteq	0
8000881e:	5e fc       	retal	r12

80008820 <__avr32_f64_div>:
80008820:	eb cd 40 ff 	pushm	r0-r7,lr
80008824:	f7 e9 20 0e 	eor	lr,r11,r9
80008828:	f6 07 16 14 	lsr	r7,r11,0x14
8000882c:	a9 7b       	lsl	r11,0x9
8000882e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008832:	a9 7a       	lsl	r10,0x9
80008834:	bd bb       	sbr	r11,0x1d
80008836:	e4 1b 3f ff 	andh	r11,0x3fff
8000883a:	ab d7       	cbr	r7,0xb
8000883c:	e0 80 00 cc 	breq	800089d4 <__avr32_f64_div_round_subnormal+0x54>
80008840:	e0 47 07 ff 	cp.w	r7,2047
80008844:	e0 84 00 b5 	brge	800089ae <__avr32_f64_div_round_subnormal+0x2e>
80008848:	f2 06 16 14 	lsr	r6,r9,0x14
8000884c:	a9 79       	lsl	r9,0x9
8000884e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008852:	a9 78       	lsl	r8,0x9
80008854:	bd b9       	sbr	r9,0x1d
80008856:	e4 19 3f ff 	andh	r9,0x3fff
8000885a:	ab d6       	cbr	r6,0xb
8000885c:	e0 80 00 e2 	breq	80008a20 <__avr32_f64_div_round_subnormal+0xa0>
80008860:	e0 46 07 ff 	cp.w	r6,2047
80008864:	e0 84 00 b2 	brge	800089c8 <__avr32_f64_div_round_subnormal+0x48>
80008868:	0c 17       	sub	r7,r6
8000886a:	fe 37 fc 01 	sub	r7,-1023
8000886e:	fc 1c 80 00 	movh	r12,0x8000
80008872:	f8 03 16 01 	lsr	r3,r12,0x1
80008876:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000887a:	5c d4       	com	r4
8000887c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008880:	e6 09 06 44 	mulu.d	r4,r3,r9
80008884:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008888:	e6 05 06 44 	mulu.d	r4,r3,r5
8000888c:	ea 03 15 02 	lsl	r3,r5,0x2
80008890:	e6 09 06 44 	mulu.d	r4,r3,r9
80008894:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008898:	e6 05 06 44 	mulu.d	r4,r3,r5
8000889c:	ea 03 15 02 	lsl	r3,r5,0x2
800088a0:	e6 09 06 44 	mulu.d	r4,r3,r9
800088a4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800088a8:	e6 05 06 44 	mulu.d	r4,r3,r5
800088ac:	ea 03 15 02 	lsl	r3,r5,0x2
800088b0:	e6 08 06 40 	mulu.d	r0,r3,r8
800088b4:	e4 09 07 40 	macu.d	r0,r2,r9
800088b8:	e6 09 06 44 	mulu.d	r4,r3,r9
800088bc:	02 04       	add	r4,r1
800088be:	5c 05       	acr	r5
800088c0:	a3 65       	lsl	r5,0x2
800088c2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800088c6:	a3 64       	lsl	r4,0x2
800088c8:	5c 34       	neg	r4
800088ca:	f8 05 01 45 	sbc	r5,r12,r5
800088ce:	e6 04 06 40 	mulu.d	r0,r3,r4
800088d2:	e4 05 07 40 	macu.d	r0,r2,r5
800088d6:	e6 05 06 44 	mulu.d	r4,r3,r5
800088da:	02 04       	add	r4,r1
800088dc:	5c 05       	acr	r5
800088de:	ea 03 15 02 	lsl	r3,r5,0x2
800088e2:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800088e6:	e8 02 15 02 	lsl	r2,r4,0x2
800088ea:	e6 08 06 40 	mulu.d	r0,r3,r8
800088ee:	e4 09 07 40 	macu.d	r0,r2,r9
800088f2:	e6 09 06 44 	mulu.d	r4,r3,r9
800088f6:	02 04       	add	r4,r1
800088f8:	5c 05       	acr	r5
800088fa:	a3 65       	lsl	r5,0x2
800088fc:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008900:	a3 64       	lsl	r4,0x2
80008902:	5c 34       	neg	r4
80008904:	f8 05 01 45 	sbc	r5,r12,r5
80008908:	e6 04 06 40 	mulu.d	r0,r3,r4
8000890c:	e4 05 07 40 	macu.d	r0,r2,r5
80008910:	e6 05 06 44 	mulu.d	r4,r3,r5
80008914:	02 04       	add	r4,r1
80008916:	5c 05       	acr	r5
80008918:	ea 03 15 02 	lsl	r3,r5,0x2
8000891c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008920:	e8 02 15 02 	lsl	r2,r4,0x2
80008924:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008928:	e4 0b 07 40 	macu.d	r0,r2,r11
8000892c:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008930:	02 02       	add	r2,r1
80008932:	5c 03       	acr	r3
80008934:	ed b3 00 1c 	bld	r3,0x1c
80008938:	c0 90       	breq	8000894a <__avr32_f64_div+0x12a>
8000893a:	a1 72       	lsl	r2,0x1
8000893c:	5c f3       	rol	r3
8000893e:	20 17       	sub	r7,1
80008940:	a3 9a       	lsr	r10,0x3
80008942:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008946:	a3 9b       	lsr	r11,0x3
80008948:	c0 58       	rjmp	80008952 <__avr32_f64_div+0x132>
8000894a:	a5 8a       	lsr	r10,0x4
8000894c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008950:	a5 8b       	lsr	r11,0x4
80008952:	58 07       	cp.w	r7,0
80008954:	e0 8a 00 8b 	brle	80008a6a <__avr32_f64_div_res_subnormal>
80008958:	e0 12 ff 00 	andl	r2,0xff00
8000895c:	e8 12 00 80 	orl	r2,0x80
80008960:	e6 08 06 40 	mulu.d	r0,r3,r8
80008964:	e4 09 07 40 	macu.d	r0,r2,r9
80008968:	e4 08 06 44 	mulu.d	r4,r2,r8
8000896c:	e6 09 06 48 	mulu.d	r8,r3,r9
80008970:	00 05       	add	r5,r0
80008972:	f0 01 00 48 	adc	r8,r8,r1
80008976:	5c 09       	acr	r9
80008978:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000897c:	58 04       	cp.w	r4,0
8000897e:	5c 25       	cpc	r5

80008980 <__avr32_f64_div_round_subnormal>:
80008980:	f4 08 13 00 	cpc	r8,r10
80008984:	f6 09 13 00 	cpc	r9,r11
80008988:	5f 36       	srlo	r6
8000898a:	f8 06 17 00 	moveq	r6,r12
8000898e:	e4 0a 16 08 	lsr	r10,r2,0x8
80008992:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008996:	e6 0b 16 08 	lsr	r11,r3,0x8
8000899a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000899e:	ed be 00 1f 	bld	lr,0x1f
800089a2:	ef bb 00 1f 	bst	r11,0x1f
800089a6:	0c 0a       	add	r10,r6
800089a8:	5c 0b       	acr	r11
800089aa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800089ae:	e4 1b 00 0f 	andh	r11,0xf
800089b2:	14 4b       	or	r11,r10
800089b4:	e0 81 00 a7 	brne	80008b02 <__avr32_f64_div_res_subnormal+0x98>
800089b8:	f2 06 16 14 	lsr	r6,r9,0x14
800089bc:	ab d6       	cbr	r6,0xb
800089be:	e0 46 07 ff 	cp.w	r6,2047
800089c2:	e0 81 00 a4 	brne	80008b0a <__avr32_f64_div_res_subnormal+0xa0>
800089c6:	c9 e8       	rjmp	80008b02 <__avr32_f64_div_res_subnormal+0x98>
800089c8:	e4 19 00 0f 	andh	r9,0xf
800089cc:	10 49       	or	r9,r8
800089ce:	e0 81 00 9a 	brne	80008b02 <__avr32_f64_div_res_subnormal+0x98>
800089d2:	c9 28       	rjmp	80008af6 <__avr32_f64_div_res_subnormal+0x8c>
800089d4:	a3 7b       	lsl	r11,0x3
800089d6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800089da:	a3 7a       	lsl	r10,0x3
800089dc:	f5 eb 10 04 	or	r4,r10,r11
800089e0:	e0 80 00 a0 	breq	80008b20 <__avr32_f64_div_op1_zero>
800089e4:	f6 04 12 00 	clz	r4,r11
800089e8:	c1 70       	breq	80008a16 <__avr32_f64_div_round_subnormal+0x96>
800089ea:	c0 c3       	brcs	80008a02 <__avr32_f64_div_round_subnormal+0x82>
800089ec:	e8 05 11 20 	rsub	r5,r4,32
800089f0:	f6 04 09 4b 	lsl	r11,r11,r4
800089f4:	f4 05 0a 45 	lsr	r5,r10,r5
800089f8:	0a 4b       	or	r11,r5
800089fa:	f4 04 09 4a 	lsl	r10,r10,r4
800089fe:	08 17       	sub	r7,r4
80008a00:	c0 b8       	rjmp	80008a16 <__avr32_f64_div_round_subnormal+0x96>
80008a02:	f4 04 12 00 	clz	r4,r10
80008a06:	f9 b4 03 00 	movlo	r4,0
80008a0a:	f7 b4 02 e0 	subhs	r4,-32
80008a0e:	f4 04 09 4b 	lsl	r11,r10,r4
80008a12:	30 0a       	mov	r10,0
80008a14:	08 17       	sub	r7,r4
80008a16:	a3 8a       	lsr	r10,0x2
80008a18:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008a1c:	a3 8b       	lsr	r11,0x2
80008a1e:	c1 1b       	rjmp	80008840 <__avr32_f64_div+0x20>
80008a20:	a3 79       	lsl	r9,0x3
80008a22:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008a26:	a3 78       	lsl	r8,0x3
80008a28:	f3 e8 10 04 	or	r4,r9,r8
80008a2c:	c6 f0       	breq	80008b0a <__avr32_f64_div_res_subnormal+0xa0>
80008a2e:	f2 04 12 00 	clz	r4,r9
80008a32:	c1 70       	breq	80008a60 <__avr32_f64_div_round_subnormal+0xe0>
80008a34:	c0 c3       	brcs	80008a4c <__avr32_f64_div_round_subnormal+0xcc>
80008a36:	e8 05 11 20 	rsub	r5,r4,32
80008a3a:	f2 04 09 49 	lsl	r9,r9,r4
80008a3e:	f0 05 0a 45 	lsr	r5,r8,r5
80008a42:	0a 49       	or	r9,r5
80008a44:	f0 04 09 48 	lsl	r8,r8,r4
80008a48:	08 16       	sub	r6,r4
80008a4a:	c0 b8       	rjmp	80008a60 <__avr32_f64_div_round_subnormal+0xe0>
80008a4c:	f0 04 12 00 	clz	r4,r8
80008a50:	f9 b4 03 00 	movlo	r4,0
80008a54:	f7 b4 02 e0 	subhs	r4,-32
80008a58:	f0 04 09 49 	lsl	r9,r8,r4
80008a5c:	30 08       	mov	r8,0
80008a5e:	08 16       	sub	r6,r4
80008a60:	a3 88       	lsr	r8,0x2
80008a62:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008a66:	a3 89       	lsr	r9,0x2
80008a68:	cf ca       	rjmp	80008860 <__avr32_f64_div+0x40>

80008a6a <__avr32_f64_div_res_subnormal>:
80008a6a:	5c 37       	neg	r7
80008a6c:	2f f7       	sub	r7,-1
80008a6e:	f1 b7 04 c0 	satu	r7,0x6
80008a72:	e0 47 00 20 	cp.w	r7,32
80008a76:	c1 54       	brge	80008aa0 <__avr32_f64_div_res_subnormal+0x36>
80008a78:	ee 06 11 20 	rsub	r6,r7,32
80008a7c:	e4 07 0a 42 	lsr	r2,r2,r7
80008a80:	e6 06 09 4c 	lsl	r12,r3,r6
80008a84:	18 42       	or	r2,r12
80008a86:	e6 07 0a 43 	lsr	r3,r3,r7
80008a8a:	f4 06 09 41 	lsl	r1,r10,r6
80008a8e:	f4 07 0a 4a 	lsr	r10,r10,r7
80008a92:	f6 06 09 4c 	lsl	r12,r11,r6
80008a96:	18 4a       	or	r10,r12
80008a98:	f6 07 0a 4b 	lsr	r11,r11,r7
80008a9c:	30 00       	mov	r0,0
80008a9e:	c1 58       	rjmp	80008ac8 <__avr32_f64_div_res_subnormal+0x5e>
80008aa0:	ee 06 11 20 	rsub	r6,r7,32
80008aa4:	f9 b0 00 00 	moveq	r0,0
80008aa8:	f9 bc 00 00 	moveq	r12,0
80008aac:	c0 50       	breq	80008ab6 <__avr32_f64_div_res_subnormal+0x4c>
80008aae:	f4 06 09 40 	lsl	r0,r10,r6
80008ab2:	f6 06 09 4c 	lsl	r12,r11,r6
80008ab6:	e6 07 0a 42 	lsr	r2,r3,r7
80008aba:	30 03       	mov	r3,0
80008abc:	f4 07 0a 41 	lsr	r1,r10,r7
80008ac0:	18 41       	or	r1,r12
80008ac2:	f6 07 0a 4a 	lsr	r10,r11,r7
80008ac6:	30 0b       	mov	r11,0
80008ac8:	e0 12 ff 00 	andl	r2,0xff00
80008acc:	e8 12 00 80 	orl	r2,0x80
80008ad0:	e6 08 06 46 	mulu.d	r6,r3,r8
80008ad4:	e4 09 07 46 	macu.d	r6,r2,r9
80008ad8:	e4 08 06 44 	mulu.d	r4,r2,r8
80008adc:	e6 09 06 48 	mulu.d	r8,r3,r9
80008ae0:	0c 05       	add	r5,r6
80008ae2:	f0 07 00 48 	adc	r8,r8,r7
80008ae6:	5c 09       	acr	r9
80008ae8:	30 07       	mov	r7,0
80008aea:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008aee:	00 34       	cp.w	r4,r0
80008af0:	e2 05 13 00 	cpc	r5,r1
80008af4:	c4 6b       	rjmp	80008980 <__avr32_f64_div_round_subnormal>
80008af6:	1c 9b       	mov	r11,lr
80008af8:	e6 1b 80 00 	andh	r11,0x8000,COH
80008afc:	30 0a       	mov	r10,0
80008afe:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008b02:	3f fb       	mov	r11,-1
80008b04:	30 0a       	mov	r10,0
80008b06:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008b0a:	f5 eb 10 04 	or	r4,r10,r11
80008b0e:	c0 90       	breq	80008b20 <__avr32_f64_div_op1_zero>
80008b10:	1c 9b       	mov	r11,lr
80008b12:	e6 1b 80 00 	andh	r11,0x8000,COH
80008b16:	ea 1b 7f f0 	orh	r11,0x7ff0
80008b1a:	30 0a       	mov	r10,0
80008b1c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008b20 <__avr32_f64_div_op1_zero>:
80008b20:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008b24:	ce f0       	breq	80008b02 <__avr32_f64_div_res_subnormal+0x98>
80008b26:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008b2a:	e0 44 07 ff 	cp.w	r4,2047
80008b2e:	ce 41       	brne	80008af6 <__avr32_f64_div_res_subnormal+0x8c>
80008b30:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008b34:	ce 10       	breq	80008af6 <__avr32_f64_div_res_subnormal+0x8c>
80008b36:	ce 6b       	rjmp	80008b02 <__avr32_f64_div_res_subnormal+0x98>

80008b38 <__avr32_udiv64>:
80008b38:	d4 31       	pushm	r0-r7,lr
80008b3a:	1a 97       	mov	r7,sp
80008b3c:	20 3d       	sub	sp,12
80008b3e:	10 9c       	mov	r12,r8
80008b40:	12 9e       	mov	lr,r9
80008b42:	14 93       	mov	r3,r10
80008b44:	58 09       	cp.w	r9,0
80008b46:	e0 81 00 bd 	brne	80008cc0 <__avr32_udiv64+0x188>
80008b4a:	16 38       	cp.w	r8,r11
80008b4c:	e0 88 00 40 	brls	80008bcc <__avr32_udiv64+0x94>
80008b50:	f0 08 12 00 	clz	r8,r8
80008b54:	c0 d0       	breq	80008b6e <__avr32_udiv64+0x36>
80008b56:	f6 08 09 4b 	lsl	r11,r11,r8
80008b5a:	f0 09 11 20 	rsub	r9,r8,32
80008b5e:	f8 08 09 4c 	lsl	r12,r12,r8
80008b62:	f4 09 0a 49 	lsr	r9,r10,r9
80008b66:	f4 08 09 43 	lsl	r3,r10,r8
80008b6a:	f3 eb 10 0b 	or	r11,r9,r11
80008b6e:	f8 0e 16 10 	lsr	lr,r12,0x10
80008b72:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008b76:	f6 0e 0d 00 	divu	r0,r11,lr
80008b7a:	e6 0b 16 10 	lsr	r11,r3,0x10
80008b7e:	00 99       	mov	r9,r0
80008b80:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008b84:	e0 0a 02 48 	mul	r8,r0,r10
80008b88:	10 3b       	cp.w	r11,r8
80008b8a:	c0 a2       	brcc	80008b9e <__avr32_udiv64+0x66>
80008b8c:	20 19       	sub	r9,1
80008b8e:	18 0b       	add	r11,r12
80008b90:	18 3b       	cp.w	r11,r12
80008b92:	c0 63       	brcs	80008b9e <__avr32_udiv64+0x66>
80008b94:	10 3b       	cp.w	r11,r8
80008b96:	f7 b9 03 01 	sublo	r9,1
80008b9a:	f7 dc e3 0b 	addcs	r11,r11,r12
80008b9e:	f6 08 01 01 	sub	r1,r11,r8
80008ba2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008ba6:	e2 0e 0d 00 	divu	r0,r1,lr
80008baa:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008bae:	00 98       	mov	r8,r0
80008bb0:	e0 0a 02 4a 	mul	r10,r0,r10
80008bb4:	14 33       	cp.w	r3,r10
80008bb6:	c0 82       	brcc	80008bc6 <__avr32_udiv64+0x8e>
80008bb8:	20 18       	sub	r8,1
80008bba:	18 03       	add	r3,r12
80008bbc:	18 33       	cp.w	r3,r12
80008bbe:	c0 43       	brcs	80008bc6 <__avr32_udiv64+0x8e>
80008bc0:	14 33       	cp.w	r3,r10
80008bc2:	f7 b8 03 01 	sublo	r8,1
80008bc6:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008bca:	cd f8       	rjmp	80008d88 <__avr32_udiv64+0x250>
80008bcc:	58 08       	cp.w	r8,0
80008bce:	c0 51       	brne	80008bd8 <__avr32_udiv64+0xa0>
80008bd0:	30 19       	mov	r9,1
80008bd2:	f2 08 0d 08 	divu	r8,r9,r8
80008bd6:	10 9c       	mov	r12,r8
80008bd8:	f8 06 12 00 	clz	r6,r12
80008bdc:	c0 41       	brne	80008be4 <__avr32_udiv64+0xac>
80008bde:	18 1b       	sub	r11,r12
80008be0:	30 19       	mov	r9,1
80008be2:	c4 08       	rjmp	80008c62 <__avr32_udiv64+0x12a>
80008be4:	ec 01 11 20 	rsub	r1,r6,32
80008be8:	f4 01 0a 49 	lsr	r9,r10,r1
80008bec:	f8 06 09 4c 	lsl	r12,r12,r6
80008bf0:	f6 06 09 48 	lsl	r8,r11,r6
80008bf4:	f6 01 0a 41 	lsr	r1,r11,r1
80008bf8:	f3 e8 10 08 	or	r8,r9,r8
80008bfc:	f8 03 16 10 	lsr	r3,r12,0x10
80008c00:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008c04:	e2 03 0d 00 	divu	r0,r1,r3
80008c08:	f0 0b 16 10 	lsr	r11,r8,0x10
80008c0c:	00 9e       	mov	lr,r0
80008c0e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c12:	e0 05 02 49 	mul	r9,r0,r5
80008c16:	12 3b       	cp.w	r11,r9
80008c18:	c0 a2       	brcc	80008c2c <__avr32_udiv64+0xf4>
80008c1a:	20 1e       	sub	lr,1
80008c1c:	18 0b       	add	r11,r12
80008c1e:	18 3b       	cp.w	r11,r12
80008c20:	c0 63       	brcs	80008c2c <__avr32_udiv64+0xf4>
80008c22:	12 3b       	cp.w	r11,r9
80008c24:	f7 be 03 01 	sublo	lr,1
80008c28:	f7 dc e3 0b 	addcs	r11,r11,r12
80008c2c:	12 1b       	sub	r11,r9
80008c2e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008c32:	f6 03 0d 02 	divu	r2,r11,r3
80008c36:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008c3a:	04 99       	mov	r9,r2
80008c3c:	e4 05 02 4b 	mul	r11,r2,r5
80008c40:	16 38       	cp.w	r8,r11
80008c42:	c0 a2       	brcc	80008c56 <__avr32_udiv64+0x11e>
80008c44:	20 19       	sub	r9,1
80008c46:	18 08       	add	r8,r12
80008c48:	18 38       	cp.w	r8,r12
80008c4a:	c0 63       	brcs	80008c56 <__avr32_udiv64+0x11e>
80008c4c:	16 38       	cp.w	r8,r11
80008c4e:	f7 b9 03 01 	sublo	r9,1
80008c52:	f1 dc e3 08 	addcs	r8,r8,r12
80008c56:	f4 06 09 43 	lsl	r3,r10,r6
80008c5a:	f0 0b 01 0b 	sub	r11,r8,r11
80008c5e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008c62:	f8 06 16 10 	lsr	r6,r12,0x10
80008c66:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008c6a:	f6 06 0d 00 	divu	r0,r11,r6
80008c6e:	e6 0b 16 10 	lsr	r11,r3,0x10
80008c72:	00 9a       	mov	r10,r0
80008c74:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c78:	e0 0e 02 48 	mul	r8,r0,lr
80008c7c:	10 3b       	cp.w	r11,r8
80008c7e:	c0 a2       	brcc	80008c92 <__avr32_udiv64+0x15a>
80008c80:	20 1a       	sub	r10,1
80008c82:	18 0b       	add	r11,r12
80008c84:	18 3b       	cp.w	r11,r12
80008c86:	c0 63       	brcs	80008c92 <__avr32_udiv64+0x15a>
80008c88:	10 3b       	cp.w	r11,r8
80008c8a:	f7 ba 03 01 	sublo	r10,1
80008c8e:	f7 dc e3 0b 	addcs	r11,r11,r12
80008c92:	f6 08 01 01 	sub	r1,r11,r8
80008c96:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008c9a:	e2 06 0d 00 	divu	r0,r1,r6
80008c9e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008ca2:	00 98       	mov	r8,r0
80008ca4:	e0 0e 02 4b 	mul	r11,r0,lr
80008ca8:	16 33       	cp.w	r3,r11
80008caa:	c0 82       	brcc	80008cba <__avr32_udiv64+0x182>
80008cac:	20 18       	sub	r8,1
80008cae:	18 03       	add	r3,r12
80008cb0:	18 33       	cp.w	r3,r12
80008cb2:	c0 43       	brcs	80008cba <__avr32_udiv64+0x182>
80008cb4:	16 33       	cp.w	r3,r11
80008cb6:	f7 b8 03 01 	sublo	r8,1
80008cba:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008cbe:	c6 98       	rjmp	80008d90 <__avr32_udiv64+0x258>
80008cc0:	16 39       	cp.w	r9,r11
80008cc2:	e0 8b 00 65 	brhi	80008d8c <__avr32_udiv64+0x254>
80008cc6:	f2 09 12 00 	clz	r9,r9
80008cca:	c0 b1       	brne	80008ce0 <__avr32_udiv64+0x1a8>
80008ccc:	10 3a       	cp.w	r10,r8
80008cce:	5f 2a       	srhs	r10
80008cd0:	1c 3b       	cp.w	r11,lr
80008cd2:	5f b8       	srhi	r8
80008cd4:	10 4a       	or	r10,r8
80008cd6:	f2 0a 18 00 	cp.b	r10,r9
80008cda:	c5 90       	breq	80008d8c <__avr32_udiv64+0x254>
80008cdc:	30 18       	mov	r8,1
80008cde:	c5 98       	rjmp	80008d90 <__avr32_udiv64+0x258>
80008ce0:	f0 09 09 46 	lsl	r6,r8,r9
80008ce4:	f2 03 11 20 	rsub	r3,r9,32
80008ce8:	fc 09 09 4e 	lsl	lr,lr,r9
80008cec:	f0 03 0a 48 	lsr	r8,r8,r3
80008cf0:	f6 09 09 4c 	lsl	r12,r11,r9
80008cf4:	f4 03 0a 42 	lsr	r2,r10,r3
80008cf8:	ef 46 ff f4 	st.w	r7[-12],r6
80008cfc:	f6 03 0a 43 	lsr	r3,r11,r3
80008d00:	18 42       	or	r2,r12
80008d02:	f1 ee 10 0c 	or	r12,r8,lr
80008d06:	f8 01 16 10 	lsr	r1,r12,0x10
80008d0a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008d0e:	e6 01 0d 04 	divu	r4,r3,r1
80008d12:	e4 03 16 10 	lsr	r3,r2,0x10
80008d16:	08 9e       	mov	lr,r4
80008d18:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008d1c:	e8 06 02 48 	mul	r8,r4,r6
80008d20:	10 33       	cp.w	r3,r8
80008d22:	c0 a2       	brcc	80008d36 <__avr32_udiv64+0x1fe>
80008d24:	20 1e       	sub	lr,1
80008d26:	18 03       	add	r3,r12
80008d28:	18 33       	cp.w	r3,r12
80008d2a:	c0 63       	brcs	80008d36 <__avr32_udiv64+0x1fe>
80008d2c:	10 33       	cp.w	r3,r8
80008d2e:	f7 be 03 01 	sublo	lr,1
80008d32:	e7 dc e3 03 	addcs	r3,r3,r12
80008d36:	10 13       	sub	r3,r8
80008d38:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008d3c:	e6 01 0d 00 	divu	r0,r3,r1
80008d40:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008d44:	00 98       	mov	r8,r0
80008d46:	e0 06 02 46 	mul	r6,r0,r6
80008d4a:	0c 3b       	cp.w	r11,r6
80008d4c:	c0 a2       	brcc	80008d60 <__avr32_udiv64+0x228>
80008d4e:	20 18       	sub	r8,1
80008d50:	18 0b       	add	r11,r12
80008d52:	18 3b       	cp.w	r11,r12
80008d54:	c0 63       	brcs	80008d60 <__avr32_udiv64+0x228>
80008d56:	0c 3b       	cp.w	r11,r6
80008d58:	f7 dc e3 0b 	addcs	r11,r11,r12
80008d5c:	f7 b8 03 01 	sublo	r8,1
80008d60:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008d64:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008d68:	0c 1b       	sub	r11,r6
80008d6a:	f0 04 06 42 	mulu.d	r2,r8,r4
80008d6e:	06 95       	mov	r5,r3
80008d70:	16 35       	cp.w	r5,r11
80008d72:	e0 8b 00 0a 	brhi	80008d86 <__avr32_udiv64+0x24e>
80008d76:	5f 0b       	sreq	r11
80008d78:	f4 09 09 49 	lsl	r9,r10,r9
80008d7c:	12 32       	cp.w	r2,r9
80008d7e:	5f b9       	srhi	r9
80008d80:	f7 e9 00 09 	and	r9,r11,r9
80008d84:	c0 60       	breq	80008d90 <__avr32_udiv64+0x258>
80008d86:	20 18       	sub	r8,1
80008d88:	30 09       	mov	r9,0
80008d8a:	c0 38       	rjmp	80008d90 <__avr32_udiv64+0x258>
80008d8c:	30 09       	mov	r9,0
80008d8e:	12 98       	mov	r8,r9
80008d90:	10 9a       	mov	r10,r8
80008d92:	12 93       	mov	r3,r9
80008d94:	10 92       	mov	r2,r8
80008d96:	12 9b       	mov	r11,r9
80008d98:	2f dd       	sub	sp,-12
80008d9a:	d8 32       	popm	r0-r7,pc

80008d9c <__avr32_umod64>:
80008d9c:	d4 31       	pushm	r0-r7,lr
80008d9e:	1a 97       	mov	r7,sp
80008da0:	20 3d       	sub	sp,12
80008da2:	10 9c       	mov	r12,r8
80008da4:	12 95       	mov	r5,r9
80008da6:	14 9e       	mov	lr,r10
80008da8:	16 91       	mov	r1,r11
80008daa:	16 96       	mov	r6,r11
80008dac:	58 09       	cp.w	r9,0
80008dae:	e0 81 00 81 	brne	80008eb0 <__avr32_umod64+0x114>
80008db2:	16 38       	cp.w	r8,r11
80008db4:	e0 88 00 12 	brls	80008dd8 <__avr32_umod64+0x3c>
80008db8:	f0 08 12 00 	clz	r8,r8
80008dbc:	c4 e0       	breq	80008e58 <__avr32_umod64+0xbc>
80008dbe:	f6 08 09 46 	lsl	r6,r11,r8
80008dc2:	f8 08 09 4c 	lsl	r12,r12,r8
80008dc6:	f0 0b 11 20 	rsub	r11,r8,32
80008dca:	f4 08 09 4e 	lsl	lr,r10,r8
80008dce:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008dd2:	f7 e6 10 06 	or	r6,r11,r6
80008dd6:	c4 18       	rjmp	80008e58 <__avr32_umod64+0xbc>
80008dd8:	58 08       	cp.w	r8,0
80008dda:	c0 51       	brne	80008de4 <__avr32_umod64+0x48>
80008ddc:	30 19       	mov	r9,1
80008dde:	f2 08 0d 08 	divu	r8,r9,r8
80008de2:	10 9c       	mov	r12,r8
80008de4:	f8 08 12 00 	clz	r8,r12
80008de8:	c0 31       	brne	80008dee <__avr32_umod64+0x52>
80008dea:	18 16       	sub	r6,r12
80008dec:	c3 68       	rjmp	80008e58 <__avr32_umod64+0xbc>
80008dee:	f0 03 11 20 	rsub	r3,r8,32
80008df2:	f4 03 0a 4b 	lsr	r11,r10,r3
80008df6:	f8 08 09 4c 	lsl	r12,r12,r8
80008dfa:	ec 08 09 49 	lsl	r9,r6,r8
80008dfe:	ec 03 0a 43 	lsr	r3,r6,r3
80008e02:	f7 e9 10 09 	or	r9,r11,r9
80008e06:	f8 05 16 10 	lsr	r5,r12,0x10
80008e0a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008e0e:	e6 05 0d 02 	divu	r2,r3,r5
80008e12:	f2 0e 16 10 	lsr	lr,r9,0x10
80008e16:	ec 02 02 4b 	mul	r11,r6,r2
80008e1a:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008e1e:	16 3e       	cp.w	lr,r11
80008e20:	c0 72       	brcc	80008e2e <__avr32_umod64+0x92>
80008e22:	18 0e       	add	lr,r12
80008e24:	18 3e       	cp.w	lr,r12
80008e26:	c0 43       	brcs	80008e2e <__avr32_umod64+0x92>
80008e28:	16 3e       	cp.w	lr,r11
80008e2a:	fd dc e3 0e 	addcs	lr,lr,r12
80008e2e:	fc 0b 01 03 	sub	r3,lr,r11
80008e32:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008e36:	e6 05 0d 02 	divu	r2,r3,r5
80008e3a:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e3e:	a5 36       	mul	r6,r2
80008e40:	0c 39       	cp.w	r9,r6
80008e42:	c0 72       	brcc	80008e50 <__avr32_umod64+0xb4>
80008e44:	18 09       	add	r9,r12
80008e46:	18 39       	cp.w	r9,r12
80008e48:	c0 43       	brcs	80008e50 <__avr32_umod64+0xb4>
80008e4a:	0c 39       	cp.w	r9,r6
80008e4c:	f3 dc e3 09 	addcs	r9,r9,r12
80008e50:	f2 06 01 06 	sub	r6,r9,r6
80008e54:	f4 08 09 4e 	lsl	lr,r10,r8
80008e58:	f8 0a 16 10 	lsr	r10,r12,0x10
80008e5c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008e60:	ec 0a 0d 02 	divu	r2,r6,r10
80008e64:	fc 09 16 10 	lsr	r9,lr,0x10
80008e68:	ea 02 02 4b 	mul	r11,r5,r2
80008e6c:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e70:	16 39       	cp.w	r9,r11
80008e72:	c0 72       	brcc	80008e80 <__avr32_umod64+0xe4>
80008e74:	18 09       	add	r9,r12
80008e76:	18 39       	cp.w	r9,r12
80008e78:	c0 43       	brcs	80008e80 <__avr32_umod64+0xe4>
80008e7a:	16 39       	cp.w	r9,r11
80008e7c:	f3 dc e3 09 	addcs	r9,r9,r12
80008e80:	f2 0b 01 0b 	sub	r11,r9,r11
80008e84:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008e88:	f6 0a 0d 0a 	divu	r10,r11,r10
80008e8c:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008e90:	ea 0a 02 4a 	mul	r10,r5,r10
80008e94:	14 3e       	cp.w	lr,r10
80008e96:	c0 72       	brcc	80008ea4 <__avr32_umod64+0x108>
80008e98:	18 0e       	add	lr,r12
80008e9a:	18 3e       	cp.w	lr,r12
80008e9c:	c0 43       	brcs	80008ea4 <__avr32_umod64+0x108>
80008e9e:	14 3e       	cp.w	lr,r10
80008ea0:	fd dc e3 0e 	addcs	lr,lr,r12
80008ea4:	fc 0a 01 0a 	sub	r10,lr,r10
80008ea8:	30 0b       	mov	r11,0
80008eaa:	f4 08 0a 4a 	lsr	r10,r10,r8
80008eae:	c7 b8       	rjmp	80008fa4 <__avr32_umod64+0x208>
80008eb0:	16 39       	cp.w	r9,r11
80008eb2:	e0 8b 00 79 	brhi	80008fa4 <__avr32_umod64+0x208>
80008eb6:	f2 09 12 00 	clz	r9,r9
80008eba:	c1 21       	brne	80008ede <__avr32_umod64+0x142>
80008ebc:	10 3a       	cp.w	r10,r8
80008ebe:	5f 2b       	srhs	r11
80008ec0:	0a 31       	cp.w	r1,r5
80008ec2:	5f ba       	srhi	r10
80008ec4:	f7 ea 10 0a 	or	r10,r11,r10
80008ec8:	f2 0a 18 00 	cp.b	r10,r9
80008ecc:	c0 60       	breq	80008ed8 <__avr32_umod64+0x13c>
80008ece:	fc 08 01 0c 	sub	r12,lr,r8
80008ed2:	e2 05 01 46 	sbc	r6,r1,r5
80008ed6:	18 9e       	mov	lr,r12
80008ed8:	0c 9b       	mov	r11,r6
80008eda:	1c 9a       	mov	r10,lr
80008edc:	c6 48       	rjmp	80008fa4 <__avr32_umod64+0x208>
80008ede:	ea 09 09 4c 	lsl	r12,r5,r9
80008ee2:	f2 06 11 20 	rsub	r6,r9,32
80008ee6:	f6 09 09 4b 	lsl	r11,r11,r9
80008eea:	f0 09 09 42 	lsl	r2,r8,r9
80008eee:	ef 46 ff f4 	st.w	r7[-12],r6
80008ef2:	f0 06 0a 48 	lsr	r8,r8,r6
80008ef6:	18 48       	or	r8,r12
80008ef8:	e2 06 0a 4c 	lsr	r12,r1,r6
80008efc:	f4 09 09 43 	lsl	r3,r10,r9
80008f00:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008f04:	f4 06 0a 4a 	lsr	r10,r10,r6
80008f08:	16 4a       	or	r10,r11
80008f0a:	f0 0b 16 10 	lsr	r11,r8,0x10
80008f0e:	f8 0b 0d 04 	divu	r4,r12,r11
80008f12:	f4 0c 16 10 	lsr	r12,r10,0x10
80008f16:	08 91       	mov	r1,r4
80008f18:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008f1c:	e8 0e 02 46 	mul	r6,r4,lr
80008f20:	0c 3c       	cp.w	r12,r6
80008f22:	c0 a2       	brcc	80008f36 <__avr32_umod64+0x19a>
80008f24:	20 11       	sub	r1,1
80008f26:	10 0c       	add	r12,r8
80008f28:	10 3c       	cp.w	r12,r8
80008f2a:	c0 63       	brcs	80008f36 <__avr32_umod64+0x19a>
80008f2c:	0c 3c       	cp.w	r12,r6
80008f2e:	f7 b1 03 01 	sublo	r1,1
80008f32:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008f36:	0c 1c       	sub	r12,r6
80008f38:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008f3c:	f8 0b 0d 04 	divu	r4,r12,r11
80008f40:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008f44:	08 96       	mov	r6,r4
80008f46:	e8 0e 02 4e 	mul	lr,r4,lr
80008f4a:	1c 3b       	cp.w	r11,lr
80008f4c:	c0 a2       	brcc	80008f60 <__avr32_umod64+0x1c4>
80008f4e:	20 16       	sub	r6,1
80008f50:	10 0b       	add	r11,r8
80008f52:	10 3b       	cp.w	r11,r8
80008f54:	c0 63       	brcs	80008f60 <__avr32_umod64+0x1c4>
80008f56:	1c 3b       	cp.w	r11,lr
80008f58:	f7 b6 03 01 	sublo	r6,1
80008f5c:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008f60:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008f64:	1c 1b       	sub	r11,lr
80008f66:	e2 02 06 40 	mulu.d	r0,r1,r2
80008f6a:	00 9e       	mov	lr,r0
80008f6c:	02 9c       	mov	r12,r1
80008f6e:	16 3c       	cp.w	r12,r11
80008f70:	e0 8b 00 08 	brhi	80008f80 <__avr32_umod64+0x1e4>
80008f74:	5f 06       	sreq	r6
80008f76:	06 30       	cp.w	r0,r3
80008f78:	5f ba       	srhi	r10
80008f7a:	ed ea 00 0a 	and	r10,r6,r10
80008f7e:	c0 60       	breq	80008f8a <__avr32_umod64+0x1ee>
80008f80:	fc 02 01 04 	sub	r4,lr,r2
80008f84:	f8 08 01 4c 	sbc	r12,r12,r8
80008f88:	08 9e       	mov	lr,r4
80008f8a:	e6 0e 01 0a 	sub	r10,r3,lr
80008f8e:	f6 0c 01 4c 	sbc	r12,r11,r12
80008f92:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008f96:	f8 09 0a 4b 	lsr	r11,r12,r9
80008f9a:	f4 09 0a 4a 	lsr	r10,r10,r9
80008f9e:	f8 01 09 4c 	lsl	r12,r12,r1
80008fa2:	18 4a       	or	r10,r12
80008fa4:	2f dd       	sub	sp,-12
80008fa6:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 d1 09 	rcall	80003318 <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009110:	d6 03       	rete

80009112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 d1 02 	rcall	80003318 <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000911e:	d6 03       	rete

80009120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 d0 fb 	rcall	80003318 <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000912c:	d6 03       	rete

8000912e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 d0 f4 	rcall	80003318 <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
